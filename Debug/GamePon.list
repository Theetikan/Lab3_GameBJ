
GamePon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007244  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007424  08007424  00017424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007544  08007544  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800754c  0800754c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800754c  0800754c  0001754c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007550  08007550  00017550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  2000006c  080075c0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  080075c0  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132b7  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002809  00000000  00000000  00033396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00035ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c83  00000000  00000000  00036bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b70  00000000  00000000  0003783b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014814  00000000  00000000  0005e3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f06fa  00000000  00000000  00072bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c28  00000000  00000000  001632bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00167ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800740c 	.word	0x0800740c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800740c 	.word	0x0800740c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 ff9f 	bl	8001502 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f896 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f9da 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 80005cc:	f000 f9a6 	bl	800091c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d0:	f000 f91c 	bl	800080c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80005d4:	f000 f8da 	bl	800078c <MX_I2C1_Init>
  MX_SPI3_Init();
 80005d8:	f000 f962 	bl	80008a0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	SPITxRx_Setup();
 80005dc:	f000 faaa 	bl	8000b34 <SPITxRx_Setup>
	Round1 = 1;
 80005e0:	4b3a      	ldr	r3, [pc, #232]	; (80006cc <main+0x110>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
	Round2 = 1;
 80005e6:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <main+0x114>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		RandomNum1_1 = rand() % 10;
 80005ec:	f005 ff28 	bl	8006440 <rand>
 80005f0:	4601      	mov	r1, r0
 80005f2:	4b38      	ldr	r3, [pc, #224]	; (80006d4 <main+0x118>)
 80005f4:	fb83 2301 	smull	r2, r3, r3, r1
 80005f8:	109a      	asrs	r2, r3, #2
 80005fa:	17cb      	asrs	r3, r1, #31
 80005fc:	1ad2      	subs	r2, r2, r3
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	1aca      	subs	r2, r1, r3
 8000608:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <main+0x11c>)
 800060a:	601a      	str	r2, [r3, #0]
		RandomNum2_1 = rand() % 10;
 800060c:	f005 ff18 	bl	8006440 <rand>
 8000610:	4601      	mov	r1, r0
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <main+0x118>)
 8000614:	fb83 2301 	smull	r2, r3, r3, r1
 8000618:	109a      	asrs	r2, r3, #2
 800061a:	17cb      	asrs	r3, r1, #31
 800061c:	1ad2      	subs	r2, r2, r3
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	1aca      	subs	r2, r1, r3
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <main+0x120>)
 800062a:	601a      	str	r2, [r3, #0]
		RandomNum1_2 = rand() % 10;
 800062c:	f005 ff08 	bl	8006440 <rand>
 8000630:	4601      	mov	r1, r0
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <main+0x118>)
 8000634:	fb83 2301 	smull	r2, r3, r3, r1
 8000638:	109a      	asrs	r2, r3, #2
 800063a:	17cb      	asrs	r3, r1, #31
 800063c:	1ad2      	subs	r2, r2, r3
 800063e:	4613      	mov	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	1aca      	subs	r2, r1, r3
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <main+0x124>)
 800064a:	601a      	str	r2, [r3, #0]
		RandomNum2_2 = rand() % 10;
 800064c:	f005 fef8 	bl	8006440 <rand>
 8000650:	4601      	mov	r1, r0
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <main+0x118>)
 8000654:	fb83 2301 	smull	r2, r3, r3, r1
 8000658:	109a      	asrs	r2, r3, #2
 800065a:	17cb      	asrs	r3, r1, #31
 800065c:	1ad2      	subs	r2, r2, r3
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	1aca      	subs	r2, r1, r3
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <main+0x128>)
 800066a:	601a      	str	r2, [r3, #0]
		RandomNum1_3 = rand() % 10;
 800066c:	f005 fee8 	bl	8006440 <rand>
 8000670:	4601      	mov	r1, r0
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <main+0x118>)
 8000674:	fb83 2301 	smull	r2, r3, r3, r1
 8000678:	109a      	asrs	r2, r3, #2
 800067a:	17cb      	asrs	r3, r1, #31
 800067c:	1ad2      	subs	r2, r2, r3
 800067e:	4613      	mov	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	1aca      	subs	r2, r1, r3
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <main+0x12c>)
 800068a:	601a      	str	r2, [r3, #0]
		RandomNum2_3 = rand() % 10;
 800068c:	f005 fed8 	bl	8006440 <rand>
 8000690:	4601      	mov	r1, r0
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <main+0x118>)
 8000694:	fb83 2301 	smull	r2, r3, r3, r1
 8000698:	109a      	asrs	r2, r3, #2
 800069a:	17cb      	asrs	r3, r1, #31
 800069c:	1ad2      	subs	r2, r2, r3
 800069e:	4613      	mov	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	1aca      	subs	r2, r1, r3
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <main+0x130>)
 80006aa:	601a      	str	r2, [r3, #0]

	  EEPROMReadExample(eepromDataReadBack, 2);
 80006ac:	2102      	movs	r1, #2
 80006ae:	4810      	ldr	r0, [pc, #64]	; (80006f0 <main+0x134>)
 80006b0:	f000 fa1a 	bl	8000ae8 <EEPROMReadExample>
	  EEPROMWriteExample();
 80006b4:	f000 f9f4 	bl	8000aa0 <EEPROMWriteExample>

	  SPITxRx_readIO();
 80006b8:	f000 fa52 	bl	8000b60 <SPITxRx_readIO>

	  Switch();
 80006bc:	f000 faa2 	bl	8000c04 <Switch>
	  StateGame();
 80006c0:	f000 fb60 	bl	8000d84 <StateGame>
	  LED();
 80006c4:	f000 fbd6 	bl	8000e74 <LED>
  {
 80006c8:	e790      	b.n	80005ec <main+0x30>
 80006ca:	bf00      	nop
 80006cc:	200002ec 	.word	0x200002ec
 80006d0:	200002f0 	.word	0x200002f0
 80006d4:	66666667 	.word	0x66666667
 80006d8:	200002d4 	.word	0x200002d4
 80006dc:	200002d8 	.word	0x200002d8
 80006e0:	200002dc 	.word	0x200002dc
 80006e4:	200002e0 	.word	0x200002e0
 80006e8:	200002e4 	.word	0x200002e4
 80006ec:	200002e8 	.word	0x200002e8
 80006f0:	20000298 	.word	0x20000298

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0318 	add.w	r3, r7, #24
 80006fe:	2238      	movs	r2, #56	; 0x38
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f005 ffdf 	bl	80066c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000716:	2000      	movs	r0, #0
 8000718:	f003 facc 	bl	8003cb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000726:	2340      	movs	r3, #64	; 0x40
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072e:	2302      	movs	r3, #2
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000732:	2304      	movs	r3, #4
 8000734:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000736:	2355      	movs	r3, #85	; 0x55
 8000738:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073a:	2302      	movs	r3, #2
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0318 	add.w	r3, r7, #24
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fb66 	bl	8003e1c <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000756:	f000 fbbf 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2303      	movs	r3, #3
 8000760:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2104      	movs	r1, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f003 fe64 	bl	8004440 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800077e:	f000 fbab 	bl	8000ed8 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	; 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_I2C1_Init+0x74>)
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <MX_I2C1_Init+0x78>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_I2C1_Init+0x74>)
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <MX_I2C1_Init+0x7c>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_I2C1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c6:	480e      	ldr	r0, [pc, #56]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c8:	f001 fc41 	bl	800204e <HAL_I2C_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007d2:	f000 fb81 	bl	8000ed8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d6:	2100      	movs	r1, #0
 80007d8:	4809      	ldr	r0, [pc, #36]	; (8000800 <MX_I2C1_Init+0x74>)
 80007da:	f003 f9d3 	bl	8003b84 <HAL_I2CEx_ConfigAnalogFilter>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e4:	f000 fb78 	bl	8000ed8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_I2C1_Init+0x74>)
 80007ec:	f003 fa15 	bl	8003c1a <HAL_I2CEx_ConfigDigitalFilter>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007f6:	f000 fb6f 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000088 	.word	0x20000088
 8000804:	40005400 	.word	0x40005400
 8000808:	30a0a7fb 	.word	0x30a0a7fb

0800080c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000812:	4a22      	ldr	r2, [pc, #136]	; (800089c <MX_LPUART1_UART_Init+0x90>)
 8000814:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000850:	f004 ff88 	bl	8005764 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 fb3d 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000862:	f005 fd23 	bl	80062ac <HAL_UARTEx_SetTxFifoThreshold>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800086c:	f000 fb34 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000874:	f005 fd58 	bl	8006328 <HAL_UARTEx_SetRxFifoThreshold>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800087e:	f000 fb2b 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000884:	f005 fcd9 	bl	800623a <HAL_UARTEx_DisableFifoMode>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800088e:	f000 fb23 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000019c 	.word	0x2000019c
 800089c:	40008000 	.word	0x40008000

080008a0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_SPI3_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <MX_SPI3_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_SPI3_Init+0x74>)
 80008ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_SPI3_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_SPI3_Init+0x74>)
 80008ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008be:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_SPI3_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_SPI3_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_SPI3_Init+0x74>)
 80008ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_SPI3_Init+0x74>)
 80008d6:	2238      	movs	r2, #56	; 0x38
 80008d8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_SPI3_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_SPI3_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_SPI3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_SPI3_Init+0x74>)
 80008ee:	2207      	movs	r2, #7
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_SPI3_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_SPI3_Init+0x74>)
 80008fa:	2208      	movs	r2, #8
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_SPI3_Init+0x74>)
 8000900:	f004 fa08 	bl	8004d14 <HAL_SPI_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 fae5 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000230 	.word	0x20000230
 8000918:	40003c00 	.word	0x40003c00

0800091c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_DMA_Init+0x60>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <MX_DMA_Init+0x60>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6493      	str	r3, [r2, #72]	; 0x48
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_DMA_Init+0x60>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_DMA_Init+0x60>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <MX_DMA_Init+0x60>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6493      	str	r3, [r2, #72]	; 0x48
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <MX_DMA_Init+0x60>)
 8000948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	200b      	movs	r0, #11
 8000958:	f000 ff41 	bl	80017de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800095c:	200b      	movs	r0, #11
 800095e:	f000 ff58 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	200c      	movs	r0, #12
 8000968:	f000 ff39 	bl	80017de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800096c:	200c      	movs	r0, #12
 800096e:	f000 ff50 	bl	8001812 <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <MX_GPIO_Init+0x114>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a3e      	ldr	r2, [pc, #248]	; (8000a94 <MX_GPIO_Init+0x114>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b3c      	ldr	r3, [pc, #240]	; (8000a94 <MX_GPIO_Init+0x114>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	4b39      	ldr	r3, [pc, #228]	; (8000a94 <MX_GPIO_Init+0x114>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a38      	ldr	r2, [pc, #224]	; (8000a94 <MX_GPIO_Init+0x114>)
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b36      	ldr	r3, [pc, #216]	; (8000a94 <MX_GPIO_Init+0x114>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0320 	and.w	r3, r3, #32
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <MX_GPIO_Init+0x114>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <MX_GPIO_Init+0x114>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <MX_GPIO_Init+0x114>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <MX_GPIO_Init+0x114>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a2c      	ldr	r2, [pc, #176]	; (8000a94 <MX_GPIO_Init+0x114>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <MX_GPIO_Init+0x114>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <MX_GPIO_Init+0x114>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4a26      	ldr	r2, [pc, #152]	; (8000a94 <MX_GPIO_Init+0x114>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <MX_GPIO_Init+0x114>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f001 fadf 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	481e      	ldr	r0, [pc, #120]	; (8000a98 <MX_GPIO_Init+0x118>)
 8000a20:	f001 fada 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4818      	ldr	r0, [pc, #96]	; (8000a9c <MX_GPIO_Init+0x11c>)
 8000a3c:	f001 f932 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a40:	2320      	movs	r3, #32
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f001 f923 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <MX_GPIO_Init+0x118>)
 8000a76:	f001 f915 	bl	8001ca4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2028      	movs	r0, #40	; 0x28
 8000a80:	f000 fead 	bl	80017de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a84:	2028      	movs	r0, #40	; 0x28
 8000a86:	f000 fec4 	bl	8001812 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000c00 	.word	0x48000c00
 8000a9c:	48000800 	.word	0x48000800

08000aa0 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */
void EEPROMWriteExample() {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <EEPROMWriteExample+0x3c>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d012      	beq.n	8000ad4 <EEPROMWriteExample+0x34>
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <EEPROMWriteExample+0x40>)
 8000ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b20      	cmp	r3, #32
 8000ab8:	d10c      	bne.n	8000ad4 <EEPROMWriteExample+0x34>
		static uint8_t data[2] = { 1, 2};
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 2);
 8000aba:	2302      	movs	r3, #2
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <EEPROMWriteExample+0x44>)
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	222c      	movs	r2, #44	; 0x2c
 8000ac6:	21a0      	movs	r1, #160	; 0xa0
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <EEPROMWriteExample+0x40>)
 8000aca:	f001 fb5b 	bl	8002184 <HAL_I2C_Mem_Write_IT>
		eepromExampleWriteFlag = 0;
 8000ace:	4b03      	ldr	r3, [pc, #12]	; (8000adc <EEPROMWriteExample+0x3c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000294 	.word	0x20000294
 8000ae0:	20000088 	.word	0x20000088
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <EEPROMReadExample+0x44>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d012      	beq.n	8000b22 <EEPROMReadExample+0x3a>
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <EEPROMReadExample+0x48>)
 8000afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b20      	cmp	r3, #32
 8000b06:	d10c      	bne.n	8000b22 <EEPROMReadExample+0x3a>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000b08:	887b      	ldrh	r3, [r7, #2]
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2302      	movs	r3, #2
 8000b12:	222c      	movs	r2, #44	; 0x2c
 8000b14:	21a0      	movs	r1, #160	; 0xa0
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <EEPROMReadExample+0x48>)
 8000b18:	f001 fbbe 	bl	8002298 <HAL_I2C_Mem_Read_IT>
		eepromExampleReadFlag = 0;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <EEPROMReadExample+0x44>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
	}
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000295 	.word	0x20000295
 8000b30:	20000088 	.word	0x20000088

08000b34 <SPITxRx_Setup>:

void SPITxRx_Setup() {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
//CS pulse
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	4807      	ldr	r0, [pc, #28]	; (8000b5c <SPITxRx_Setup+0x28>)
 8000b3e:	f001 fa4b 	bl	8001fd8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f000 fd4e 	bl	80015e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <SPITxRx_Setup+0x28>)
 8000b4e:	f001 fa43 	bl	8001fd8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b52:	2001      	movs	r0, #1
 8000b54:	f000 fd46 	bl	80015e4 <HAL_Delay>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	48000c00 	.word	0x48000c00

08000b60 <SPITxRx_readIO>:
void SPITxRx_readIO() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) {
 8000b64:	2104      	movs	r1, #4
 8000b66:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <SPITxRx_readIO+0x54>)
 8000b68:	f001 fa1e 	bl	8001fa8 <HAL_GPIO_ReadPin>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d01e      	beq.n	8000bb0 <SPITxRx_readIO+0x50>
		if (StateRT == 0){
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <SPITxRx_readIO+0x58>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10e      	bne.n	8000b98 <SPITxRx_readIO+0x38>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <SPITxRx_readIO+0x54>)
 8000b80:	f001 fa2a 	bl	8001fd8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001; //what to do receive or transmit (1 == receive)
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <SPITxRx_readIO+0x5c>)
 8000b86:	2241      	movs	r2, #65	; 0x41
 8000b88:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12; //address
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <SPITxRx_readIO+0x5c>)
 8000b8c:	2212      	movs	r2, #18
 8000b8e:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <SPITxRx_readIO+0x5c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	709a      	strb	r2, [r3, #2]
 8000b96:	e005      	b.n	8000ba4 <SPITxRx_readIO+0x44>
		}
		else if (StateRT == 1){
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <SPITxRx_readIO+0x58>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d101      	bne.n	8000ba4 <SPITxRx_readIO+0x44>
			LED();
 8000ba0:	f000 f968 	bl	8000e74 <LED>
		}
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <SPITxRx_readIO+0x60>)
 8000ba8:	4904      	ldr	r1, [pc, #16]	; (8000bbc <SPITxRx_readIO+0x5c>)
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <SPITxRx_readIO+0x64>)
 8000bac:	f004 f95e 	bl	8004e6c <HAL_SPI_TransmitReceive_IT>
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	48000c00 	.word	0x48000c00
 8000bb8:	200002f4 	.word	0x200002f4
 8000bbc:	200002a8 	.word	0x200002a8
 8000bc0:	2000029c 	.word	0x2000029c
 8000bc4:	20000230 	.word	0x20000230

08000bc8 <HAL_SPI_TxRxCpltCallback>:
	SPITx[1] = 0x01;//IODIRB
	SPITx[2] = 0b00000000;
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	StateRT+=1;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_SPI_TxRxCpltCallback+0x34>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <HAL_SPI_TxRxCpltCallback+0x34>)
 8000bd8:	6013      	str	r3, [r2, #0]
		if (StateRT>1)
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_SPI_TxRxCpltCallback+0x34>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	dd02      	ble.n	8000be8 <HAL_SPI_TxRxCpltCallback+0x20>
		{
			StateRT = 0;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_SPI_TxRxCpltCallback+0x34>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
		}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000be8:	2201      	movs	r2, #1
 8000bea:	2104      	movs	r1, #4
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000bee:	f001 f9f3 	bl	8001fd8 <HAL_GPIO_WritePin>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200002f4 	.word	0x200002f4
 8000c00:	48000c00 	.word	0x48000c00

08000c04 <Switch>:


void Switch()
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
	if (SPIRx[2] == 15){
 8000c08:	4b50      	ldr	r3, [pc, #320]	; (8000d4c <Switch+0x148>)
 8000c0a:	789b      	ldrb	r3, [r3, #2]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d102      	bne.n	8000c16 <Switch+0x12>
		click = 0;
 8000c10:	4b4f      	ldr	r3, [pc, #316]	; (8000d50 <Switch+0x14c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
	}
		if (click == 0) {
 8000c16:	4b4e      	ldr	r3, [pc, #312]	; (8000d50 <Switch+0x14c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f040 8091 	bne.w	8000d42 <Switch+0x13e>
			if (SPIRx[2] == 7) // Button 1 pressed (0000 0001) P1 hit
 8000c20:	4b4a      	ldr	r3, [pc, #296]	; (8000d4c <Switch+0x148>)
 8000c22:	789b      	ldrb	r3, [r3, #2]
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	d139      	bne.n	8000c9c <Switch+0x98>
					{
				if (Round1 == 1) {
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <Switch+0x150>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d10f      	bne.n	8000c50 <Switch+0x4c>
					click = 1;
 8000c30:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <Switch+0x14c>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	601a      	str	r2, [r3, #0]
					ScorePlayer1 += RandomNum1_1; // Random the number
 8000c36:	4b48      	ldr	r3, [pc, #288]	; (8000d58 <Switch+0x154>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <Switch+0x158>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a45      	ldr	r2, [pc, #276]	; (8000d58 <Switch+0x154>)
 8000c42:	6013      	str	r3, [r2, #0]
					Round1 += 1;
 8000c44:	4b43      	ldr	r3, [pc, #268]	; (8000d54 <Switch+0x150>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a42      	ldr	r2, [pc, #264]	; (8000d54 <Switch+0x150>)
 8000c4c:	6013      	str	r3, [r2, #0]
					{
				click = 1;
				// read
		}
	}
}
 8000c4e:	e078      	b.n	8000d42 <Switch+0x13e>
				} else if (Round1 == 2) {
 8000c50:	4b40      	ldr	r3, [pc, #256]	; (8000d54 <Switch+0x150>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d10f      	bne.n	8000c78 <Switch+0x74>
					click = 1;
 8000c58:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <Switch+0x14c>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
					ScorePlayer1 += RandomNum1_2; // Random the number
 8000c5e:	4b3e      	ldr	r3, [pc, #248]	; (8000d58 <Switch+0x154>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <Switch+0x15c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a3b      	ldr	r2, [pc, #236]	; (8000d58 <Switch+0x154>)
 8000c6a:	6013      	str	r3, [r2, #0]
					Round1 += 1;
 8000c6c:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <Switch+0x150>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	4a38      	ldr	r2, [pc, #224]	; (8000d54 <Switch+0x150>)
 8000c74:	6013      	str	r3, [r2, #0]
}
 8000c76:	e064      	b.n	8000d42 <Switch+0x13e>
				} else if (Round1 == 3) {
 8000c78:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <Switch+0x150>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d160      	bne.n	8000d42 <Switch+0x13e>
					click = 1;
 8000c80:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <Switch+0x14c>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
					ScorePlayer1 += RandomNum1_3; // Random the number
 8000c86:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <Switch+0x154>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <Switch+0x160>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a31      	ldr	r2, [pc, #196]	; (8000d58 <Switch+0x154>)
 8000c92:	6013      	str	r3, [r2, #0]
					Round1 = 4;
 8000c94:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <Switch+0x150>)
 8000c96:	2204      	movs	r2, #4
 8000c98:	601a      	str	r2, [r3, #0]
}
 8000c9a:	e052      	b.n	8000d42 <Switch+0x13e>
			} else if (SPIRx[2] == 11) // Button 2 pressed (0000 0010) P1 stand
 8000c9c:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <Switch+0x148>)
 8000c9e:	789b      	ldrb	r3, [r3, #2]
 8000ca0:	2b0b      	cmp	r3, #11
 8000ca2:	d109      	bne.n	8000cb8 <Switch+0xb4>
				click = 1;
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <Switch+0x14c>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]
				P1Finish = 1;
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <Switch+0x164>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
				P2Finish = 1;
 8000cb0:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <Switch+0x168>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
}
 8000cb6:	e044      	b.n	8000d42 <Switch+0x13e>
			} else if (SPIRx[2] == 13) // Button 3 pressed (0000 0100) P2 hit
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <Switch+0x148>)
 8000cba:	789b      	ldrb	r3, [r3, #2]
 8000cbc:	2b0d      	cmp	r3, #13
 8000cbe:	d139      	bne.n	8000d34 <Switch+0x130>
				if (Round2 == 1) {
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <Switch+0x16c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d10f      	bne.n	8000ce8 <Switch+0xe4>
					click = 1;
 8000cc8:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <Switch+0x14c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
					ScorePlayer2 += RandomNum2_1; // Random the number
 8000cce:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <Switch+0x170>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <Switch+0x174>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <Switch+0x170>)
 8000cda:	6013      	str	r3, [r2, #0]
					Round2 += 1;
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <Switch+0x16c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a23      	ldr	r2, [pc, #140]	; (8000d70 <Switch+0x16c>)
 8000ce4:	6013      	str	r3, [r2, #0]
}
 8000ce6:	e02c      	b.n	8000d42 <Switch+0x13e>
				} else if (Round2 == 2) {
 8000ce8:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <Switch+0x16c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d10f      	bne.n	8000d10 <Switch+0x10c>
					click = 1;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <Switch+0x14c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
					ScorePlayer2 += RandomNum2_2; // Random the number
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <Switch+0x170>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <Switch+0x178>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <Switch+0x170>)
 8000d02:	6013      	str	r3, [r2, #0]
					Round2 += 1;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <Switch+0x16c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <Switch+0x16c>)
 8000d0c:	6013      	str	r3, [r2, #0]
}
 8000d0e:	e018      	b.n	8000d42 <Switch+0x13e>
				} else if (Round2 == 3) {
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <Switch+0x16c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d114      	bne.n	8000d42 <Switch+0x13e>
					click = 1;
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <Switch+0x14c>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
					ScorePlayer2 += RandomNum2_3; // Random the number
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <Switch+0x170>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <Switch+0x17c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <Switch+0x170>)
 8000d2a:	6013      	str	r3, [r2, #0]
					Round2 = 4;
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <Switch+0x16c>)
 8000d2e:	2204      	movs	r2, #4
 8000d30:	601a      	str	r2, [r3, #0]
}
 8000d32:	e006      	b.n	8000d42 <Switch+0x13e>
			} else if (SPIRx[2] == 14) // Button 4 pressed (0000 1000) P2 stand
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <Switch+0x148>)
 8000d36:	789b      	ldrb	r3, [r3, #2]
 8000d38:	2b0e      	cmp	r3, #14
 8000d3a:	d102      	bne.n	8000d42 <Switch+0x13e>
				click = 1;
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <Switch+0x14c>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	2000029c 	.word	0x2000029c
 8000d50:	200002d0 	.word	0x200002d0
 8000d54:	200002ec 	.word	0x200002ec
 8000d58:	200002c0 	.word	0x200002c0
 8000d5c:	200002d4 	.word	0x200002d4
 8000d60:	200002dc 	.word	0x200002dc
 8000d64:	200002e4 	.word	0x200002e4
 8000d68:	200002c8 	.word	0x200002c8
 8000d6c:	200002cc 	.word	0x200002cc
 8000d70:	200002f0 	.word	0x200002f0
 8000d74:	200002c4 	.word	0x200002c4
 8000d78:	200002d8 	.word	0x200002d8
 8000d7c:	200002e0 	.word	0x200002e0
 8000d80:	200002e8 	.word	0x200002e8

08000d84 <StateGame>:


void StateGame(){
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	if (P1Finish == 1 && P2Finish == 1){
 8000d88:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <StateGame+0xd4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d15d      	bne.n	8000e4c <StateGame+0xc8>
 8000d90:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <StateGame+0xd8>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d159      	bne.n	8000e4c <StateGame+0xc8>
		TotalScorePlayer1 = ScorePlayer1 ;
 8000d98:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <StateGame+0xdc>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a31      	ldr	r2, [pc, #196]	; (8000e64 <StateGame+0xe0>)
 8000d9e:	6013      	str	r3, [r2, #0]
		TotalScorePlayer2 = ScorePlayer2 ;
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <StateGame+0xe4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a31      	ldr	r2, [pc, #196]	; (8000e6c <StateGame+0xe8>)
 8000da6:	6013      	str	r3, [r2, #0]
		if (TotalScorePlayer1 == TotalScorePlayer2) {
 8000da8:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <StateGame+0xe0>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <StateGame+0xe8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d103      	bne.n	8000dbc <StateGame+0x38>
	       State = 3; //Tie
 8000db4:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <StateGame+0xec>)
 8000db6:	2203      	movs	r2, #3
 8000db8:	601a      	str	r2, [r3, #0]
		else if (TotalScorePlayer1 >21 && TotalScorePlayer2 < 21 || TotalScorePlayer2 == 21   ) {
			State = 2; //Player1Win
				}

	}
}
 8000dba:	e047      	b.n	8000e4c <StateGame+0xc8>
		else if (TotalScorePlayer1 > 21 && TotalScorePlayer2 > 21) {
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <StateGame+0xe0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b15      	cmp	r3, #21
 8000dc2:	dd07      	ble.n	8000dd4 <StateGame+0x50>
 8000dc4:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <StateGame+0xe8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b15      	cmp	r3, #21
 8000dca:	dd03      	ble.n	8000dd4 <StateGame+0x50>
	       State = 3; //Tie
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <StateGame+0xec>)
 8000dce:	2203      	movs	r2, #3
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e03b      	b.n	8000e4c <StateGame+0xc8>
		else if (TotalScorePlayer1 > TotalScorePlayer2 && TotalScorePlayer1 <= 21) {
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <StateGame+0xe0>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <StateGame+0xe8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dd07      	ble.n	8000df0 <StateGame+0x6c>
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <StateGame+0xe0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b15      	cmp	r3, #21
 8000de6:	dc03      	bgt.n	8000df0 <StateGame+0x6c>
	       State = 1; //Player1Win
 8000de8:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <StateGame+0xec>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	e02d      	b.n	8000e4c <StateGame+0xc8>
		else if (TotalScorePlayer2 > TotalScorePlayer1 && TotalScorePlayer2 <= 21) {
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <StateGame+0xe8>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <StateGame+0xe0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dd07      	ble.n	8000e0c <StateGame+0x88>
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <StateGame+0xe8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b15      	cmp	r3, #21
 8000e02:	dc03      	bgt.n	8000e0c <StateGame+0x88>
	       State = 2; //Player2Win
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <StateGame+0xec>)
 8000e06:	2202      	movs	r2, #2
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e01f      	b.n	8000e4c <StateGame+0xc8>
		else if (TotalScorePlayer2 >21 && TotalScorePlayer1 < 21 || TotalScorePlayer1 == 21  ) {
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <StateGame+0xe8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b15      	cmp	r3, #21
 8000e12:	dd03      	ble.n	8000e1c <StateGame+0x98>
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <StateGame+0xe0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b14      	cmp	r3, #20
 8000e1a:	dd03      	ble.n	8000e24 <StateGame+0xa0>
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <StateGame+0xe0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b15      	cmp	r3, #21
 8000e22:	d103      	bne.n	8000e2c <StateGame+0xa8>
			State = 1; //Player1Win
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <StateGame+0xec>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e00f      	b.n	8000e4c <StateGame+0xc8>
		else if (TotalScorePlayer1 >21 && TotalScorePlayer2 < 21 || TotalScorePlayer2 == 21   ) {
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <StateGame+0xe0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b15      	cmp	r3, #21
 8000e32:	dd03      	ble.n	8000e3c <StateGame+0xb8>
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <StateGame+0xe8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b14      	cmp	r3, #20
 8000e3a:	dd03      	ble.n	8000e44 <StateGame+0xc0>
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <StateGame+0xe8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b15      	cmp	r3, #21
 8000e42:	d103      	bne.n	8000e4c <StateGame+0xc8>
			State = 2; //Player1Win
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <StateGame+0xec>)
 8000e46:	2202      	movs	r2, #2
 8000e48:	601a      	str	r2, [r3, #0]
}
 8000e4a:	e7ff      	b.n	8000e4c <StateGame+0xc8>
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200002c8 	.word	0x200002c8
 8000e5c:	200002cc 	.word	0x200002cc
 8000e60:	200002c0 	.word	0x200002c0
 8000e64:	200002b8 	.word	0x200002b8
 8000e68:	200002c4 	.word	0x200002c4
 8000e6c:	200002bc 	.word	0x200002bc
 8000e70:	200002b4 	.word	0x200002b4

08000e74 <LED>:


void LED() {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4813      	ldr	r0, [pc, #76]	; (8000ecc <LED+0x58>)
 8000e7e:	f001 f8ab 	bl	8001fd8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000; // write
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <LED+0x5c>)
 8000e84:	2240      	movs	r2, #64	; 0x40
 8000e86:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x01; // OLATB
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <LED+0x5c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	705a      	strb	r2, [r3, #1]
		if (State == 3) { //tie
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <LED+0x60>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d102      	bne.n	8000e9c <LED+0x28>
			SPITx[2] = 0b11101111; // LED ON 4
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <LED+0x5c>)
 8000e98:	22ef      	movs	r2, #239	; 0xef
 8000e9a:	709a      	strb	r2, [r3, #2]
		}
		if (State == 1) { // p1 win
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <LED+0x60>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d102      	bne.n	8000eaa <LED+0x36>
			SPITx[2] = 0b10111111; // LED ON 2
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <LED+0x5c>)
 8000ea6:	22bf      	movs	r2, #191	; 0xbf
 8000ea8:	709a      	strb	r2, [r3, #2]
		}
		if (State == 2) { //p2 win
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <LED+0x60>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d102      	bne.n	8000eb8 <LED+0x44>
			SPITx[2] = 0b11011111; // LED ON 3
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <LED+0x5c>)
 8000eb4:	22df      	movs	r2, #223	; 0xdf
 8000eb6:	709a      	strb	r2, [r3, #2]
		}
		if (State == 0) { //playing
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <LED+0x60>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <LED+0x52>
			SPITx[2] = 0b01111111; // LED ON 1
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <LED+0x5c>)
 8000ec2:	227f      	movs	r2, #127	; 0x7f
 8000ec4:	709a      	strb	r2, [r3, #2]
		}
	}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	48000c00 	.word	0x48000c00
 8000ed0:	200002a8 	.word	0x200002a8
 8000ed4:	200002b4 	.word	0x200002b4

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x8>
	...

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_MspInit+0x44>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_MspInit+0x44>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_MspInit+0x44>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_MspInit+0x44>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_MspInit+0x44>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_MspInit+0x44>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f1a:	f002 ff6f 	bl	8003dfc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0a0      	sub	sp, #128	; 0x80
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	2254      	movs	r2, #84	; 0x54
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f005 fbba 	bl	80066c6 <memset>
  if(hi2c->Instance==I2C1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a5f      	ldr	r2, [pc, #380]	; (80010d4 <HAL_I2C_MspInit+0x1a8>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	f040 80b6 	bne.w	80010ca <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f5e:	2340      	movs	r3, #64	; 0x40
 8000f60:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f66:	f107 0318 	add.w	r3, r7, #24
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fc84 	bl	8004878 <HAL_RCCEx_PeriphCLKConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f76:	f7ff ffaf 	bl	8000ed8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b57      	ldr	r3, [pc, #348]	; (80010d8 <HAL_I2C_MspInit+0x1ac>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a56      	ldr	r2, [pc, #344]	; (80010d8 <HAL_I2C_MspInit+0x1ac>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b54      	ldr	r3, [pc, #336]	; (80010d8 <HAL_I2C_MspInit+0x1ac>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b51      	ldr	r3, [pc, #324]	; (80010d8 <HAL_I2C_MspInit+0x1ac>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a50      	ldr	r2, [pc, #320]	; (80010d8 <HAL_I2C_MspInit+0x1ac>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b4e      	ldr	r3, [pc, #312]	; (80010d8 <HAL_I2C_MspInit+0x1ac>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb0:	2312      	movs	r3, #18
 8000fb2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fca:	f000 fe6b 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd2:	2312      	movs	r3, #18
 8000fd4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	483c      	ldr	r0, [pc, #240]	; (80010dc <HAL_I2C_MspInit+0x1b0>)
 8000fea:	f000 fe5b 	bl	8001ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fee:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <HAL_I2C_MspInit+0x1ac>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	4a39      	ldr	r2, [pc, #228]	; (80010d8 <HAL_I2C_MspInit+0x1ac>)
 8000ff4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffa:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <HAL_I2C_MspInit+0x1ac>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8001006:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <HAL_I2C_MspInit+0x1b4>)
 8001008:	4a36      	ldr	r2, [pc, #216]	; (80010e4 <HAL_I2C_MspInit+0x1b8>)
 800100a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800100c:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <HAL_I2C_MspInit+0x1b4>)
 800100e:	2210      	movs	r2, #16
 8001010:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <HAL_I2C_MspInit+0x1b4>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001018:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <HAL_I2C_MspInit+0x1b4>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800101e:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <HAL_I2C_MspInit+0x1b4>)
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_I2C_MspInit+0x1b4>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_I2C_MspInit+0x1b4>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_I2C_MspInit+0x1b4>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <HAL_I2C_MspInit+0x1b4>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800103c:	4828      	ldr	r0, [pc, #160]	; (80010e0 <HAL_I2C_MspInit+0x1b4>)
 800103e:	f000 fc03 	bl	8001848 <HAL_DMA_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001048:	f7ff ff46 	bl	8000ed8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <HAL_I2C_MspInit+0x1b4>)
 8001050:	63da      	str	r2, [r3, #60]	; 0x3c
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <HAL_I2C_MspInit+0x1b4>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <HAL_I2C_MspInit+0x1bc>)
 800105a:	4a24      	ldr	r2, [pc, #144]	; (80010ec <HAL_I2C_MspInit+0x1c0>)
 800105c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <HAL_I2C_MspInit+0x1bc>)
 8001060:	2211      	movs	r2, #17
 8001062:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <HAL_I2C_MspInit+0x1bc>)
 8001066:	2210      	movs	r2, #16
 8001068:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <HAL_I2C_MspInit+0x1bc>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_I2C_MspInit+0x1bc>)
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <HAL_I2C_MspInit+0x1bc>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_I2C_MspInit+0x1bc>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_I2C_MspInit+0x1bc>)
 8001084:	2200      	movs	r2, #0
 8001086:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_I2C_MspInit+0x1bc>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800108e:	4816      	ldr	r0, [pc, #88]	; (80010e8 <HAL_I2C_MspInit+0x1bc>)
 8001090:	f000 fbda 	bl	8001848 <HAL_DMA_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 800109a:	f7ff ff1d 	bl	8000ed8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_I2C_MspInit+0x1bc>)
 80010a2:	639a      	str	r2, [r3, #56]	; 0x38
 80010a4:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_I2C_MspInit+0x1bc>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	201f      	movs	r0, #31
 80010b0:	f000 fb95 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010b4:	201f      	movs	r0, #31
 80010b6:	f000 fbac 	bl	8001812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2020      	movs	r0, #32
 80010c0:	f000 fb8d 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010c4:	2020      	movs	r0, #32
 80010c6:	f000 fba4 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3780      	adds	r7, #128	; 0x80
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40005400 	.word	0x40005400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	200000dc 	.word	0x200000dc
 80010e4:	40020008 	.word	0x40020008
 80010e8:	2000013c 	.word	0x2000013c
 80010ec:	4002001c 	.word	0x4002001c

080010f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09e      	sub	sp, #120	; 0x78
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	2254      	movs	r2, #84	; 0x54
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f005 fad8 	bl	80066c6 <memset>
  if(huart->Instance==LPUART1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a1f      	ldr	r2, [pc, #124]	; (8001198 <HAL_UART_MspInit+0xa8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d136      	bne.n	800118e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001120:	2320      	movs	r3, #32
 8001122:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4618      	mov	r0, r3
 800112e:	f003 fba3 	bl	8004878 <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001138:	f7ff fece 	bl	8000ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_UART_MspInit+0xac>)
 800113e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001140:	4a16      	ldr	r2, [pc, #88]	; (800119c <HAL_UART_MspInit+0xac>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_UART_MspInit+0xac>)
 800114a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_UART_MspInit+0xac>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_UART_MspInit+0xac>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_UART_MspInit+0xac>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800116c:	230c      	movs	r3, #12
 800116e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800117c:	230c      	movs	r3, #12
 800117e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f000 fd8b 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3778      	adds	r7, #120	; 0x78
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40008000 	.word	0x40008000
 800119c:	40021000 	.word	0x40021000

080011a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_SPI_MspInit+0x8c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d130      	bne.n	8001224 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_SPI_MspInit+0x90>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <HAL_SPI_MspInit+0x90>)
 80011c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011cc:	6593      	str	r3, [r2, #88]	; 0x58
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_SPI_MspInit+0x90>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_SPI_MspInit+0x90>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a14      	ldr	r2, [pc, #80]	; (8001230 <HAL_SPI_MspInit+0x90>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_SPI_MspInit+0x90>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001204:	2306      	movs	r3, #6
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4809      	ldr	r0, [pc, #36]	; (8001234 <HAL_SPI_MspInit+0x94>)
 8001210:	f000 fd48 	bl	8001ca4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	2033      	movs	r0, #51	; 0x33
 800121a:	f000 fae0 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800121e:	2033      	movs	r0, #51	; 0x33
 8001220:	f000 faf7 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	; 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40003c00 	.word	0x40003c00
 8001230:	40021000 	.word	0x40021000
 8001234:	48000800 	.word	0x48000800

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x4>

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 f990 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <DMA1_Channel1_IRQHandler+0x10>)
 8001292:	f000 fbe8 	bl	8001a66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200000dc 	.word	0x200000dc

080012a0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <DMA1_Channel2_IRQHandler+0x10>)
 80012a6:	f000 fbde 	bl	8001a66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000013c 	.word	0x2000013c

080012b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <I2C1_EV_IRQHandler+0x10>)
 80012ba:	f001 f873 	bl	80023a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000088 	.word	0x20000088

080012c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <I2C1_ER_IRQHandler+0x10>)
 80012ce:	f001 f883 	bl	80023d8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000088 	.word	0x20000088

080012dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012e4:	f000 fe90 	bl	8002008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <SPI3_IRQHandler+0x10>)
 80012f2:	f003 fe69 	bl	8004fc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000230 	.word	0x20000230

08001300 <_getpid>:
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
 8001304:	2301      	movs	r3, #1
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_kill>:
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	f005 fa23 	bl	8006764 <__errno>
 800131e:	4603      	mov	r3, r0
 8001320:	2216      	movs	r2, #22
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_exit>:
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ffe7 	bl	8001310 <_kill>
 8001342:	e7fe      	b.n	8001342 <_exit+0x12>

08001344 <_read>:
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e00a      	b.n	800136c <_read+0x28>
 8001356:	f3af 8000 	nop.w
 800135a:	4601      	mov	r1, r0
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	60ba      	str	r2, [r7, #8]
 8001362:	b2ca      	uxtb	r2, r1
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	dbf0      	blt.n	8001356 <_read+0x12>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_write>:
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e009      	b.n	80013a4 <_write+0x26>
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	60ba      	str	r2, [r7, #8]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f3af 8000 	nop.w
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	dbf1      	blt.n	8001390 <_write+0x12>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <_close>:
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_fstat>:
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	2300      	movs	r3, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_isatty>:
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	2301      	movs	r3, #1
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_lseek>:
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	2300      	movs	r3, #0
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <_sbrk>:
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <_sbrk+0x5c>)
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <_sbrk+0x60>)
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x22>
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <_sbrk+0x64>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <_sbrk+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <_sbrk+0x40>
 8001450:	f005 f988 	bl	8006764 <__errno>
 8001454:	4603      	mov	r3, r0
 8001456:	220c      	movs	r2, #12
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	e009      	b.n	8001474 <_sbrk+0x54>
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <_sbrk+0x64>)
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20020000 	.word	0x20020000
 8001480:	00000400 	.word	0x00000400
 8001484:	200002f8 	.word	0x200002f8
 8001488:	20000450 	.word	0x20000450

0800148c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <Reset_Handler>:
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <LoopForever+0x2>)
 80014b2:	4685      	mov	sp, r0
 80014b4:	f7ff ffea 	bl	800148c <SystemInit>
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <LoopForever+0x6>)
 80014ba:	490d      	ldr	r1, [pc, #52]	; (80014f0 <LoopForever+0xa>)
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <LoopForever+0xe>)
 80014be:	2300      	movs	r3, #0
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:
 80014c2:	58d4      	ldr	r4, [r2, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:
 80014c8:	18c4      	adds	r4, r0, r3
 80014ca:	428c      	cmp	r4, r1
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <LoopForever+0x12>)
 80014d0:	4c0a      	ldr	r4, [pc, #40]	; (80014fc <LoopForever+0x16>)
 80014d2:	2300      	movs	r3, #0
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:
 80014da:	42a2      	cmp	r2, r4
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>
 80014de:	f005 f947 	bl	8006770 <__libc_init_array>
 80014e2:	f7ff f86b 	bl	80005bc <main>

080014e6 <LoopForever>:
 80014e6:	e7fe      	b.n	80014e6 <LoopForever>
 80014e8:	20020000 	.word	0x20020000
 80014ec:	20000000 	.word	0x20000000
 80014f0:	2000006c 	.word	0x2000006c
 80014f4:	08007554 	.word	0x08007554
 80014f8:	2000006c 	.word	0x2000006c
 80014fc:	2000044c 	.word	0x2000044c

08001500 <ADC1_2_IRQHandler>:
 8001500:	e7fe      	b.n	8001500 <ADC1_2_IRQHandler>

08001502 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 f95b 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001512:	2000      	movs	r0, #0
 8001514:	f000 f80e 	bl	8001534 <HAL_InitTick>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	71fb      	strb	r3, [r7, #7]
 8001522:	e001      	b.n	8001528 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001524:	f7ff fcde 	bl	8000ee4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001528:	79fb      	ldrb	r3, [r7, #7]

}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <HAL_InitTick+0x68>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d022      	beq.n	800158e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_InitTick+0x6c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_InitTick+0x68>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001554:	fbb1 f3f3 	udiv	r3, r1, r3
 8001558:	fbb2 f3f3 	udiv	r3, r2, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f966 	bl	800182e <HAL_SYSTICK_Config>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10f      	bne.n	8001588 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b0f      	cmp	r3, #15
 800156c:	d809      	bhi.n	8001582 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156e:	2200      	movs	r2, #0
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	f04f 30ff 	mov.w	r0, #4294967295
 8001576:	f000 f932 	bl	80017de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_InitTick+0x70>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	e007      	b.n	8001592 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e004      	b.n	8001592 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e001      	b.n	8001592 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2000000c 	.word	0x2000000c
 80015a0:	20000004 	.word	0x20000004
 80015a4:	20000008 	.word	0x20000008

080015a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_IncTick+0x1c>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_IncTick+0x20>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <HAL_IncTick+0x1c>)
 80015b8:	6013      	str	r3, [r2, #0]
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	200002fc 	.word	0x200002fc
 80015c8:	2000000c 	.word	0x2000000c

080015cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return uwTick;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <HAL_GetTick+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	200002fc 	.word	0x200002fc

080015e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff ffee 	bl	80015cc <HAL_GetTick>
 80015f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fc:	d004      	beq.n	8001608 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_Delay+0x40>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4413      	add	r3, r2
 8001606:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001608:	bf00      	nop
 800160a:	f7ff ffdf 	bl	80015cc <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	429a      	cmp	r2, r3
 8001618:	d8f7      	bhi.n	800160a <HAL_Delay+0x26>
  {
  }
}
 800161a:	bf00      	nop
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2000000c 	.word	0x2000000c

08001628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001644:	4013      	ands	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	60d3      	str	r3, [r2, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <__NVIC_GetPriorityGrouping+0x18>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0307 	and.w	r3, r3, #7
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	2b00      	cmp	r3, #0
 800169c:	db0b      	blt.n	80016b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f003 021f 	and.w	r2, r3, #31
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <__NVIC_EnableIRQ+0x38>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2001      	movs	r0, #1
 80016ae:	fa00 f202 	lsl.w	r2, r0, r2
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f7ff ff8e 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff29 	bl	8001628 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff40 	bl	8001670 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff90 	bl	800171c <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5f 	bl	80016c8 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff33 	bl	800168c <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa4 	bl	8001784 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e08d      	b.n	8001976 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_DMA_Init+0x138>)
 8001862:	429a      	cmp	r2, r3
 8001864:	d80f      	bhi.n	8001886 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4b45      	ldr	r3, [pc, #276]	; (8001984 <HAL_DMA_Init+0x13c>)
 800186e:	4413      	add	r3, r2
 8001870:	4a45      	ldr	r2, [pc, #276]	; (8001988 <HAL_DMA_Init+0x140>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	009a      	lsls	r2, r3, #2
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a42      	ldr	r2, [pc, #264]	; (800198c <HAL_DMA_Init+0x144>)
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
 8001884:	e00e      	b.n	80018a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	4b40      	ldr	r3, [pc, #256]	; (8001990 <HAL_DMA_Init+0x148>)
 800188e:	4413      	add	r3, r2
 8001890:	4a3d      	ldr	r2, [pc, #244]	; (8001988 <HAL_DMA_Init+0x140>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	009a      	lsls	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a3c      	ldr	r2, [pc, #240]	; (8001994 <HAL_DMA_Init+0x14c>)
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f972 	bl	8001be0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001904:	d102      	bne.n	800190c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001920:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d010      	beq.n	800194c <HAL_DMA_Init+0x104>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b04      	cmp	r3, #4
 8001930:	d80c      	bhi.n	800194c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f992 	bl	8001c5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	e008      	b.n	800195e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40020407 	.word	0x40020407
 8001984:	bffdfff8 	.word	0xbffdfff8
 8001988:	cccccccd 	.word	0xcccccccd
 800198c:	40020000 	.word	0x40020000
 8001990:	bffdfbf8 	.word	0xbffdfbf8
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d00d      	beq.n	80019cc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2204      	movs	r2, #4
 80019b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
 80019ca:	e047      	b.n	8001a5c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 020e 	bic.w	r2, r2, #14
 80019da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00c      	beq.n	8001a3c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	4798      	blx	r3
    }
  }
  return status;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	2204      	movs	r2, #4
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d026      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x7a>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d021      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d107      	bne.n	8001aba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0204 	bic.w	r2, r2, #4
 8001ab8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f003 021f 	and.w	r2, r3, #31
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8001acc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d071      	beq.n	8001bba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ade:	e06c      	b.n	8001bba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	2202      	movs	r2, #2
 8001aea:	409a      	lsls	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d02e      	beq.n	8001b52 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d029      	beq.n	8001b52 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10b      	bne.n	8001b24 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 020a 	bic.w	r2, r2, #10
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	2102      	movs	r1, #2
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d038      	beq.n	8001bba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b50:	e033      	b.n	8001bba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d02a      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d025      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 020e 	bic.w	r2, r2, #14
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
}
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bd2:	b2db      	uxtb	r3, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d802      	bhi.n	8001bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e001      	b.n	8001bfe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bfc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	3b08      	subs	r3, #8
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	009a      	lsls	r2, r3, #2
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	461a      	mov	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	2201      	movs	r2, #1
 8001c34:	409a      	lsls	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40020407 	.word	0x40020407
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020820 	.word	0x40020820
 8001c54:	cccccccd 	.word	0xcccccccd
 8001c58:	40020880 	.word	0x40020880

08001c5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c7e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	2201      	movs	r2, #1
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	1000823f 	.word	0x1000823f
 8001ca0:	40020940 	.word	0x40020940

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cb2:	e15a      	b.n	8001f6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 814c 	beq.w	8001f64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d005      	beq.n	8001ce4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d130      	bne.n	8001d46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f003 0201 	and.w	r2, r3, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d017      	beq.n	8001d82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d123      	bne.n	8001dd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	6939      	ldr	r1, [r7, #16]
 8001dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0203 	and.w	r2, r3, #3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80a6 	beq.w	8001f64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e18:	4b5b      	ldr	r3, [pc, #364]	; (8001f88 <HAL_GPIO_Init+0x2e4>)
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	4a5a      	ldr	r2, [pc, #360]	; (8001f88 <HAL_GPIO_Init+0x2e4>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6613      	str	r3, [r2, #96]	; 0x60
 8001e24:	4b58      	ldr	r3, [pc, #352]	; (8001f88 <HAL_GPIO_Init+0x2e4>)
 8001e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e30:	4a56      	ldr	r2, [pc, #344]	; (8001f8c <HAL_GPIO_Init+0x2e8>)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	220f      	movs	r2, #15
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e5a:	d01f      	beq.n	8001e9c <HAL_GPIO_Init+0x1f8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d019      	beq.n	8001e98 <HAL_GPIO_Init+0x1f4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a4b      	ldr	r2, [pc, #300]	; (8001f94 <HAL_GPIO_Init+0x2f0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d013      	beq.n	8001e94 <HAL_GPIO_Init+0x1f0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <HAL_GPIO_Init+0x2f4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00d      	beq.n	8001e90 <HAL_GPIO_Init+0x1ec>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a49      	ldr	r2, [pc, #292]	; (8001f9c <HAL_GPIO_Init+0x2f8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d007      	beq.n	8001e8c <HAL_GPIO_Init+0x1e8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a48      	ldr	r2, [pc, #288]	; (8001fa0 <HAL_GPIO_Init+0x2fc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d101      	bne.n	8001e88 <HAL_GPIO_Init+0x1e4>
 8001e84:	2305      	movs	r3, #5
 8001e86:	e00a      	b.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e88:	2306      	movs	r3, #6
 8001e8a:	e008      	b.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	e006      	b.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e90:	2303      	movs	r3, #3
 8001e92:	e004      	b.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e002      	b.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	f002 0203 	and.w	r2, r2, #3
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	4093      	lsls	r3, r2
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eae:	4937      	ldr	r1, [pc, #220]	; (8001f8c <HAL_GPIO_Init+0x2e8>)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ebc:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <HAL_GPIO_Init+0x300>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ee0:	4a30      	ldr	r2, [pc, #192]	; (8001fa4 <HAL_GPIO_Init+0x300>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <HAL_GPIO_Init+0x300>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f0a:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <HAL_GPIO_Init+0x300>)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_GPIO_Init+0x300>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f34:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <HAL_GPIO_Init+0x300>)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_GPIO_Init+0x300>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f5e:	4a11      	ldr	r2, [pc, #68]	; (8001fa4 <HAL_GPIO_Init+0x300>)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3301      	adds	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f47f ae9d 	bne.w	8001cb4 <HAL_GPIO_Init+0x10>
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	48000400 	.word	0x48000400
 8001f94:	48000800 	.word	0x48000800
 8001f98:	48000c00 	.word	0x48000c00
 8001f9c:	48001000 	.word	0x48001000
 8001fa0:	48001400 	.word	0x48001400
 8001fa4:	40010400 	.word	0x40010400

08001fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	887b      	ldrh	r3, [r7, #2]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	e001      	b.n	8001fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ff4:	e002      	b.n	8001ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d006      	beq.n	800202c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f806 	bl	8002038 <HAL_GPIO_EXTI_Callback>
  }
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40010400 	.word	0x40010400

08002038 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e08d      	b.n	800217c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7fe ff59 	bl	8000f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2224      	movs	r2, #36	; 0x24
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800209e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d107      	bne.n	80020c8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	e006      	b.n	80020d6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d108      	bne.n	80020f0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	e007      	b.n	8002100 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800210e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002112:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002122:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69d9      	ldr	r1, [r3, #28]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1a      	ldr	r2, [r3, #32]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	461a      	mov	r2, r3
 8002192:	4603      	mov	r3, r0
 8002194:	817b      	strh	r3, [r7, #10]
 8002196:	460b      	mov	r3, r1
 8002198:	813b      	strh	r3, [r7, #8]
 800219a:	4613      	mov	r3, r2
 800219c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d16a      	bne.n	8002280 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_I2C_Mem_Write_IT+0x32>
 80021b0:	8bbb      	ldrh	r3, [r7, #28]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e05f      	b.n	8002282 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d0:	d101      	bne.n	80021d6 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	e055      	b.n	8002282 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_I2C_Mem_Write_IT+0x60>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e04e      	b.n	8002282 <HAL_I2C_Mem_Write_IT+0xfe>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2221      	movs	r2, #33	; 0x21
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2240      	movs	r2, #64	; 0x40
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8bba      	ldrh	r2, [r7, #28]
 8002212:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4a1d      	ldr	r2, [pc, #116]	; (800228c <HAL_I2C_Mem_Write_IT+0x108>)
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <HAL_I2C_Mem_Write_IT+0x10c>)
 800221e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002220:	897a      	ldrh	r2, [r7, #10]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d109      	bne.n	8002240 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800222c:	893b      	ldrh	r3, [r7, #8]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	651a      	str	r2, [r3, #80]	; 0x50
 800223e:	e00b      	b.n	8002258 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002240:	893b      	ldrh	r3, [r7, #8]
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	b29b      	uxth	r3, r3
 8002246:	b2da      	uxtb	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800224e:	893b      	ldrh	r3, [r7, #8]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	b2da      	uxtb	r2, r3
 800225c:	8979      	ldrh	r1, [r7, #10]
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_I2C_Mem_Write_IT+0x110>)
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f001 fb78 	bl	800395c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002274:	2101      	movs	r1, #1
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f001 fba2 	bl	80039c0 <I2C_Enable_IRQ>

    return HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	e000      	b.n	8002282 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002280:	2302      	movs	r3, #2
  }
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	ffff0000 	.word	0xffff0000
 8002290:	08002561 	.word	0x08002561
 8002294:	80002000 	.word	0x80002000

08002298 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	4608      	mov	r0, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	817b      	strh	r3, [r7, #10]
 80022aa:	460b      	mov	r3, r1
 80022ac:	813b      	strh	r3, [r7, #8]
 80022ae:	4613      	mov	r3, r2
 80022b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d166      	bne.n	800238c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_I2C_Mem_Read_IT+0x32>
 80022c4:	8bbb      	ldrh	r3, [r7, #28]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d105      	bne.n	80022d6 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e05b      	b.n	800238e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e4:	d101      	bne.n	80022ea <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 80022e6:	2302      	movs	r3, #2
 80022e8:	e051      	b.n	800238e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_I2C_Mem_Read_IT+0x60>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e04a      	b.n	800238e <HAL_I2C_Mem_Read_IT+0xf6>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2222      	movs	r2, #34	; 0x22
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8bba      	ldrh	r2, [r7, #28]
 8002320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <HAL_I2C_Mem_Read_IT+0x100>)
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a1c      	ldr	r2, [pc, #112]	; (800239c <HAL_I2C_Mem_Read_IT+0x104>)
 800232c:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 800232e:	897a      	ldrh	r2, [r7, #10]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d109      	bne.n	800234e <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800233a:	893b      	ldrh	r3, [r7, #8]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f04f 32ff 	mov.w	r2, #4294967295
 800234a:	651a      	str	r2, [r3, #80]	; 0x50
 800234c:	e00b      	b.n	8002366 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800234e:	893b      	ldrh	r3, [r7, #8]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	b29b      	uxth	r3, r3
 8002354:	b2da      	uxtb	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800235c:	893b      	ldrh	r3, [r7, #8]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	8979      	ldrh	r1, [r7, #10]
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <HAL_I2C_Mem_Read_IT+0x108>)
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2300      	movs	r3, #0
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f001 faf2 	bl	800395c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002380:	2101      	movs	r1, #1
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f001 fb1c 	bl	80039c0 <I2C_Enable_IRQ>

    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
  }
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	ffff0000 	.word	0xffff0000
 800239c:	08002561 	.word	0x08002561
 80023a0:	80002000 	.word	0x80002000

080023a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	68f9      	ldr	r1, [r7, #12]
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
  }
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00f      	beq.n	800241a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002418:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00f      	beq.n	8002444 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f043 0208 	orr.w	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002442:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00f      	beq.n	800246e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f043 0202 	orr.w	r2, r3, #2
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 030b 	and.w	r3, r3, #11
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800247e:	68f9      	ldr	r1, [r7, #12]
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f001 f911 	bl	80036a8 <I2C_ITError>
  }
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	70fb      	strb	r3, [r7, #3]
 80024ea:	4613      	mov	r3, r2
 80024ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800256c:	4b8d      	ldr	r3, [pc, #564]	; (80027a4 <I2C_Mem_ISR_IT+0x244>)
 800256e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <I2C_Mem_ISR_IT+0x22>
 800257e:	2302      	movs	r3, #2
 8002580:	e10c      	b.n	800279c <I2C_Mem_ISR_IT+0x23c>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	d012      	beq.n	80025ba <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00d      	beq.n	80025ba <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2210      	movs	r2, #16
 80025a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f043 0204 	orr.w	r2, r3, #4
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f001 f98f 	bl	80038d6 <I2C_Flush_TXDR>
 80025b8:	e0dd      	b.n	8002776 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d022      	beq.n	800260a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01d      	beq.n	800260a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f023 0304 	bic.w	r3, r3, #4
 80025d4:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002608:	e0b5      	b.n	8002776 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02c      	beq.n	800266e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800261a:	2b00      	cmp	r3, #0
 800261c:	d027      	beq.n	800266e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002626:	d118      	bne.n	800265a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	781a      	ldrb	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002658:	e08d      	b.n	8002776 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002662:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f04f 32ff 	mov.w	r2, #4294967295
 800266a:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800266c:	e083      	b.n	8002776 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d03c      	beq.n	80026f2 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800267e:	2b00      	cmp	r3, #0
 8002680:	d037      	beq.n	80026f2 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d02c      	beq.n	80026e6 <I2C_Mem_ISR_IT+0x186>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	d128      	bne.n	80026e6 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	2bff      	cmp	r3, #255	; 0xff
 800269c:	d910      	bls.n	80026c0 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	22ff      	movs	r2, #255	; 0xff
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a8:	b299      	uxth	r1, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	2300      	movs	r3, #0
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f001 f94f 	bl	800395c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026be:	e017      	b.n	80026f0 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	b299      	uxth	r1, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	2300      	movs	r3, #0
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f001 f93c 	bl	800395c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e4:	e004      	b.n	80026f0 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80026e6:	2140      	movs	r1, #64	; 0x40
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 ffdd 	bl	80036a8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ee:	e042      	b.n	8002776 <I2C_Mem_ISR_IT+0x216>
 80026f0:	e041      	b.n	8002776 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d03c      	beq.n	8002776 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002702:	2b00      	cmp	r3, #0
 8002704:	d037      	beq.n	8002776 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002706:	2101      	movs	r1, #1
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f001 f9dd 	bl	8003ac8 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800270e:	2102      	movs	r1, #2
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f001 f955 	bl	80039c0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b22      	cmp	r3, #34	; 0x22
 8002720:	d101      	bne.n	8002726 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002722:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <I2C_Mem_ISR_IT+0x248>)
 8002724:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	2bff      	cmp	r3, #255	; 0xff
 800272e:	d910      	bls.n	8002752 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	22ff      	movs	r2, #255	; 0xff
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	b299      	uxth	r1, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	b2da      	uxtb	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f001 f906 	bl	800395c <I2C_TransferConfig>
 8002750:	e011      	b.n	8002776 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002760:	b299      	uxth	r1, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	b2da      	uxtb	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f001 f8f3 	bl	800395c <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800278a:	6939      	ldr	r1, [r7, #16]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fd0b 	bl	80031a8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	80002000 	.word	0x80002000
 80027a8:	80002400 	.word	0x80002400

080027ac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <I2C_Slave_ISR_IT+0x24>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0e2      	b.n	8002996 <I2C_Slave_ISR_IT+0x1ea>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80027ec:	6939      	ldr	r1, [r7, #16]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fda2 	bl	8003338 <I2C_ITSlaveCplt>
 80027f4:	e0ca      	b.n	800298c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d04b      	beq.n	8002898 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002806:	2b00      	cmp	r3, #0
 8002808:	d046      	beq.n	8002898 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d128      	bne.n	8002866 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b28      	cmp	r3, #40	; 0x28
 800281e:	d108      	bne.n	8002832 <I2C_Slave_ISR_IT+0x86>
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002826:	d104      	bne.n	8002832 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002828:	6939      	ldr	r1, [r7, #16]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fee8 	bl	8003600 <I2C_ITListenCplt>
 8002830:	e031      	b.n	8002896 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b29      	cmp	r3, #41	; 0x29
 800283c:	d10e      	bne.n	800285c <I2C_Slave_ISR_IT+0xb0>
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002844:	d00a      	beq.n	800285c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2210      	movs	r2, #16
 800284c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f001 f841 	bl	80038d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fc4b 	bl	80030f0 <I2C_ITSlaveSeqCplt>
 800285a:	e01c      	b.n	8002896 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2210      	movs	r2, #16
 8002862:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002864:	e08f      	b.n	8002986 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2210      	movs	r2, #16
 800286c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f043 0204 	orr.w	r2, r3, #4
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <I2C_Slave_ISR_IT+0xdc>
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002886:	d17e      	bne.n	8002986 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	4619      	mov	r1, r3
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 ff0a 	bl	80036a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002894:	e077      	b.n	8002986 <I2C_Slave_ISR_IT+0x1da>
 8002896:	e076      	b.n	8002986 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d02f      	beq.n	8002902 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d02a      	beq.n	8002902 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d018      	beq.n	80028e8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d14b      	bne.n	800298a <I2C_Slave_ISR_IT+0x1de>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028f8:	d047      	beq.n	800298a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fbf8 	bl	80030f0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002900:	e043      	b.n	800298a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d009      	beq.n	8002920 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002912:	2b00      	cmp	r3, #0
 8002914:	d004      	beq.n	8002920 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002916:	6939      	ldr	r1, [r7, #16]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fb28 	bl	8002f6e <I2C_ITAddrCplt>
 800291e:	e035      	b.n	800298c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d030      	beq.n	800298c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002930:	2b00      	cmp	r3, #0
 8002932:	d02b      	beq.n	800298c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d018      	beq.n	8002970 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
 800296e:	e00d      	b.n	800298c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002976:	d002      	beq.n	800297e <I2C_Slave_ISR_IT+0x1d2>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fbb6 	bl	80030f0 <I2C_ITSlaveSeqCplt>
 8002984:	e002      	b.n	800298c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002986:	bf00      	nop
 8002988:	e000      	b.n	800298c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800298a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b088      	sub	sp, #32
 80029a2:	af02      	add	r7, sp, #8
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <I2C_Master_ISR_DMA+0x1a>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e0d9      	b.n	8002b6c <I2C_Master_ISR_DMA+0x1ce>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d016      	beq.n	80029f8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d011      	beq.n	80029f8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2210      	movs	r2, #16
 80029da:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f043 0204 	orr.w	r2, r3, #4
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80029e8:	2120      	movs	r1, #32
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 ffe8 	bl	80039c0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 ff70 	bl	80038d6 <I2C_Flush_TXDR>
 80029f6:	e0b4      	b.n	8002b62 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d071      	beq.n	8002ae6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d06c      	beq.n	8002ae6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d04e      	beq.n	8002ac4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a32:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2bff      	cmp	r3, #255	; 0xff
 8002a3c:	d906      	bls.n	8002a4c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	22ff      	movs	r2, #255	; 0xff
 8002a42:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e010      	b.n	8002a6e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a5e:	d003      	beq.n	8002a68 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	e002      	b.n	8002a6e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002a68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a6c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	8a79      	ldrh	r1, [r7, #18]
 8002a76:	2300      	movs	r3, #0
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 ff6d 	bl	800395c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b22      	cmp	r3, #34	; 0x22
 8002a9e:	d108      	bne.n	8002ab2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ab0:	e057      	b.n	8002b62 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ac2:	e04e      	b.n	8002b62 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ad2:	d003      	beq.n	8002adc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 face 	bl	8003076 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002ada:	e042      	b.n	8002b62 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002adc:	2140      	movs	r1, #64	; 0x40
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fde2 	bl	80036a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002ae4:	e03d      	b.n	8002b62 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d028      	beq.n	8002b42 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d023      	beq.n	8002b42 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d119      	bne.n	8002b38 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b12:	d025      	beq.n	8002b60 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b1c:	d108      	bne.n	8002b30 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002b2e:	e017      	b.n	8002b60 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 faa0 	bl	8003076 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002b36:	e013      	b.n	8002b60 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b38:	2140      	movs	r1, #64	; 0x40
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fdb4 	bl	80036a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002b40:	e00e      	b.n	8002b60 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fb25 	bl	80031a8 <I2C_ITMasterCplt>
 8002b5e:	e000      	b.n	8002b62 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002b60:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002b80:	4b8d      	ldr	r3, [pc, #564]	; (8002db8 <I2C_Mem_ISR_DMA+0x244>)
 8002b82:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <I2C_Mem_ISR_DMA+0x1e>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e10e      	b.n	8002db0 <I2C_Mem_ISR_DMA+0x23c>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d016      	beq.n	8002bd2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d011      	beq.n	8002bd2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f043 0204 	orr.w	r2, r3, #4
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002bc2:	2120      	movs	r1, #32
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fefb 	bl	80039c0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fe83 	bl	80038d6 <I2C_Flush_TXDR>
 8002bd0:	e0e9      	b.n	8002da6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00e      	beq.n	8002bfa <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d009      	beq.n	8002bfa <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf6:	651a      	str	r2, [r3, #80]	; 0x50
 8002bf8:	e0d5      	b.n	8002da6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d05f      	beq.n	8002cc4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d05a      	beq.n	8002cc4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c0e:	2101      	movs	r1, #1
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 ff59 	bl	8003ac8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002c16:	2110      	movs	r1, #16
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fed1 	bl	80039c0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d048      	beq.n	8002cba <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2bff      	cmp	r3, #255	; 0xff
 8002c30:	d910      	bls.n	8002c54 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	22ff      	movs	r2, #255	; 0xff
 8002c36:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3c:	b299      	uxth	r1, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	2300      	movs	r3, #0
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fe85 	bl	800395c <I2C_TransferConfig>
 8002c52:	e011      	b.n	8002c78 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	b299      	uxth	r1, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fe72 	bl	800395c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b22      	cmp	r3, #34	; 0x22
 8002c94:	d108      	bne.n	8002ca8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ca4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ca6:	e07e      	b.n	8002da6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cb6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002cb8:	e075      	b.n	8002da6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002cba:	2140      	movs	r1, #64	; 0x40
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fcf3 	bl	80036a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002cc2:	e070      	b.n	8002da6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d05d      	beq.n	8002d8a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d058      	beq.n	8002d8a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cd8:	2101      	movs	r1, #1
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fef4 	bl	8003ac8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002ce0:	2110      	movs	r1, #16
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fe6c 	bl	80039c0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b22      	cmp	r3, #34	; 0x22
 8002cf2:	d101      	bne.n	8002cf8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002cf4:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <I2C_Mem_ISR_DMA+0x248>)
 8002cf6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2bff      	cmp	r3, #255	; 0xff
 8002d00:	d910      	bls.n	8002d24 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	22ff      	movs	r2, #255	; 0xff
 8002d06:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0c:	b299      	uxth	r1, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fe1d 	bl	800395c <I2C_TransferConfig>
 8002d22:	e011      	b.n	8002d48 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	b299      	uxth	r1, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fe0a 	bl	800395c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b22      	cmp	r3, #34	; 0x22
 8002d64:	d108      	bne.n	8002d78 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d74:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d76:	e016      	b.n	8002da6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d86:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d88:	e00d      	b.n	8002da6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fa01 	bl	80031a8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	80002000 	.word	0x80002000
 8002dbc:	80002400 	.word	0x80002400

08002dc0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <I2C_Slave_ISR_DMA+0x24>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e0c0      	b.n	8002f66 <I2C_Slave_ISR_DMA+0x1a6>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fa98 	bl	8003338 <I2C_ITSlaveCplt>
 8002e08:	e0a8      	b.n	8002f5c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8095 	beq.w	8002f40 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 808f 	beq.w	8002f40 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d104      	bne.n	8002e36 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d07d      	beq.n	8002f32 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002e54:	2301      	movs	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00c      	beq.n	8002e7a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002e76:	2301      	movs	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d128      	bne.n	8002ed2 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b28      	cmp	r3, #40	; 0x28
 8002e8a:	d108      	bne.n	8002e9e <I2C_Slave_ISR_DMA+0xde>
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e92:	d104      	bne.n	8002e9e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fbb2 	bl	8003600 <I2C_ITListenCplt>
 8002e9c:	e048      	b.n	8002f30 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b29      	cmp	r3, #41	; 0x29
 8002ea8:	d10e      	bne.n	8002ec8 <I2C_Slave_ISR_DMA+0x108>
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eb0:	d00a      	beq.n	8002ec8 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fd0b 	bl	80038d6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f915 	bl	80030f0 <I2C_ITSlaveSeqCplt>
 8002ec6:	e033      	b.n	8002f30 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002ed0:	e034      	b.n	8002f3c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f043 0204 	orr.w	r2, r3, #4
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eec:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <I2C_Slave_ISR_DMA+0x13c>
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002efa:	d11f      	bne.n	8002f3c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	2b21      	cmp	r3, #33	; 0x21
 8002f00:	d002      	beq.n	8002f08 <I2C_Slave_ISR_DMA+0x148>
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	2b29      	cmp	r3, #41	; 0x29
 8002f06:	d103      	bne.n	8002f10 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2221      	movs	r2, #33	; 0x21
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f0e:	e008      	b.n	8002f22 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
 8002f12:	2b22      	cmp	r3, #34	; 0x22
 8002f14:	d002      	beq.n	8002f1c <I2C_Slave_ISR_DMA+0x15c>
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	2b2a      	cmp	r3, #42	; 0x2a
 8002f1a:	d102      	bne.n	8002f22 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2222      	movs	r2, #34	; 0x22
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	4619      	mov	r1, r3
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fbbd 	bl	80036a8 <I2C_ITError>
      if (treatdmanack == 1U)
 8002f2e:	e005      	b.n	8002f3c <I2C_Slave_ISR_DMA+0x17c>
 8002f30:	e004      	b.n	8002f3c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2210      	movs	r2, #16
 8002f38:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f3a:	e00f      	b.n	8002f5c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002f3c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f3e:	e00d      	b.n	8002f5c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f809 	bl	8002f6e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f84:	2b28      	cmp	r3, #40	; 0x28
 8002f86:	d16a      	bne.n	800305e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	0c1b      	lsrs	r3, r3, #16
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	0c1b      	lsrs	r3, r3, #16
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002fa6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002fc2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d138      	bne.n	800303e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002fcc:	897b      	ldrh	r3, [r7, #10]
 8002fce:	09db      	lsrs	r3, r3, #7
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	89bb      	ldrh	r3, [r7, #12]
 8002fd4:	4053      	eors	r3, r2
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f003 0306 	and.w	r3, r3, #6
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d11c      	bne.n	800301a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002fe0:	897b      	ldrh	r3, [r7, #10]
 8002fe2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d13b      	bne.n	800306e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2208      	movs	r2, #8
 8003002:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800300c:	89ba      	ldrh	r2, [r7, #12]
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	4619      	mov	r1, r3
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fa63 	bl	80024de <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003018:	e029      	b.n	800306e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800301a:	893b      	ldrh	r3, [r7, #8]
 800301c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800301e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fd50 	bl	8003ac8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003030:	89ba      	ldrh	r2, [r7, #12]
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	4619      	mov	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fa51 	bl	80024de <HAL_I2C_AddrCallback>
}
 800303c:	e017      	b.n	800306e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800303e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fd40 	bl	8003ac8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003050:	89ba      	ldrh	r2, [r7, #12]
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fa41 	bl	80024de <HAL_I2C_AddrCallback>
}
 800305c:	e007      	b.n	800306e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2208      	movs	r2, #8
 8003064:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b21      	cmp	r3, #33	; 0x21
 8003090:	d115      	bne.n	80030be <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2211      	movs	r2, #17
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030a6:	2101      	movs	r1, #1
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fd0d 	bl	8003ac8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff f9e9 	bl	800248e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030bc:	e014      	b.n	80030e8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2212      	movs	r2, #18
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80030d2:	2102      	movs	r1, #2
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fcf7 	bl	8003ac8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff f9dd 	bl	80024a2 <HAL_I2C_MasterRxCpltCallback>
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e00c      	b.n	800313e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800313c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b29      	cmp	r3, #41	; 0x29
 8003148:	d112      	bne.n	8003170 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2228      	movs	r2, #40	; 0x28
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2221      	movs	r2, #33	; 0x21
 8003156:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003158:	2101      	movs	r1, #1
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fcb4 	bl	8003ac8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff f9a4 	bl	80024b6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800316e:	e017      	b.n	80031a0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b2a      	cmp	r3, #42	; 0x2a
 800317a:	d111      	bne.n	80031a0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2228      	movs	r2, #40	; 0x28
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2222      	movs	r2, #34	; 0x22
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800318a:	2102      	movs	r1, #2
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fc9b 	bl	8003ac8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff f995 	bl	80024ca <HAL_I2C_SlaveRxCpltCallback>
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2220      	movs	r2, #32
 80031bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b21      	cmp	r3, #33	; 0x21
 80031c8:	d107      	bne.n	80031da <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80031ca:	2101      	movs	r1, #1
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fc7b 	bl	8003ac8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2211      	movs	r2, #17
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
 80031d8:	e00c      	b.n	80031f4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b22      	cmp	r3, #34	; 0x22
 80031e4:	d106      	bne.n	80031f4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80031e6:	2102      	movs	r1, #2
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fc6d 	bl	8003ac8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2212      	movs	r2, #18
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <I2C_ITMasterCplt+0x188>)
 8003200:	400b      	ands	r3, r1
 8003202:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a49      	ldr	r2, [pc, #292]	; (8003334 <I2C_ITMasterCplt+0x18c>)
 800320e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2210      	movs	r2, #16
 8003220:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f043 0204 	orr.w	r2, r3, #4
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b60      	cmp	r3, #96	; 0x60
 8003238:	d10a      	bne.n	8003250 <I2C_ITMasterCplt+0xa8>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	b2db      	uxtb	r3, r3
 800324c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800324e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fb40 	bl	80038d6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b60      	cmp	r3, #96	; 0x60
 8003266:	d002      	beq.n	800326e <I2C_ITMasterCplt+0xc6>
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4619      	mov	r1, r3
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fa17 	bl	80036a8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800327a:	e054      	b.n	8003326 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b21      	cmp	r3, #33	; 0x21
 8003286:	d124      	bne.n	80032d2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d10b      	bne.n	80032ba <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff f92b 	bl	800250e <HAL_I2C_MemTxCpltCallback>
}
 80032b8:	e035      	b.n	8003326 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff f8df 	bl	800248e <HAL_I2C_MasterTxCpltCallback>
}
 80032d0:	e029      	b.n	8003326 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b22      	cmp	r3, #34	; 0x22
 80032dc:	d123      	bne.n	8003326 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d10b      	bne.n	8003310 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff f90a 	bl	8002522 <HAL_I2C_MemRxCpltCallback>
}
 800330e:	e00a      	b.n	8003326 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff f8be 	bl	80024a2 <HAL_I2C_MasterRxCpltCallback>
}
 8003326:	bf00      	nop
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	fe00e800 	.word	0xfe00e800
 8003334:	ffff0000 	.word	0xffff0000

08003338 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800335a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2220      	movs	r2, #32
 8003362:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003364:	7afb      	ldrb	r3, [r7, #11]
 8003366:	2b21      	cmp	r3, #33	; 0x21
 8003368:	d002      	beq.n	8003370 <I2C_ITSlaveCplt+0x38>
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	2b29      	cmp	r3, #41	; 0x29
 800336e:	d108      	bne.n	8003382 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003370:	f248 0101 	movw	r1, #32769	; 0x8001
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fba7 	bl	8003ac8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2221      	movs	r2, #33	; 0x21
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
 8003380:	e019      	b.n	80033b6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003382:	7afb      	ldrb	r3, [r7, #11]
 8003384:	2b22      	cmp	r3, #34	; 0x22
 8003386:	d002      	beq.n	800338e <I2C_ITSlaveCplt+0x56>
 8003388:	7afb      	ldrb	r3, [r7, #11]
 800338a:	2b2a      	cmp	r3, #42	; 0x2a
 800338c:	d108      	bne.n	80033a0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800338e:	f248 0102 	movw	r1, #32770	; 0x8002
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fb98 	bl	8003ac8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2222      	movs	r2, #34	; 0x22
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
 800339e:	e00a      	b.n	80033b6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80033a0:	7afb      	ldrb	r3, [r7, #11]
 80033a2:	2b28      	cmp	r3, #40	; 0x28
 80033a4:	d107      	bne.n	80033b6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80033a6:	f248 0103 	movw	r1, #32771	; 0x8003
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fb8c 	bl	8003ac8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b89      	ldr	r3, [pc, #548]	; (80035f8 <I2C_ITSlaveCplt+0x2c0>)
 80033d2:	400b      	ands	r3, r1
 80033d4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa7d 	bl	80038d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d013      	beq.n	800340e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033f4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01f      	beq.n	800343e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	b29a      	uxth	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800340c:	e017      	b.n	800343e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d012      	beq.n	800343e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003426:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d006      	beq.n	800343e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d020      	beq.n	800348a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0304 	bic.w	r3, r3, #4
 800344e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00c      	beq.n	800348a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	f043 0204 	orr.w	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d049      	beq.n	800353e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d044      	beq.n	800353e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d128      	bne.n	8003510 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b28      	cmp	r3, #40	; 0x28
 80034c8:	d108      	bne.n	80034dc <I2C_ITSlaveCplt+0x1a4>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034d0:	d104      	bne.n	80034dc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034d2:	6979      	ldr	r1, [r7, #20]
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f893 	bl	8003600 <I2C_ITListenCplt>
 80034da:	e030      	b.n	800353e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b29      	cmp	r3, #41	; 0x29
 80034e6:	d10e      	bne.n	8003506 <I2C_ITSlaveCplt+0x1ce>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034ee:	d00a      	beq.n	8003506 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2210      	movs	r2, #16
 80034f6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f9ec 	bl	80038d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fdf6 	bl	80030f0 <I2C_ITSlaveSeqCplt>
 8003504:	e01b      	b.n	800353e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2210      	movs	r2, #16
 800350c:	61da      	str	r2, [r3, #28]
 800350e:	e016      	b.n	800353e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2210      	movs	r2, #16
 8003516:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	f043 0204 	orr.w	r2, r3, #4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <I2C_ITSlaveCplt+0x1fa>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003530:	d105      	bne.n	800353e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f8b5 	bl	80036a8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	2b00      	cmp	r3, #0
 8003552:	d010      	beq.n	8003576 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8a4 	bl	80036a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b28      	cmp	r3, #40	; 0x28
 800356a:	d141      	bne.n	80035f0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800356c:	6979      	ldr	r1, [r7, #20]
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f846 	bl	8003600 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003574:	e03c      	b.n	80035f0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800357e:	d014      	beq.n	80035aa <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff fdb5 	bl	80030f0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1c      	ldr	r2, [pc, #112]	; (80035fc <I2C_ITSlaveCplt+0x2c4>)
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fe ffa9 	bl	80024fa <HAL_I2C_ListenCpltCallback>
}
 80035a8:	e022      	b.n	80035f0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b22      	cmp	r3, #34	; 0x22
 80035b4:	d10e      	bne.n	80035d4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7fe ff7c 	bl	80024ca <HAL_I2C_SlaveRxCpltCallback>
}
 80035d2:	e00d      	b.n	80035f0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fe ff63 	bl	80024b6 <HAL_I2C_SlaveTxCpltCallback>
}
 80035f0:	bf00      	nop
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	fe00e800 	.word	0xfe00e800
 80035fc:	ffff0000 	.word	0xffff0000

08003600 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a25      	ldr	r2, [pc, #148]	; (80036a4 <I2C_ITListenCplt+0xa4>)
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d022      	beq.n	800367c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	2b00      	cmp	r3, #0
 8003654:	d012      	beq.n	800367c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	f043 0204 	orr.w	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800367c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fa21 	bl	8003ac8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2210      	movs	r2, #16
 800368c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fe ff2f 	bl	80024fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	ffff0000 	.word	0xffff0000

080036a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a6d      	ldr	r2, [pc, #436]	; (800387c <I2C_ITError+0x1d4>)
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b28      	cmp	r3, #40	; 0x28
 80036de:	d005      	beq.n	80036ec <I2C_ITError+0x44>
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	2b29      	cmp	r3, #41	; 0x29
 80036e4:	d002      	beq.n	80036ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b2a      	cmp	r3, #42	; 0x2a
 80036ea:	d10b      	bne.n	8003704 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036ec:	2103      	movs	r1, #3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f9ea 	bl	8003ac8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2228      	movs	r2, #40	; 0x28
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a60      	ldr	r2, [pc, #384]	; (8003880 <I2C_ITError+0x1d8>)
 8003700:	635a      	str	r2, [r3, #52]	; 0x34
 8003702:	e030      	b.n	8003766 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003704:	f248 0103 	movw	r1, #32771	; 0x8003
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f9dd 	bl	8003ac8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f8e1 	bl	80038d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b60      	cmp	r3, #96	; 0x60
 800371e:	d01f      	beq.n	8003760 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b20      	cmp	r3, #32
 8003734:	d114      	bne.n	8003760 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b10      	cmp	r3, #16
 8003742:	d109      	bne.n	8003758 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2210      	movs	r2, #16
 800374a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	f043 0204 	orr.w	r2, r3, #4
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2220      	movs	r2, #32
 800375e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	2b00      	cmp	r3, #0
 8003772:	d039      	beq.n	80037e8 <I2C_ITError+0x140>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b11      	cmp	r3, #17
 8003778:	d002      	beq.n	8003780 <I2C_ITError+0xd8>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b21      	cmp	r3, #33	; 0x21
 800377e:	d133      	bne.n	80037e8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800378e:	d107      	bne.n	80037a0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800379e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe fa0d 	bl	8001bc4 <HAL_DMA_GetState>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d017      	beq.n	80037e0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	4a33      	ldr	r2, [pc, #204]	; (8003884 <I2C_ITError+0x1dc>)
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe f8e7 	bl	8001998 <HAL_DMA_Abort_IT>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d04d      	beq.n	800386c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037da:	4610      	mov	r0, r2
 80037dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037de:	e045      	b.n	800386c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f851 	bl	8003888 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037e6:	e041      	b.n	800386c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d039      	beq.n	8003864 <I2C_ITError+0x1bc>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b12      	cmp	r3, #18
 80037f4:	d002      	beq.n	80037fc <I2C_ITError+0x154>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b22      	cmp	r3, #34	; 0x22
 80037fa:	d133      	bne.n	8003864 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800380a:	d107      	bne.n	800381c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800381a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe f9cf 	bl	8001bc4 <HAL_DMA_GetState>
 8003826:	4603      	mov	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	d017      	beq.n	800385c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <I2C_ITError+0x1dc>)
 8003832:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe f8a9 	bl	8001998 <HAL_DMA_Abort_IT>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d011      	beq.n	8003870 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003856:	4610      	mov	r0, r2
 8003858:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800385a:	e009      	b.n	8003870 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f813 	bl	8003888 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003862:	e005      	b.n	8003870 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f80f 	bl	8003888 <I2C_TreatErrorCallback>
  }
}
 800386a:	e002      	b.n	8003872 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800386c:	bf00      	nop
 800386e:	e000      	b.n	8003872 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003870:	bf00      	nop
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	ffff0000 	.word	0xffff0000
 8003880:	080027ad 	.word	0x080027ad
 8003884:	0800391f 	.word	0x0800391f

08003888 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b60      	cmp	r3, #96	; 0x60
 800389a:	d10e      	bne.n	80038ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fe fe49 	bl	800254a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038b8:	e009      	b.n	80038ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fe fe34 	bl	8002536 <HAL_I2C_ErrorCallback>
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d103      	bne.n	80038f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2200      	movs	r2, #0
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d007      	beq.n	8003912 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	619a      	str	r2, [r3, #24]
  }
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	2200      	movs	r2, #0
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	2200      	movs	r2, #0
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f7ff ff9b 	bl	8003888 <I2C_TreatErrorCallback>
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	460b      	mov	r3, r1
 8003968:	817b      	strh	r3, [r7, #10]
 800396a:	4613      	mov	r3, r2
 800396c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800396e:	897b      	ldrh	r3, [r7, #10]
 8003970:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003974:	7a7b      	ldrb	r3, [r7, #9]
 8003976:	041b      	lsls	r3, r3, #16
 8003978:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800397c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	4313      	orrs	r3, r2
 8003986:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800398a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	0d5b      	lsrs	r3, r3, #21
 8003996:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <I2C_TransferConfig+0x60>)
 800399c:	430b      	orrs	r3, r1
 800399e:	43db      	mvns	r3, r3
 80039a0:	ea02 0103 	and.w	r1, r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	03ff63ff 	.word	0x03ff63ff

080039c0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	4a39      	ldr	r2, [pc, #228]	; (8003abc <I2C_Enable_IRQ+0xfc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d032      	beq.n	8003a40 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80039de:	4a38      	ldr	r2, [pc, #224]	; (8003ac0 <I2C_Enable_IRQ+0x100>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d02d      	beq.n	8003a40 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80039e8:	4a36      	ldr	r2, [pc, #216]	; (8003ac4 <I2C_Enable_IRQ+0x104>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d028      	beq.n	8003a40 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	da03      	bge.n	80039fe <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80039fc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039fe:	887b      	ldrh	r3, [r7, #2]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003a0e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a10:	887b      	ldrh	r3, [r7, #2]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003a20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d103      	bne.n	8003a30 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a30:	887b      	ldrh	r3, [r7, #2]
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d133      	bne.n	8003a9e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f043 0320 	orr.w	r3, r3, #32
 8003a3c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a3e:	e02e      	b.n	8003a9e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	da03      	bge.n	8003a50 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a50:	887b      	ldrh	r3, [r7, #2]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003a60:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a62:	887b      	ldrh	r3, [r7, #2]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003a72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a74:	887b      	ldrh	r3, [r7, #2]
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d103      	bne.n	8003a82 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d103      	bne.n	8003a90 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a90:	887b      	ldrh	r3, [r7, #2]
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d103      	bne.n	8003a9e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6819      	ldr	r1, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	0800299f 	.word	0x0800299f
 8003ac0:	08002dc1 	.word	0x08002dc1
 8003ac4:	08002b75 	.word	0x08002b75

08003ac8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00f      	beq.n	8003b02 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003ae8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003af6:	2b28      	cmp	r3, #40	; 0x28
 8003af8:	d003      	beq.n	8003b02 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b00:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b02:	887b      	ldrh	r3, [r7, #2]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00f      	beq.n	8003b2c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003b12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b20:	2b28      	cmp	r3, #40	; 0x28
 8003b22:	d003      	beq.n	8003b2c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b2a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	da03      	bge.n	8003b3c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	2b10      	cmp	r3, #16
 8003b40:	d103      	bne.n	8003b4a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b48:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b4a:	887b      	ldrh	r3, [r7, #2]
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d103      	bne.n	8003b58 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f043 0320 	orr.w	r3, r3, #32
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b58:	887b      	ldrh	r3, [r7, #2]
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d103      	bne.n	8003b66 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b64:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	400a      	ands	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d138      	bne.n	8003c0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e032      	b.n	8003c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	; 0x24
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0201 	bic.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d139      	bne.n	8003ca4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e033      	b.n	8003ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2224      	movs	r2, #36	; 0x24
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d141      	bne.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cc2:	4b4b      	ldr	r3, [pc, #300]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cce:	d131      	bne.n	8003d34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cd0:	4b47      	ldr	r3, [pc, #284]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd6:	4a46      	ldr	r2, [pc, #280]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ce0:	4b43      	ldr	r3, [pc, #268]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ce8:	4a41      	ldr	r2, [pc, #260]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cf0:	4b40      	ldr	r3, [pc, #256]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2232      	movs	r2, #50	; 0x32
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	4a3f      	ldr	r2, [pc, #252]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	0c9b      	lsrs	r3, r3, #18
 8003d02:	3301      	adds	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d06:	e002      	b.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d0e:	4b38      	ldr	r3, [pc, #224]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1a:	d102      	bne.n	8003d22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f2      	bne.n	8003d08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d22:	4b33      	ldr	r3, [pc, #204]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2e:	d158      	bne.n	8003de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e057      	b.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d34:	4b2e      	ldr	r3, [pc, #184]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3a:	4a2d      	ldr	r2, [pc, #180]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d44:	e04d      	b.n	8003de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d4c:	d141      	bne.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d4e:	4b28      	ldr	r3, [pc, #160]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5a:	d131      	bne.n	8003dc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d5c:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d62:	4a23      	ldr	r2, [pc, #140]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d6c:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d74:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2232      	movs	r2, #50	; 0x32
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	0c9b      	lsrs	r3, r3, #18
 8003d8e:	3301      	adds	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d92:	e002      	b.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da6:	d102      	bne.n	8003dae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f2      	bne.n	8003d94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dba:	d112      	bne.n	8003de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e011      	b.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dd0:	e007      	b.n	8003de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dda:	4a05      	ldr	r2, [pc, #20]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ddc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003de0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40007000 	.word	0x40007000
 8003df4:	20000004 	.word	0x20000004
 8003df8:	431bde83 	.word	0x431bde83

08003dfc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e0a:	6093      	str	r3, [r2, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40007000 	.word	0x40007000

08003e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e2fe      	b.n	800442c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d075      	beq.n	8003f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e3a:	4b97      	ldr	r3, [pc, #604]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e44:	4b94      	ldr	r3, [pc, #592]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	d102      	bne.n	8003e5a <HAL_RCC_OscConfig+0x3e>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d002      	beq.n	8003e60 <HAL_RCC_OscConfig+0x44>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d10b      	bne.n	8003e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e60:	4b8d      	ldr	r3, [pc, #564]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d05b      	beq.n	8003f24 <HAL_RCC_OscConfig+0x108>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d157      	bne.n	8003f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e2d9      	b.n	800442c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d106      	bne.n	8003e90 <HAL_RCC_OscConfig+0x74>
 8003e82:	4b85      	ldr	r3, [pc, #532]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a84      	ldr	r2, [pc, #528]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	e01d      	b.n	8003ecc <HAL_RCC_OscConfig+0xb0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x98>
 8003e9a:	4b7f      	ldr	r3, [pc, #508]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a7e      	ldr	r2, [pc, #504]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b7c      	ldr	r3, [pc, #496]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a7b      	ldr	r2, [pc, #492]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e00b      	b.n	8003ecc <HAL_RCC_OscConfig+0xb0>
 8003eb4:	4b78      	ldr	r3, [pc, #480]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a77      	ldr	r2, [pc, #476]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b75      	ldr	r3, [pc, #468]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a74      	ldr	r2, [pc, #464]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d013      	beq.n	8003efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fd fb7a 	bl	80015cc <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fd fb76 	bl	80015cc <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e29e      	b.n	800442c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eee:	4b6a      	ldr	r3, [pc, #424]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0xc0>
 8003efa:	e014      	b.n	8003f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd fb66 	bl	80015cc <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fd fb62 	bl	80015cc <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e28a      	b.n	800442c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f16:	4b60      	ldr	r3, [pc, #384]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0xe8>
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d075      	beq.n	800401e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f32:	4b59      	ldr	r3, [pc, #356]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f3c:	4b56      	ldr	r3, [pc, #344]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	d102      	bne.n	8003f52 <HAL_RCC_OscConfig+0x136>
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d002      	beq.n	8003f58 <HAL_RCC_OscConfig+0x13c>
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d11f      	bne.n	8003f98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f58:	4b4f      	ldr	r3, [pc, #316]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_OscConfig+0x154>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e25d      	b.n	800442c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	4b49      	ldr	r3, [pc, #292]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	4946      	ldr	r1, [pc, #280]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f84:	4b45      	ldr	r3, [pc, #276]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fd fad3 	bl	8001534 <HAL_InitTick>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d043      	beq.n	800401c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e249      	b.n	800442c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d023      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa0:	4b3d      	ldr	r3, [pc, #244]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a3c      	ldr	r2, [pc, #240]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fd fb0e 	bl	80015cc <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb4:	f7fd fb0a 	bl	80015cc <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e232      	b.n	800442c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc6:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd2:	4b31      	ldr	r3, [pc, #196]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	492d      	ldr	r1, [pc, #180]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
 8003fe6:	e01a      	b.n	800401e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe8:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a2a      	ldr	r2, [pc, #168]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8003fee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fd faea 	bl	80015cc <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ffc:	f7fd fae6 	bl	80015cc <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e20e      	b.n	800442c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800400e:	4b22      	ldr	r3, [pc, #136]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x1e0>
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800401c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d041      	beq.n	80040ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01c      	beq.n	800406c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004032:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8004034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004038:	4a17      	ldr	r2, [pc, #92]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004042:	f7fd fac3 	bl	80015cc <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800404a:	f7fd fabf 	bl	80015cc <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e1e7      	b.n	800442c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800405c:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 800405e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ef      	beq.n	800404a <HAL_RCC_OscConfig+0x22e>
 800406a:	e020      	b.n	80040ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 800406e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_RCC_OscConfig+0x27c>)
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407c:	f7fd faa6 	bl	80015cc <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004082:	e00d      	b.n	80040a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004084:	f7fd faa2 	bl	80015cc <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d906      	bls.n	80040a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e1ca      	b.n	800442c <HAL_RCC_OscConfig+0x610>
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040a0:	4b8c      	ldr	r3, [pc, #560]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 80040a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1ea      	bne.n	8004084 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80a6 	beq.w	8004208 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040bc:	2300      	movs	r3, #0
 80040be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040c0:	4b84      	ldr	r3, [pc, #528]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_OscConfig+0x2b4>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x2b6>
 80040d0:	2300      	movs	r3, #0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d6:	4b7f      	ldr	r3, [pc, #508]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	4a7e      	ldr	r2, [pc, #504]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 80040dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e0:	6593      	str	r3, [r2, #88]	; 0x58
 80040e2:	4b7c      	ldr	r3, [pc, #496]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040ee:	2301      	movs	r3, #1
 80040f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f2:	4b79      	ldr	r3, [pc, #484]	; (80042d8 <HAL_RCC_OscConfig+0x4bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d118      	bne.n	8004130 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040fe:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCC_OscConfig+0x4bc>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a75      	ldr	r2, [pc, #468]	; (80042d8 <HAL_RCC_OscConfig+0x4bc>)
 8004104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410a:	f7fd fa5f 	bl	80015cc <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004112:	f7fd fa5b 	bl	80015cc <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e183      	b.n	800442c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004124:	4b6c      	ldr	r3, [pc, #432]	; (80042d8 <HAL_RCC_OscConfig+0x4bc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d108      	bne.n	800414a <HAL_RCC_OscConfig+0x32e>
 8004138:	4b66      	ldr	r3, [pc, #408]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	4a65      	ldr	r2, [pc, #404]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004148:	e024      	b.n	8004194 <HAL_RCC_OscConfig+0x378>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b05      	cmp	r3, #5
 8004150:	d110      	bne.n	8004174 <HAL_RCC_OscConfig+0x358>
 8004152:	4b60      	ldr	r3, [pc, #384]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004158:	4a5e      	ldr	r2, [pc, #376]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 800415a:	f043 0304 	orr.w	r3, r3, #4
 800415e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004162:	4b5c      	ldr	r3, [pc, #368]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	4a5a      	ldr	r2, [pc, #360]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004172:	e00f      	b.n	8004194 <HAL_RCC_OscConfig+0x378>
 8004174:	4b57      	ldr	r3, [pc, #348]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	4a56      	ldr	r2, [pc, #344]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004184:	4b53      	ldr	r3, [pc, #332]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	4a52      	ldr	r2, [pc, #328]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d016      	beq.n	80041ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fd fa16 	bl	80015cc <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a4:	f7fd fa12 	bl	80015cc <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e138      	b.n	800442c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ba:	4b46      	ldr	r3, [pc, #280]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ed      	beq.n	80041a4 <HAL_RCC_OscConfig+0x388>
 80041c8:	e015      	b.n	80041f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ca:	f7fd f9ff 	bl	80015cc <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041d0:	e00a      	b.n	80041e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d2:	f7fd f9fb 	bl	80015cc <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e121      	b.n	800442c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041e8:	4b3a      	ldr	r3, [pc, #232]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ed      	bne.n	80041d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041f6:	7ffb      	ldrb	r3, [r7, #31]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d105      	bne.n	8004208 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fc:	4b35      	ldr	r3, [pc, #212]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	4a34      	ldr	r2, [pc, #208]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 8004202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004206:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d03c      	beq.n	800428e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01c      	beq.n	8004256 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800421c:	4b2d      	ldr	r3, [pc, #180]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 800421e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004222:	4a2c      	ldr	r2, [pc, #176]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fd f9ce 	bl	80015cc <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004234:	f7fd f9ca 	bl	80015cc <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e0f2      	b.n	800442c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004246:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 8004248:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0ef      	beq.n	8004234 <HAL_RCC_OscConfig+0x418>
 8004254:	e01b      	b.n	800428e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004256:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 8004258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800425c:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004266:	f7fd f9b1 	bl	80015cc <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800426e:	f7fd f9ad 	bl	80015cc <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e0d5      	b.n	800442c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 8004282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1ef      	bne.n	800426e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80c9 	beq.w	800442a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	f000 8083 	beq.w	80043ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d15e      	bne.n	800436c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <HAL_RCC_OscConfig+0x4b8>)
 80042b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ba:	f7fd f987 	bl	80015cc <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c0:	e00c      	b.n	80042dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fd f983 	bl	80015cc <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d905      	bls.n	80042dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0ab      	b.n	800442c <HAL_RCC_OscConfig+0x610>
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042dc:	4b55      	ldr	r3, [pc, #340]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ec      	bne.n	80042c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e8:	4b52      	ldr	r3, [pc, #328]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	4b52      	ldr	r3, [pc, #328]	; (8004438 <HAL_RCC_OscConfig+0x61c>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6a11      	ldr	r1, [r2, #32]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042f8:	3a01      	subs	r2, #1
 80042fa:	0112      	lsls	r2, r2, #4
 80042fc:	4311      	orrs	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004302:	0212      	lsls	r2, r2, #8
 8004304:	4311      	orrs	r1, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800430a:	0852      	lsrs	r2, r2, #1
 800430c:	3a01      	subs	r2, #1
 800430e:	0552      	lsls	r2, r2, #21
 8004310:	4311      	orrs	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004316:	0852      	lsrs	r2, r2, #1
 8004318:	3a01      	subs	r2, #1
 800431a:	0652      	lsls	r2, r2, #25
 800431c:	4311      	orrs	r1, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004322:	06d2      	lsls	r2, r2, #27
 8004324:	430a      	orrs	r2, r1
 8004326:	4943      	ldr	r1, [pc, #268]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 8004328:	4313      	orrs	r3, r2
 800432a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432c:	4b41      	ldr	r3, [pc, #260]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a40      	ldr	r2, [pc, #256]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 8004332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004336:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004338:	4b3e      	ldr	r3, [pc, #248]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4a3d      	ldr	r2, [pc, #244]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 800433e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004342:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fd f942 	bl	80015cc <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434c:	f7fd f93e 	bl	80015cc <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e066      	b.n	800442c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800435e:	4b35      	ldr	r3, [pc, #212]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x530>
 800436a:	e05e      	b.n	800442a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436c:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a30      	ldr	r2, [pc, #192]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 8004372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd f928 	bl	80015cc <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004380:	f7fd f924 	bl	80015cc <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e04c      	b.n	800442c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004392:	4b28      	ldr	r3, [pc, #160]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800439e:	4b25      	ldr	r3, [pc, #148]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	4924      	ldr	r1, [pc, #144]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 80043a4:	4b25      	ldr	r3, [pc, #148]	; (800443c <HAL_RCC_OscConfig+0x620>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	60cb      	str	r3, [r1, #12]
 80043aa:	e03e      	b.n	800442a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e039      	b.n	800442c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043b8:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <HAL_RCC_OscConfig+0x618>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f003 0203 	and.w	r2, r3, #3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d12c      	bne.n	8004426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	3b01      	subs	r3, #1
 80043d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d123      	bne.n	8004426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d11b      	bne.n	8004426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d113      	bne.n	8004426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	3b01      	subs	r3, #1
 800440c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800440e:	429a      	cmp	r2, r3
 8004410:	d109      	bne.n	8004426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	3b01      	subs	r3, #1
 8004420:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d001      	beq.n	800442a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3720      	adds	r7, #32
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	019f800c 	.word	0x019f800c
 800443c:	feeefffc 	.word	0xfeeefffc

08004440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e11e      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b91      	ldr	r3, [pc, #580]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d910      	bls.n	8004488 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b8e      	ldr	r3, [pc, #568]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 020f 	bic.w	r2, r3, #15
 800446e:	498c      	ldr	r1, [pc, #560]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b8a      	ldr	r3, [pc, #552]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e106      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d073      	beq.n	800457c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b03      	cmp	r3, #3
 800449a:	d129      	bne.n	80044f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449c:	4b81      	ldr	r3, [pc, #516]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0f4      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044ac:	f000 f99e 	bl	80047ec <RCC_GetSysClockFreqFromPLLSource>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4a7c      	ldr	r2, [pc, #496]	; (80046a8 <HAL_RCC_ClockConfig+0x268>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d93f      	bls.n	800453a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044ba:	4b7a      	ldr	r3, [pc, #488]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d033      	beq.n	800453a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d12f      	bne.n	800453a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044da:	4b72      	ldr	r3, [pc, #456]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e2:	4a70      	ldr	r2, [pc, #448]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80044e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e024      	b.n	800453a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f8:	4b6a      	ldr	r3, [pc, #424]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0c6      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004508:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0be      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004518:	f000 f8ce 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 800451c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4a61      	ldr	r2, [pc, #388]	; (80046a8 <HAL_RCC_ClockConfig+0x268>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d909      	bls.n	800453a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004526:	4b5f      	ldr	r3, [pc, #380]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800452e:	4a5d      	ldr	r2, [pc, #372]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004534:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800453a:	4b5a      	ldr	r3, [pc, #360]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f023 0203 	bic.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4957      	ldr	r1, [pc, #348]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004548:	4313      	orrs	r3, r2
 800454a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454c:	f7fd f83e 	bl	80015cc <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	e00a      	b.n	800456a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004554:	f7fd f83a 	bl	80015cc <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e095      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	4b4e      	ldr	r3, [pc, #312]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 020c 	and.w	r2, r3, #12
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	429a      	cmp	r2, r3
 800457a:	d1eb      	bne.n	8004554 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d023      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004594:	4b43      	ldr	r3, [pc, #268]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a42      	ldr	r2, [pc, #264]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 800459a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800459e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045ac:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045b4:	4a3b      	ldr	r2, [pc, #236]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80045b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045bc:	4b39      	ldr	r3, [pc, #228]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4936      	ldr	r1, [pc, #216]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b80      	cmp	r3, #128	; 0x80
 80045d4:	d105      	bne.n	80045e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045d6:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4a32      	ldr	r2, [pc, #200]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 80045dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e2:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d21d      	bcs.n	800462c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f0:	4b2b      	ldr	r3, [pc, #172]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 020f 	bic.w	r2, r3, #15
 80045f8:	4929      	ldr	r1, [pc, #164]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004600:	f7fc ffe4 	bl	80015cc <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	e00a      	b.n	800461e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004608:	f7fc ffe0 	bl	80015cc <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	; 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e03b      	b.n	8004696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_RCC_ClockConfig+0x260>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d1ed      	bne.n	8004608 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004638:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4917      	ldr	r1, [pc, #92]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004656:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	490f      	ldr	r1, [pc, #60]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800466a:	f000 f825 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 800466e:	4602      	mov	r2, r0
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_RCC_ClockConfig+0x264>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	490c      	ldr	r1, [pc, #48]	; (80046ac <HAL_RCC_ClockConfig+0x26c>)
 800467c:	5ccb      	ldrb	r3, [r1, r3]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	fa22 f303 	lsr.w	r3, r2, r3
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_RCC_ClockConfig+0x270>)
 8004688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <HAL_RCC_ClockConfig+0x274>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fc ff50 	bl	8001534 <HAL_InitTick>
 8004694:	4603      	mov	r3, r0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40022000 	.word	0x40022000
 80046a4:	40021000 	.word	0x40021000
 80046a8:	04c4b400 	.word	0x04c4b400
 80046ac:	08007424 	.word	0x08007424
 80046b0:	20000004 	.word	0x20000004
 80046b4:	20000008 	.word	0x20000008

080046b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046be:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d102      	bne.n	80046d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ca:	4b2a      	ldr	r3, [pc, #168]	; (8004774 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	e047      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046d0:	4b27      	ldr	r3, [pc, #156]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d102      	bne.n	80046e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046dc:	4b26      	ldr	r3, [pc, #152]	; (8004778 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	e03e      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046e2:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b0c      	cmp	r3, #12
 80046ec:	d136      	bne.n	800475c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ee:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	3301      	adds	r3, #1
 8004704:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d10c      	bne.n	8004726 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800470c:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <HAL_RCC_GetSysClockFreq+0xc0>)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	4a16      	ldr	r2, [pc, #88]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004716:	68d2      	ldr	r2, [r2, #12]
 8004718:	0a12      	lsrs	r2, r2, #8
 800471a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	617b      	str	r3, [r7, #20]
      break;
 8004724:	e00c      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004726:	4a13      	ldr	r2, [pc, #76]	; (8004774 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	4a10      	ldr	r2, [pc, #64]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004730:	68d2      	ldr	r2, [r2, #12]
 8004732:	0a12      	lsrs	r2, r2, #8
 8004734:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004738:	fb02 f303 	mul.w	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]
      break;
 800473e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	0e5b      	lsrs	r3, r3, #25
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	3301      	adds	r3, #1
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	e001      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004760:	693b      	ldr	r3, [r7, #16]
}
 8004762:	4618      	mov	r0, r3
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	00f42400 	.word	0x00f42400
 8004778:	016e3600 	.word	0x016e3600

0800477c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <HAL_RCC_GetHCLKFreq+0x14>)
 8004782:	681b      	ldr	r3, [r3, #0]
}
 8004784:	4618      	mov	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000004 	.word	0x20000004

08004794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004798:	f7ff fff0 	bl	800477c <HAL_RCC_GetHCLKFreq>
 800479c:	4602      	mov	r2, r0
 800479e:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	4904      	ldr	r1, [pc, #16]	; (80047bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047aa:	5ccb      	ldrb	r3, [r1, r3]
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40021000 	.word	0x40021000
 80047bc:	08007434 	.word	0x08007434

080047c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047c4:	f7ff ffda 	bl	800477c <HAL_RCC_GetHCLKFreq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	0adb      	lsrs	r3, r3, #11
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	4904      	ldr	r1, [pc, #16]	; (80047e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047d6:	5ccb      	ldrb	r3, [r1, r3]
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40021000 	.word	0x40021000
 80047e8:	08007434 	.word	0x08007434

080047ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047f2:	4b1e      	ldr	r3, [pc, #120]	; (800486c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047fc:	4b1b      	ldr	r3, [pc, #108]	; (800486c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b03      	cmp	r3, #3
 800480e:	d10c      	bne.n	800482a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004810:	4a17      	ldr	r2, [pc, #92]	; (8004870 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	4a14      	ldr	r2, [pc, #80]	; (800486c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800481a:	68d2      	ldr	r2, [r2, #12]
 800481c:	0a12      	lsrs	r2, r2, #8
 800481e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	617b      	str	r3, [r7, #20]
    break;
 8004828:	e00c      	b.n	8004844 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800482a:	4a12      	ldr	r2, [pc, #72]	; (8004874 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004832:	4a0e      	ldr	r2, [pc, #56]	; (800486c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004834:	68d2      	ldr	r2, [r2, #12]
 8004836:	0a12      	lsrs	r2, r2, #8
 8004838:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800483c:	fb02 f303 	mul.w	r3, r2, r3
 8004840:	617b      	str	r3, [r7, #20]
    break;
 8004842:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	0e5b      	lsrs	r3, r3, #25
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	3301      	adds	r3, #1
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800485e:	687b      	ldr	r3, [r7, #4]
}
 8004860:	4618      	mov	r0, r3
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	40021000 	.word	0x40021000
 8004870:	016e3600 	.word	0x016e3600
 8004874:	00f42400 	.word	0x00f42400

08004878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004880:	2300      	movs	r3, #0
 8004882:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004884:	2300      	movs	r3, #0
 8004886:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8098 	beq.w	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004896:	2300      	movs	r3, #0
 8004898:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489a:	4b43      	ldr	r3, [pc, #268]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10d      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a6:	4b40      	ldr	r3, [pc, #256]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	4a3f      	ldr	r2, [pc, #252]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6593      	str	r3, [r2, #88]	; 0x58
 80048b2:	4b3d      	ldr	r3, [pc, #244]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048be:	2301      	movs	r3, #1
 80048c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048c2:	4b3a      	ldr	r3, [pc, #232]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a39      	ldr	r2, [pc, #228]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048ce:	f7fc fe7d 	bl	80015cc <HAL_GetTick>
 80048d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048d4:	e009      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d6:	f7fc fe79 	bl	80015cc <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d902      	bls.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	74fb      	strb	r3, [r7, #19]
        break;
 80048e8:	e005      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ea:	4b30      	ldr	r3, [pc, #192]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0ef      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d159      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048fc:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004906:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01e      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	429a      	cmp	r2, r3
 8004916:	d019      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004918:	4b23      	ldr	r3, [pc, #140]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004922:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004924:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004934:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493a:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800493c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004944:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d016      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004956:	f7fc fe39 	bl	80015cc <HAL_GetTick>
 800495a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800495c:	e00b      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495e:	f7fc fe35 	bl	80015cc <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f241 3288 	movw	r2, #5000	; 0x1388
 800496c:	4293      	cmp	r3, r2
 800496e:	d902      	bls.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	74fb      	strb	r3, [r7, #19]
            break;
 8004974:	e006      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0ec      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004998:	4903      	ldr	r1, [pc, #12]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049a0:	e008      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049a2:	7cfb      	ldrb	r3, [r7, #19]
 80049a4:	74bb      	strb	r3, [r7, #18]
 80049a6:	e005      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b0:	7cfb      	ldrb	r3, [r7, #19]
 80049b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b4:	7c7b      	ldrb	r3, [r7, #17]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d105      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ba:	4ba7      	ldr	r3, [pc, #668]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049be:	4aa6      	ldr	r2, [pc, #664]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049d2:	4ba1      	ldr	r3, [pc, #644]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d8:	f023 0203 	bic.w	r2, r3, #3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	499d      	ldr	r1, [pc, #628]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049f4:	4b98      	ldr	r3, [pc, #608]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fa:	f023 020c 	bic.w	r2, r3, #12
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	4995      	ldr	r1, [pc, #596]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a16:	4b90      	ldr	r3, [pc, #576]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	498c      	ldr	r1, [pc, #560]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a38:	4b87      	ldr	r3, [pc, #540]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	4984      	ldr	r1, [pc, #528]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a5a:	4b7f      	ldr	r3, [pc, #508]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	497b      	ldr	r1, [pc, #492]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a7c:	4b76      	ldr	r3, [pc, #472]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	4973      	ldr	r1, [pc, #460]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a9e:	4b6e      	ldr	r3, [pc, #440]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	496a      	ldr	r1, [pc, #424]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ac0:	4b65      	ldr	r3, [pc, #404]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	4962      	ldr	r1, [pc, #392]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ae2:	4b5d      	ldr	r3, [pc, #372]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	4959      	ldr	r1, [pc, #356]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b04:	4b54      	ldr	r3, [pc, #336]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b0a:	f023 0203 	bic.w	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	4951      	ldr	r1, [pc, #324]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b26:	4b4c      	ldr	r3, [pc, #304]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	4948      	ldr	r1, [pc, #288]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d015      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b48:	4b43      	ldr	r3, [pc, #268]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	4940      	ldr	r1, [pc, #256]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b66:	d105      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b68:	4b3b      	ldr	r3, [pc, #236]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4a3a      	ldr	r2, [pc, #232]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d015      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b80:	4b35      	ldr	r3, [pc, #212]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8e:	4932      	ldr	r1, [pc, #200]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b9e:	d105      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba0:	4b2d      	ldr	r3, [pc, #180]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4a2c      	ldr	r2, [pc, #176]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004baa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bb8:	4b27      	ldr	r3, [pc, #156]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	4924      	ldr	r1, [pc, #144]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bd6:	d105      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd8:	4b1f      	ldr	r3, [pc, #124]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a1e      	ldr	r2, [pc, #120]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d015      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bf0:	4b19      	ldr	r3, [pc, #100]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	4916      	ldr	r1, [pc, #88]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c0e:	d105      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c10:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4a10      	ldr	r2, [pc, #64]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d019      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	4908      	ldr	r1, [pc, #32]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c46:	d109      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c48:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a02      	ldr	r2, [pc, #8]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c52:	60d3      	str	r3, [r2, #12]
 8004c54:	e002      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d015      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c68:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c76:	4926      	ldr	r1, [pc, #152]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c86:	d105      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c88:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	4a20      	ldr	r2, [pc, #128]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c92:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d015      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ca0:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cae:	4918      	ldr	r1, [pc, #96]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbe:	d105      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cc0:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d015      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	490a      	ldr	r1, [pc, #40]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cf6:	d105      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d04:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000

08004d14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e09d      	b.n	8004e62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d108      	bne.n	8004d40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d36:	d009      	beq.n	8004d4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	61da      	str	r2, [r3, #28]
 8004d3e:	e005      	b.n	8004d4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fc fa1a 	bl	80011a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d8c:	d902      	bls.n	8004d94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	e002      	b.n	8004d9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004da2:	d007      	beq.n	8004db4 <HAL_SPI_Init+0xa0>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dac:	d002      	beq.n	8004db4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df6:	ea42 0103 	orr.w	r1, r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	0c1b      	lsrs	r3, r3, #16
 8004e10:	f003 0204 	and.w	r2, r3, #4
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e30:	ea42 0103 	orr.w	r1, r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e84:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e8c:	7dbb      	ldrb	r3, [r7, #22]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d00d      	beq.n	8004eae <HAL_SPI_TransmitReceive_IT+0x42>
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e98:	d106      	bne.n	8004ea8 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <HAL_SPI_TransmitReceive_IT+0x3c>
 8004ea2:	7dbb      	ldrb	r3, [r7, #22]
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d002      	beq.n	8004eae <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eac:	e07d      	b.n	8004faa <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_SPI_TransmitReceive_IT+0x54>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_SPI_TransmitReceive_IT+0x54>
 8004eba:	887b      	ldrh	r3, [r7, #2]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d102      	bne.n	8004ec6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ec4:	e071      	b.n	8004faa <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_SPI_TransmitReceive_IT+0x68>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e06b      	b.n	8004fac <HAL_SPI_TransmitReceive_IT+0x140>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d003      	beq.n	8004ef0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2205      	movs	r2, #5
 8004eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	887a      	ldrh	r2, [r7, #2]
 8004f00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	887a      	ldrh	r2, [r7, #2]
 8004f06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	887a      	ldrh	r2, [r7, #2]
 8004f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	887a      	ldrh	r2, [r7, #2]
 8004f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f26:	d906      	bls.n	8004f36 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4a23      	ldr	r2, [pc, #140]	; (8004fb8 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8004f2c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a22      	ldr	r2, [pc, #136]	; (8004fbc <HAL_SPI_TransmitReceive_IT+0x150>)
 8004f32:	651a      	str	r2, [r3, #80]	; 0x50
 8004f34:	e005      	b.n	8004f42 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a21      	ldr	r2, [pc, #132]	; (8004fc0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8004f3a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4a21      	ldr	r2, [pc, #132]	; (8004fc4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004f40:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f4a:	d802      	bhi.n	8004f52 <HAL_SPI_TransmitReceive_IT+0xe6>
 8004f4c:	887b      	ldrh	r3, [r7, #2]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d908      	bls.n	8004f64 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	e007      	b.n	8004f74 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f72:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d007      	beq.n	8004f92 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f90:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004fa8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	08005353 	.word	0x08005353
 8004fbc:	080053b9 	.word	0x080053b9
 8004fc0:	08005203 	.word	0x08005203
 8004fc4:	080052c1 	.word	0x080052c1

08004fc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10e      	bne.n	8005008 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d009      	beq.n	8005008 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4798      	blx	r3
    return;
 8005006:	e0ce      	b.n	80051a6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d009      	beq.n	8005026 <HAL_SPI_IRQHandler+0x5e>
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005018:	2b00      	cmp	r3, #0
 800501a:	d004      	beq.n	8005026 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4798      	blx	r3
    return;
 8005024:	e0bf      	b.n	80051a6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <HAL_SPI_IRQHandler+0x7e>
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d105      	bne.n	8005046 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80b0 	beq.w	80051a6 <HAL_SPI_IRQHandler+0x1de>
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80aa 	beq.w	80051a6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d023      	beq.n	80050a4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b03      	cmp	r3, #3
 8005066:	d011      	beq.n	800508c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506c:	f043 0204 	orr.w	r2, r3, #4
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	e00b      	b.n	80050a4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	693b      	ldr	r3, [r7, #16]
        return;
 80050a2:	e080      	b.n	80051a6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d014      	beq.n	80050d8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b2:	f043 0201 	orr.w	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00c      	beq.n	80050fc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e6:	f043 0208 	orr.w	r2, r3, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80050ee:	2300      	movs	r3, #0
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005100:	2b00      	cmp	r3, #0
 8005102:	d04f      	beq.n	80051a4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005112:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d104      	bne.n	8005130 <HAL_SPI_IRQHandler+0x168>
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d034      	beq.n	800519a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0203 	bic.w	r2, r2, #3
 800513e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005144:	2b00      	cmp	r3, #0
 8005146:	d011      	beq.n	800516c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	4a17      	ldr	r2, [pc, #92]	; (80051ac <HAL_SPI_IRQHandler+0x1e4>)
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005154:	4618      	mov	r0, r3
 8005156:	f7fc fc1f 	bl	8001998 <HAL_DMA_Abort_IT>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005164:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005170:	2b00      	cmp	r3, #0
 8005172:	d016      	beq.n	80051a2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	4a0c      	ldr	r2, [pc, #48]	; (80051ac <HAL_SPI_IRQHandler+0x1e4>)
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	4618      	mov	r0, r3
 8005182:	f7fc fc09 	bl	8001998 <HAL_DMA_Abort_IT>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005190:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005198:	e003      	b.n	80051a2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f812 	bl	80051c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80051a0:	e000      	b.n	80051a4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80051a2:	bf00      	nop
    return;
 80051a4:	bf00      	nop
  }
}
 80051a6:	3720      	adds	r7, #32
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	080051d9 	.word	0x080051d9

080051b0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f7ff ffe5 	bl	80051c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b01      	cmp	r3, #1
 8005214:	d923      	bls.n	800525e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	b292      	uxth	r2, r2
 8005222:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	1c9a      	adds	r2, r3, #2
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b02      	subs	r3, #2
 8005238:	b29a      	uxth	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d11f      	bne.n	800528c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800525a:	605a      	str	r2, [r3, #4]
 800525c:	e016      	b.n	800528c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f103 020c 	add.w	r2, r3, #12
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	7812      	ldrb	r2, [r2, #0]
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10f      	bne.n	80052b8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052a6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d102      	bne.n	80052b8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa14 	bl	80056e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d912      	bls.n	80052f8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	881a      	ldrh	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	1c9a      	adds	r2, r3, #2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b02      	subs	r3, #2
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052f6:	e012      	b.n	800531e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	330c      	adds	r3, #12
 8005302:	7812      	ldrb	r2, [r2, #0]
 8005304:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d110      	bne.n	800534a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005336:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f9cb 	bl	80056e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	b292      	uxth	r2, r2
 8005366:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	1c9a      	adds	r2, r3, #2
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10f      	bne.n	80053b0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f998 	bl	80056e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	881a      	ldrh	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	1c9a      	adds	r2, r3, #2
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d110      	bne.n	8005410 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053fc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f968 	bl	80056e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005428:	f7fc f8d0 	bl	80015cc <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	4413      	add	r3, r2
 8005436:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005438:	f7fc f8c8 	bl	80015cc <HAL_GetTick>
 800543c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800543e:	4b39      	ldr	r3, [pc, #228]	; (8005524 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	015b      	lsls	r3, r3, #5
 8005444:	0d1b      	lsrs	r3, r3, #20
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	fb02 f303 	mul.w	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800544e:	e054      	b.n	80054fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d050      	beq.n	80054fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005458:	f7fc f8b8 	bl	80015cc <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	429a      	cmp	r2, r3
 8005466:	d902      	bls.n	800546e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d13d      	bne.n	80054ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800547c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005486:	d111      	bne.n	80054ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005490:	d004      	beq.n	800549c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549a:	d107      	bne.n	80054ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b4:	d10f      	bne.n	80054d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e017      	b.n	800551a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4013      	ands	r3, r2
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	429a      	cmp	r2, r3
 8005516:	d19b      	bne.n	8005450 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000004 	.word	0x20000004

08005528 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800553a:	f7fc f847 	bl	80015cc <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	1a9b      	subs	r3, r3, r2
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	4413      	add	r3, r2
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800554a:	f7fc f83f 	bl	80015cc <HAL_GetTick>
 800554e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005558:	4b3d      	ldr	r3, [pc, #244]	; (8005650 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	00da      	lsls	r2, r3, #3
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	0d1b      	lsrs	r3, r3, #20
 8005568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556a:	fb02 f303 	mul.w	r3, r2, r3
 800556e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005570:	e060      	b.n	8005634 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005578:	d107      	bne.n	800558a <SPI_WaitFifoStateUntilTimeout+0x62>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005588:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d050      	beq.n	8005634 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005592:	f7fc f81b 	bl	80015cc <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559e:	429a      	cmp	r2, r3
 80055a0:	d902      	bls.n	80055a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d13d      	bne.n	8005624 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055c0:	d111      	bne.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ca:	d004      	beq.n	80055d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d4:	d107      	bne.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ee:	d10f      	bne.n	8005610 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800560e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e010      	b.n	8005646 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	3b01      	subs	r3, #1
 8005632:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d196      	bne.n	8005572 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3728      	adds	r7, #40	; 0x28
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000004 	.word	0x20000004

08005654 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2200      	movs	r2, #0
 8005668:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff ff5b 	bl	8005528 <SPI_WaitFifoStateUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e027      	b.n	80056d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2200      	movs	r2, #0
 8005690:	2180      	movs	r1, #128	; 0x80
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff fec0 	bl	8005418 <SPI_WaitFlagStateUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a2:	f043 0220 	orr.w	r2, r3, #32
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e014      	b.n	80056d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7ff ff34 	bl	8005528 <SPI_WaitFifoStateUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ca:	f043 0220 	orr.w	r2, r3, #32
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e000      	b.n	80056d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056e8:	f7fb ff70 	bl	80015cc <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0220 	bic.w	r2, r2, #32
 80056fc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	2164      	movs	r1, #100	; 0x64
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff ffa6 	bl	8005654 <SPI_EndRxTxTransaction>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005712:	f043 0220 	orr.w	r2, r3, #32
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571e:	2b00      	cmp	r3, #0
 8005720:	d115      	bne.n	800574e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b04      	cmp	r3, #4
 800572c:	d107      	bne.n	800573e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fd3a 	bl	80051b0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800573c:	e00e      	b.n	800575c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fb fa3e 	bl	8000bc8 <HAL_SPI_TxRxCpltCallback>
}
 800574c:	e006      	b.n	800575c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fd34 	bl	80051c4 <HAL_SPI_ErrorCallback>
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e042      	b.n	80057fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7fb fcb1 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2224      	movs	r2, #36	; 0x24
 8005792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fb24 	bl	8005dfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f825 	bl	8005804 <UART_SetConfig>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e01b      	b.n	80057fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0201 	orr.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fba3 	bl	8005f40 <UART_CheckIdleState>
 80057fa:	4603      	mov	r3, r0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005808:	b08c      	sub	sp, #48	; 0x30
 800580a:	af00      	add	r7, sp, #0
 800580c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	431a      	orrs	r2, r3
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	431a      	orrs	r2, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	4313      	orrs	r3, r2
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4baa      	ldr	r3, [pc, #680]	; (8005adc <UART_SetConfig+0x2d8>)
 8005834:	4013      	ands	r3, r2
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800583c:	430b      	orrs	r3, r1
 800583e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a9f      	ldr	r2, [pc, #636]	; (8005ae0 <UART_SetConfig+0x2dc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800586c:	4313      	orrs	r3, r2
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800587a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005884:	430b      	orrs	r3, r1
 8005886:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	f023 010f 	bic.w	r1, r3, #15
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a90      	ldr	r2, [pc, #576]	; (8005ae4 <UART_SetConfig+0x2e0>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d125      	bne.n	80058f4 <UART_SetConfig+0xf0>
 80058a8:	4b8f      	ldr	r3, [pc, #572]	; (8005ae8 <UART_SetConfig+0x2e4>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d81a      	bhi.n	80058ec <UART_SetConfig+0xe8>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <UART_SetConfig+0xb8>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	080058dd 	.word	0x080058dd
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058e5 	.word	0x080058e5
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d2:	e116      	b.n	8005b02 <UART_SetConfig+0x2fe>
 80058d4:	2302      	movs	r3, #2
 80058d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058da:	e112      	b.n	8005b02 <UART_SetConfig+0x2fe>
 80058dc:	2304      	movs	r3, #4
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e2:	e10e      	b.n	8005b02 <UART_SetConfig+0x2fe>
 80058e4:	2308      	movs	r3, #8
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ea:	e10a      	b.n	8005b02 <UART_SetConfig+0x2fe>
 80058ec:	2310      	movs	r3, #16
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f2:	e106      	b.n	8005b02 <UART_SetConfig+0x2fe>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a7c      	ldr	r2, [pc, #496]	; (8005aec <UART_SetConfig+0x2e8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d138      	bne.n	8005970 <UART_SetConfig+0x16c>
 80058fe:	4b7a      	ldr	r3, [pc, #488]	; (8005ae8 <UART_SetConfig+0x2e4>)
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005904:	f003 030c 	and.w	r3, r3, #12
 8005908:	2b0c      	cmp	r3, #12
 800590a:	d82d      	bhi.n	8005968 <UART_SetConfig+0x164>
 800590c:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <UART_SetConfig+0x110>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005949 	.word	0x08005949
 8005918:	08005969 	.word	0x08005969
 800591c:	08005969 	.word	0x08005969
 8005920:	08005969 	.word	0x08005969
 8005924:	08005959 	.word	0x08005959
 8005928:	08005969 	.word	0x08005969
 800592c:	08005969 	.word	0x08005969
 8005930:	08005969 	.word	0x08005969
 8005934:	08005951 	.word	0x08005951
 8005938:	08005969 	.word	0x08005969
 800593c:	08005969 	.word	0x08005969
 8005940:	08005969 	.word	0x08005969
 8005944:	08005961 	.word	0x08005961
 8005948:	2300      	movs	r3, #0
 800594a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800594e:	e0d8      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005950:	2302      	movs	r3, #2
 8005952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005956:	e0d4      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005958:	2304      	movs	r3, #4
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800595e:	e0d0      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005960:	2308      	movs	r3, #8
 8005962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005966:	e0cc      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005968:	2310      	movs	r3, #16
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596e:	e0c8      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a5e      	ldr	r2, [pc, #376]	; (8005af0 <UART_SetConfig+0x2ec>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d125      	bne.n	80059c6 <UART_SetConfig+0x1c2>
 800597a:	4b5b      	ldr	r3, [pc, #364]	; (8005ae8 <UART_SetConfig+0x2e4>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005980:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005984:	2b30      	cmp	r3, #48	; 0x30
 8005986:	d016      	beq.n	80059b6 <UART_SetConfig+0x1b2>
 8005988:	2b30      	cmp	r3, #48	; 0x30
 800598a:	d818      	bhi.n	80059be <UART_SetConfig+0x1ba>
 800598c:	2b20      	cmp	r3, #32
 800598e:	d00a      	beq.n	80059a6 <UART_SetConfig+0x1a2>
 8005990:	2b20      	cmp	r3, #32
 8005992:	d814      	bhi.n	80059be <UART_SetConfig+0x1ba>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <UART_SetConfig+0x19a>
 8005998:	2b10      	cmp	r3, #16
 800599a:	d008      	beq.n	80059ae <UART_SetConfig+0x1aa>
 800599c:	e00f      	b.n	80059be <UART_SetConfig+0x1ba>
 800599e:	2300      	movs	r3, #0
 80059a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a4:	e0ad      	b.n	8005b02 <UART_SetConfig+0x2fe>
 80059a6:	2302      	movs	r3, #2
 80059a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ac:	e0a9      	b.n	8005b02 <UART_SetConfig+0x2fe>
 80059ae:	2304      	movs	r3, #4
 80059b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b4:	e0a5      	b.n	8005b02 <UART_SetConfig+0x2fe>
 80059b6:	2308      	movs	r3, #8
 80059b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059bc:	e0a1      	b.n	8005b02 <UART_SetConfig+0x2fe>
 80059be:	2310      	movs	r3, #16
 80059c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c4:	e09d      	b.n	8005b02 <UART_SetConfig+0x2fe>
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a4a      	ldr	r2, [pc, #296]	; (8005af4 <UART_SetConfig+0x2f0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d125      	bne.n	8005a1c <UART_SetConfig+0x218>
 80059d0:	4b45      	ldr	r3, [pc, #276]	; (8005ae8 <UART_SetConfig+0x2e4>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059da:	2bc0      	cmp	r3, #192	; 0xc0
 80059dc:	d016      	beq.n	8005a0c <UART_SetConfig+0x208>
 80059de:	2bc0      	cmp	r3, #192	; 0xc0
 80059e0:	d818      	bhi.n	8005a14 <UART_SetConfig+0x210>
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	d00a      	beq.n	80059fc <UART_SetConfig+0x1f8>
 80059e6:	2b80      	cmp	r3, #128	; 0x80
 80059e8:	d814      	bhi.n	8005a14 <UART_SetConfig+0x210>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <UART_SetConfig+0x1f0>
 80059ee:	2b40      	cmp	r3, #64	; 0x40
 80059f0:	d008      	beq.n	8005a04 <UART_SetConfig+0x200>
 80059f2:	e00f      	b.n	8005a14 <UART_SetConfig+0x210>
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059fa:	e082      	b.n	8005b02 <UART_SetConfig+0x2fe>
 80059fc:	2302      	movs	r3, #2
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a02:	e07e      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005a04:	2304      	movs	r3, #4
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a0a:	e07a      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a12:	e076      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005a14:	2310      	movs	r3, #16
 8005a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a1a:	e072      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a35      	ldr	r2, [pc, #212]	; (8005af8 <UART_SetConfig+0x2f4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d12a      	bne.n	8005a7c <UART_SetConfig+0x278>
 8005a26:	4b30      	ldr	r3, [pc, #192]	; (8005ae8 <UART_SetConfig+0x2e4>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a34:	d01a      	beq.n	8005a6c <UART_SetConfig+0x268>
 8005a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a3a:	d81b      	bhi.n	8005a74 <UART_SetConfig+0x270>
 8005a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a40:	d00c      	beq.n	8005a5c <UART_SetConfig+0x258>
 8005a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a46:	d815      	bhi.n	8005a74 <UART_SetConfig+0x270>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <UART_SetConfig+0x250>
 8005a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a50:	d008      	beq.n	8005a64 <UART_SetConfig+0x260>
 8005a52:	e00f      	b.n	8005a74 <UART_SetConfig+0x270>
 8005a54:	2300      	movs	r3, #0
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a5a:	e052      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a62:	e04e      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005a64:	2304      	movs	r3, #4
 8005a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a6a:	e04a      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a72:	e046      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005a74:	2310      	movs	r3, #16
 8005a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a7a:	e042      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a17      	ldr	r2, [pc, #92]	; (8005ae0 <UART_SetConfig+0x2dc>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d13a      	bne.n	8005afc <UART_SetConfig+0x2f8>
 8005a86:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <UART_SetConfig+0x2e4>)
 8005a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a94:	d01a      	beq.n	8005acc <UART_SetConfig+0x2c8>
 8005a96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a9a:	d81b      	bhi.n	8005ad4 <UART_SetConfig+0x2d0>
 8005a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa0:	d00c      	beq.n	8005abc <UART_SetConfig+0x2b8>
 8005aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa6:	d815      	bhi.n	8005ad4 <UART_SetConfig+0x2d0>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <UART_SetConfig+0x2b0>
 8005aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab0:	d008      	beq.n	8005ac4 <UART_SetConfig+0x2c0>
 8005ab2:	e00f      	b.n	8005ad4 <UART_SetConfig+0x2d0>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aba:	e022      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005abc:	2302      	movs	r3, #2
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac2:	e01e      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aca:	e01a      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005acc:	2308      	movs	r3, #8
 8005ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ad2:	e016      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ada:	e012      	b.n	8005b02 <UART_SetConfig+0x2fe>
 8005adc:	cfff69f3 	.word	0xcfff69f3
 8005ae0:	40008000 	.word	0x40008000
 8005ae4:	40013800 	.word	0x40013800
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	40004400 	.word	0x40004400
 8005af0:	40004800 	.word	0x40004800
 8005af4:	40004c00 	.word	0x40004c00
 8005af8:	40005000 	.word	0x40005000
 8005afc:	2310      	movs	r3, #16
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4aae      	ldr	r2, [pc, #696]	; (8005dc0 <UART_SetConfig+0x5bc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	f040 8097 	bne.w	8005c3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d823      	bhi.n	8005b5e <UART_SetConfig+0x35a>
 8005b16:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <UART_SetConfig+0x318>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b5f 	.word	0x08005b5f
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b5f 	.word	0x08005b5f
 8005b2c:	08005b4f 	.word	0x08005b4f
 8005b30:	08005b5f 	.word	0x08005b5f
 8005b34:	08005b5f 	.word	0x08005b5f
 8005b38:	08005b5f 	.word	0x08005b5f
 8005b3c:	08005b57 	.word	0x08005b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b40:	f7fe fe28 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 8005b44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b46:	e010      	b.n	8005b6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b48:	4b9e      	ldr	r3, [pc, #632]	; (8005dc4 <UART_SetConfig+0x5c0>)
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b4c:	e00d      	b.n	8005b6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b4e:	f7fe fdb3 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005b52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b54:	e009      	b.n	8005b6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b5c:	e005      	b.n	8005b6a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8130 	beq.w	8005dd2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	4a94      	ldr	r2, [pc, #592]	; (8005dc8 <UART_SetConfig+0x5c4>)
 8005b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	4413      	add	r3, r2
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d305      	bcc.n	8005ba2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d903      	bls.n	8005baa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ba8:	e113      	b.n	8005dd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	2200      	movs	r2, #0
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	60fa      	str	r2, [r7, #12]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	4a84      	ldr	r2, [pc, #528]	; (8005dc8 <UART_SetConfig+0x5c4>)
 8005bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bcc:	f7fa fb78 	bl	80002c0 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	020b      	lsls	r3, r1, #8
 8005be2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005be6:	0202      	lsls	r2, r0, #8
 8005be8:	6979      	ldr	r1, [r7, #20]
 8005bea:	6849      	ldr	r1, [r1, #4]
 8005bec:	0849      	lsrs	r1, r1, #1
 8005bee:	2000      	movs	r0, #0
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	eb12 0804 	adds.w	r8, r2, r4
 8005bf8:	eb43 0905 	adc.w	r9, r3, r5
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	469a      	mov	sl, r3
 8005c04:	4693      	mov	fp, r2
 8005c06:	4652      	mov	r2, sl
 8005c08:	465b      	mov	r3, fp
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	f7fa fb57 	bl	80002c0 <__aeabi_uldivmod>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4613      	mov	r3, r2
 8005c18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c20:	d308      	bcc.n	8005c34 <UART_SetConfig+0x430>
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c28:	d204      	bcs.n	8005c34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6a3a      	ldr	r2, [r7, #32]
 8005c30:	60da      	str	r2, [r3, #12]
 8005c32:	e0ce      	b.n	8005dd2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c3a:	e0ca      	b.n	8005dd2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c44:	d166      	bne.n	8005d14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005c46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d827      	bhi.n	8005c9e <UART_SetConfig+0x49a>
 8005c4e:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <UART_SetConfig+0x450>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c81 	.word	0x08005c81
 8005c5c:	08005c89 	.word	0x08005c89
 8005c60:	08005c9f 	.word	0x08005c9f
 8005c64:	08005c8f 	.word	0x08005c8f
 8005c68:	08005c9f 	.word	0x08005c9f
 8005c6c:	08005c9f 	.word	0x08005c9f
 8005c70:	08005c9f 	.word	0x08005c9f
 8005c74:	08005c97 	.word	0x08005c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c78:	f7fe fd8c 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 8005c7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c7e:	e014      	b.n	8005caa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c80:	f7fe fd9e 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 8005c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c86:	e010      	b.n	8005caa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c88:	4b4e      	ldr	r3, [pc, #312]	; (8005dc4 <UART_SetConfig+0x5c0>)
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c8c:	e00d      	b.n	8005caa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c8e:	f7fe fd13 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005c92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c94:	e009      	b.n	8005caa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c9c:	e005      	b.n	8005caa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8090 	beq.w	8005dd2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	4a44      	ldr	r2, [pc, #272]	; (8005dc8 <UART_SetConfig+0x5c4>)
 8005cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cc4:	005a      	lsls	r2, r3, #1
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	441a      	add	r2, r3
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	2b0f      	cmp	r3, #15
 8005cdc:	d916      	bls.n	8005d0c <UART_SetConfig+0x508>
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce4:	d212      	bcs.n	8005d0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	f023 030f 	bic.w	r3, r3, #15
 8005cee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	8bfb      	ldrh	r3, [r7, #30]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	8bfa      	ldrh	r2, [r7, #30]
 8005d08:	60da      	str	r2, [r3, #12]
 8005d0a:	e062      	b.n	8005dd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d12:	e05e      	b.n	8005dd2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d828      	bhi.n	8005d6e <UART_SetConfig+0x56a>
 8005d1c:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <UART_SetConfig+0x520>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d49 	.word	0x08005d49
 8005d28:	08005d51 	.word	0x08005d51
 8005d2c:	08005d59 	.word	0x08005d59
 8005d30:	08005d6f 	.word	0x08005d6f
 8005d34:	08005d5f 	.word	0x08005d5f
 8005d38:	08005d6f 	.word	0x08005d6f
 8005d3c:	08005d6f 	.word	0x08005d6f
 8005d40:	08005d6f 	.word	0x08005d6f
 8005d44:	08005d67 	.word	0x08005d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d48:	f7fe fd24 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 8005d4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d4e:	e014      	b.n	8005d7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d50:	f7fe fd36 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 8005d54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d56:	e010      	b.n	8005d7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d58:	4b1a      	ldr	r3, [pc, #104]	; (8005dc4 <UART_SetConfig+0x5c0>)
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d5c:	e00d      	b.n	8005d7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d5e:	f7fe fcab 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005d62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d64:	e009      	b.n	8005d7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d6c:	e005      	b.n	8005d7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d78:	bf00      	nop
    }

    if (pclk != 0U)
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d028      	beq.n	8005dd2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	4a10      	ldr	r2, [pc, #64]	; (8005dc8 <UART_SetConfig+0x5c4>)
 8005d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	441a      	add	r2, r3
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	2b0f      	cmp	r3, #15
 8005da8:	d910      	bls.n	8005dcc <UART_SetConfig+0x5c8>
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db0:	d20c      	bcs.n	8005dcc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60da      	str	r2, [r3, #12]
 8005dbc:	e009      	b.n	8005dd2 <UART_SetConfig+0x5ce>
 8005dbe:	bf00      	nop
 8005dc0:	40008000 	.word	0x40008000
 8005dc4:	00f42400 	.word	0x00f42400
 8005dc8:	0800743c 	.word	0x0800743c
      }
      else
      {
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2200      	movs	r2, #0
 8005de6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2200      	movs	r2, #0
 8005dec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005dee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3730      	adds	r7, #48	; 0x30
 8005df6:	46bd      	mov	sp, r7
 8005df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01a      	beq.n	8005f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005efa:	d10a      	bne.n	8005f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  }
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b098      	sub	sp, #96	; 0x60
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f50:	f7fb fb3c 	bl	80015cc <HAL_GetTick>
 8005f54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d12f      	bne.n	8005fc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f88e 	bl	8006094 <UART_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d022      	beq.n	8005fc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f92:	653b      	str	r3, [r7, #80]	; 0x50
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f9e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e6      	bne.n	8005f7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e063      	b.n	800608c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d149      	bne.n	8006066 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f857 	bl	8006094 <UART_WaitOnFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d03c      	beq.n	8006066 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006000:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600a:	633b      	str	r3, [r7, #48]	; 0x30
 800600c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e6      	bne.n	8005fec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3308      	adds	r3, #8
 8006024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	60fb      	str	r3, [r7, #12]
   return(result);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	64bb      	str	r3, [r7, #72]	; 0x48
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3308      	adds	r3, #8
 800603c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800603e:	61fa      	str	r2, [r7, #28]
 8006040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	69b9      	ldr	r1, [r7, #24]
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	617b      	str	r3, [r7, #20]
   return(result);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e5      	bne.n	800601e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e012      	b.n	800608c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3758      	adds	r7, #88	; 0x58
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	4613      	mov	r3, r2
 80060a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a4:	e04f      	b.n	8006146 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ac:	d04b      	beq.n	8006146 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ae:	f7fb fa8d 	bl	80015cc <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d302      	bcc.n	80060c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e04e      	b.n	8006166 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d037      	beq.n	8006146 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b80      	cmp	r3, #128	; 0x80
 80060da:	d034      	beq.n	8006146 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d031      	beq.n	8006146 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d110      	bne.n	8006112 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2208      	movs	r2, #8
 80060f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f838 	bl	800616e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2208      	movs	r2, #8
 8006102:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e029      	b.n	8006166 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800611c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006120:	d111      	bne.n	8006146 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800612a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f81e 	bl	800616e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e00f      	b.n	8006166 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4013      	ands	r3, r2
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	429a      	cmp	r2, r3
 8006154:	bf0c      	ite	eq
 8006156:	2301      	moveq	r3, #1
 8006158:	2300      	movne	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	429a      	cmp	r2, r3
 8006162:	d0a0      	beq.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800616e:	b480      	push	{r7}
 8006170:	b095      	sub	sp, #84	; 0x54
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800618a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	461a      	mov	r2, r3
 8006192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006194:	643b      	str	r3, [r7, #64]	; 0x40
 8006196:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800619a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e6      	bne.n	8006176 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3308      	adds	r3, #8
 80061ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061be:	f023 0301 	bic.w	r3, r3, #1
 80061c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3308      	adds	r3, #8
 80061ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e3      	bne.n	80061a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d118      	bne.n	800621a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f023 0310 	bic.w	r3, r3, #16
 80061fc:	647b      	str	r3, [r7, #68]	; 0x44
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006206:	61bb      	str	r3, [r7, #24]
 8006208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	6979      	ldr	r1, [r7, #20]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	613b      	str	r3, [r7, #16]
   return(result);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e6      	bne.n	80061e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800622e:	bf00      	nop
 8006230:	3754      	adds	r7, #84	; 0x54
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_UARTEx_DisableFifoMode+0x16>
 800624c:	2302      	movs	r3, #2
 800624e:	e027      	b.n	80062a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2224      	movs	r2, #36	; 0x24
 800625c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0201 	bic.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800627e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e02d      	b.n	8006320 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2224      	movs	r2, #36	; 0x24
 80062d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0201 	bic.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f84f 	bl	80063a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800633c:	2302      	movs	r3, #2
 800633e:	e02d      	b.n	800639c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2224      	movs	r2, #36	; 0x24
 800634c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0201 	bic.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f811 	bl	80063a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d108      	bne.n	80063c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063c4:	e031      	b.n	800642a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063c6:	2308      	movs	r3, #8
 80063c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063ca:	2308      	movs	r3, #8
 80063cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	0e5b      	lsrs	r3, r3, #25
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	0f5b      	lsrs	r3, r3, #29
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	7b3a      	ldrb	r2, [r7, #12]
 80063f2:	4911      	ldr	r1, [pc, #68]	; (8006438 <UARTEx_SetNbDataToProcess+0x94>)
 80063f4:	5c8a      	ldrb	r2, [r1, r2]
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063fa:	7b3a      	ldrb	r2, [r7, #12]
 80063fc:	490f      	ldr	r1, [pc, #60]	; (800643c <UARTEx_SetNbDataToProcess+0x98>)
 80063fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006400:	fb93 f3f2 	sdiv	r3, r3, r2
 8006404:	b29a      	uxth	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	7b7a      	ldrb	r2, [r7, #13]
 8006410:	4909      	ldr	r1, [pc, #36]	; (8006438 <UARTEx_SetNbDataToProcess+0x94>)
 8006412:	5c8a      	ldrb	r2, [r1, r2]
 8006414:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006418:	7b7a      	ldrb	r2, [r7, #13]
 800641a:	4908      	ldr	r1, [pc, #32]	; (800643c <UARTEx_SetNbDataToProcess+0x98>)
 800641c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800641e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006422:	b29a      	uxth	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	08007454 	.word	0x08007454
 800643c:	0800745c 	.word	0x0800745c

08006440 <rand>:
 8006440:	4b16      	ldr	r3, [pc, #88]	; (800649c <rand+0x5c>)
 8006442:	b510      	push	{r4, lr}
 8006444:	681c      	ldr	r4, [r3, #0]
 8006446:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006448:	b9b3      	cbnz	r3, 8006478 <rand+0x38>
 800644a:	2018      	movs	r0, #24
 800644c:	f000 fa22 	bl	8006894 <malloc>
 8006450:	4602      	mov	r2, r0
 8006452:	6320      	str	r0, [r4, #48]	; 0x30
 8006454:	b920      	cbnz	r0, 8006460 <rand+0x20>
 8006456:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <rand+0x60>)
 8006458:	4812      	ldr	r0, [pc, #72]	; (80064a4 <rand+0x64>)
 800645a:	2152      	movs	r1, #82	; 0x52
 800645c:	f000 f9b0 	bl	80067c0 <__assert_func>
 8006460:	4911      	ldr	r1, [pc, #68]	; (80064a8 <rand+0x68>)
 8006462:	4b12      	ldr	r3, [pc, #72]	; (80064ac <rand+0x6c>)
 8006464:	e9c0 1300 	strd	r1, r3, [r0]
 8006468:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <rand+0x70>)
 800646a:	6083      	str	r3, [r0, #8]
 800646c:	230b      	movs	r3, #11
 800646e:	8183      	strh	r3, [r0, #12]
 8006470:	2100      	movs	r1, #0
 8006472:	2001      	movs	r0, #1
 8006474:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006478:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800647a:	480e      	ldr	r0, [pc, #56]	; (80064b4 <rand+0x74>)
 800647c:	690b      	ldr	r3, [r1, #16]
 800647e:	694c      	ldr	r4, [r1, #20]
 8006480:	4a0d      	ldr	r2, [pc, #52]	; (80064b8 <rand+0x78>)
 8006482:	4358      	muls	r0, r3
 8006484:	fb02 0004 	mla	r0, r2, r4, r0
 8006488:	fba3 3202 	umull	r3, r2, r3, r2
 800648c:	3301      	adds	r3, #1
 800648e:	eb40 0002 	adc.w	r0, r0, r2
 8006492:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006496:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800649a:	bd10      	pop	{r4, pc}
 800649c:	20000068 	.word	0x20000068
 80064a0:	08007464 	.word	0x08007464
 80064a4:	0800747b 	.word	0x0800747b
 80064a8:	abcd330e 	.word	0xabcd330e
 80064ac:	e66d1234 	.word	0xe66d1234
 80064b0:	0005deec 	.word	0x0005deec
 80064b4:	5851f42d 	.word	0x5851f42d
 80064b8:	4c957f2d 	.word	0x4c957f2d

080064bc <std>:
 80064bc:	2300      	movs	r3, #0
 80064be:	b510      	push	{r4, lr}
 80064c0:	4604      	mov	r4, r0
 80064c2:	e9c0 3300 	strd	r3, r3, [r0]
 80064c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064ca:	6083      	str	r3, [r0, #8]
 80064cc:	8181      	strh	r1, [r0, #12]
 80064ce:	6643      	str	r3, [r0, #100]	; 0x64
 80064d0:	81c2      	strh	r2, [r0, #14]
 80064d2:	6183      	str	r3, [r0, #24]
 80064d4:	4619      	mov	r1, r3
 80064d6:	2208      	movs	r2, #8
 80064d8:	305c      	adds	r0, #92	; 0x5c
 80064da:	f000 f8f4 	bl	80066c6 <memset>
 80064de:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <std+0x58>)
 80064e0:	6263      	str	r3, [r4, #36]	; 0x24
 80064e2:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <std+0x5c>)
 80064e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80064e6:	4b0d      	ldr	r3, [pc, #52]	; (800651c <std+0x60>)
 80064e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <std+0x64>)
 80064ec:	6323      	str	r3, [r4, #48]	; 0x30
 80064ee:	4b0d      	ldr	r3, [pc, #52]	; (8006524 <std+0x68>)
 80064f0:	6224      	str	r4, [r4, #32]
 80064f2:	429c      	cmp	r4, r3
 80064f4:	d006      	beq.n	8006504 <std+0x48>
 80064f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80064fa:	4294      	cmp	r4, r2
 80064fc:	d002      	beq.n	8006504 <std+0x48>
 80064fe:	33d0      	adds	r3, #208	; 0xd0
 8006500:	429c      	cmp	r4, r3
 8006502:	d105      	bne.n	8006510 <std+0x54>
 8006504:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800650c:	f000 b954 	b.w	80067b8 <__retarget_lock_init_recursive>
 8006510:	bd10      	pop	{r4, pc}
 8006512:	bf00      	nop
 8006514:	08006641 	.word	0x08006641
 8006518:	08006663 	.word	0x08006663
 800651c:	0800669b 	.word	0x0800669b
 8006520:	080066bf 	.word	0x080066bf
 8006524:	20000300 	.word	0x20000300

08006528 <stdio_exit_handler>:
 8006528:	4a02      	ldr	r2, [pc, #8]	; (8006534 <stdio_exit_handler+0xc>)
 800652a:	4903      	ldr	r1, [pc, #12]	; (8006538 <stdio_exit_handler+0x10>)
 800652c:	4803      	ldr	r0, [pc, #12]	; (800653c <stdio_exit_handler+0x14>)
 800652e:	f000 b869 	b.w	8006604 <_fwalk_sglue>
 8006532:	bf00      	nop
 8006534:	20000010 	.word	0x20000010
 8006538:	08006b09 	.word	0x08006b09
 800653c:	2000001c 	.word	0x2000001c

08006540 <cleanup_stdio>:
 8006540:	6841      	ldr	r1, [r0, #4]
 8006542:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <cleanup_stdio+0x34>)
 8006544:	4299      	cmp	r1, r3
 8006546:	b510      	push	{r4, lr}
 8006548:	4604      	mov	r4, r0
 800654a:	d001      	beq.n	8006550 <cleanup_stdio+0x10>
 800654c:	f000 fadc 	bl	8006b08 <_fflush_r>
 8006550:	68a1      	ldr	r1, [r4, #8]
 8006552:	4b09      	ldr	r3, [pc, #36]	; (8006578 <cleanup_stdio+0x38>)
 8006554:	4299      	cmp	r1, r3
 8006556:	d002      	beq.n	800655e <cleanup_stdio+0x1e>
 8006558:	4620      	mov	r0, r4
 800655a:	f000 fad5 	bl	8006b08 <_fflush_r>
 800655e:	68e1      	ldr	r1, [r4, #12]
 8006560:	4b06      	ldr	r3, [pc, #24]	; (800657c <cleanup_stdio+0x3c>)
 8006562:	4299      	cmp	r1, r3
 8006564:	d004      	beq.n	8006570 <cleanup_stdio+0x30>
 8006566:	4620      	mov	r0, r4
 8006568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800656c:	f000 bacc 	b.w	8006b08 <_fflush_r>
 8006570:	bd10      	pop	{r4, pc}
 8006572:	bf00      	nop
 8006574:	20000300 	.word	0x20000300
 8006578:	20000368 	.word	0x20000368
 800657c:	200003d0 	.word	0x200003d0

08006580 <global_stdio_init.part.0>:
 8006580:	b510      	push	{r4, lr}
 8006582:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <global_stdio_init.part.0+0x30>)
 8006584:	4c0b      	ldr	r4, [pc, #44]	; (80065b4 <global_stdio_init.part.0+0x34>)
 8006586:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <global_stdio_init.part.0+0x38>)
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	4620      	mov	r0, r4
 800658c:	2200      	movs	r2, #0
 800658e:	2104      	movs	r1, #4
 8006590:	f7ff ff94 	bl	80064bc <std>
 8006594:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006598:	2201      	movs	r2, #1
 800659a:	2109      	movs	r1, #9
 800659c:	f7ff ff8e 	bl	80064bc <std>
 80065a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80065a4:	2202      	movs	r2, #2
 80065a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065aa:	2112      	movs	r1, #18
 80065ac:	f7ff bf86 	b.w	80064bc <std>
 80065b0:	20000438 	.word	0x20000438
 80065b4:	20000300 	.word	0x20000300
 80065b8:	08006529 	.word	0x08006529

080065bc <__sfp_lock_acquire>:
 80065bc:	4801      	ldr	r0, [pc, #4]	; (80065c4 <__sfp_lock_acquire+0x8>)
 80065be:	f000 b8fc 	b.w	80067ba <__retarget_lock_acquire_recursive>
 80065c2:	bf00      	nop
 80065c4:	20000441 	.word	0x20000441

080065c8 <__sfp_lock_release>:
 80065c8:	4801      	ldr	r0, [pc, #4]	; (80065d0 <__sfp_lock_release+0x8>)
 80065ca:	f000 b8f7 	b.w	80067bc <__retarget_lock_release_recursive>
 80065ce:	bf00      	nop
 80065d0:	20000441 	.word	0x20000441

080065d4 <__sinit>:
 80065d4:	b510      	push	{r4, lr}
 80065d6:	4604      	mov	r4, r0
 80065d8:	f7ff fff0 	bl	80065bc <__sfp_lock_acquire>
 80065dc:	6a23      	ldr	r3, [r4, #32]
 80065de:	b11b      	cbz	r3, 80065e8 <__sinit+0x14>
 80065e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e4:	f7ff bff0 	b.w	80065c8 <__sfp_lock_release>
 80065e8:	4b04      	ldr	r3, [pc, #16]	; (80065fc <__sinit+0x28>)
 80065ea:	6223      	str	r3, [r4, #32]
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <__sinit+0x2c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1f5      	bne.n	80065e0 <__sinit+0xc>
 80065f4:	f7ff ffc4 	bl	8006580 <global_stdio_init.part.0>
 80065f8:	e7f2      	b.n	80065e0 <__sinit+0xc>
 80065fa:	bf00      	nop
 80065fc:	08006541 	.word	0x08006541
 8006600:	20000438 	.word	0x20000438

08006604 <_fwalk_sglue>:
 8006604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006608:	4607      	mov	r7, r0
 800660a:	4688      	mov	r8, r1
 800660c:	4614      	mov	r4, r2
 800660e:	2600      	movs	r6, #0
 8006610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006614:	f1b9 0901 	subs.w	r9, r9, #1
 8006618:	d505      	bpl.n	8006626 <_fwalk_sglue+0x22>
 800661a:	6824      	ldr	r4, [r4, #0]
 800661c:	2c00      	cmp	r4, #0
 800661e:	d1f7      	bne.n	8006610 <_fwalk_sglue+0xc>
 8006620:	4630      	mov	r0, r6
 8006622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006626:	89ab      	ldrh	r3, [r5, #12]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d907      	bls.n	800663c <_fwalk_sglue+0x38>
 800662c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006630:	3301      	adds	r3, #1
 8006632:	d003      	beq.n	800663c <_fwalk_sglue+0x38>
 8006634:	4629      	mov	r1, r5
 8006636:	4638      	mov	r0, r7
 8006638:	47c0      	blx	r8
 800663a:	4306      	orrs	r6, r0
 800663c:	3568      	adds	r5, #104	; 0x68
 800663e:	e7e9      	b.n	8006614 <_fwalk_sglue+0x10>

08006640 <__sread>:
 8006640:	b510      	push	{r4, lr}
 8006642:	460c      	mov	r4, r1
 8006644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006648:	f000 f868 	bl	800671c <_read_r>
 800664c:	2800      	cmp	r0, #0
 800664e:	bfab      	itete	ge
 8006650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006652:	89a3      	ldrhlt	r3, [r4, #12]
 8006654:	181b      	addge	r3, r3, r0
 8006656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800665a:	bfac      	ite	ge
 800665c:	6563      	strge	r3, [r4, #84]	; 0x54
 800665e:	81a3      	strhlt	r3, [r4, #12]
 8006660:	bd10      	pop	{r4, pc}

08006662 <__swrite>:
 8006662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006666:	461f      	mov	r7, r3
 8006668:	898b      	ldrh	r3, [r1, #12]
 800666a:	05db      	lsls	r3, r3, #23
 800666c:	4605      	mov	r5, r0
 800666e:	460c      	mov	r4, r1
 8006670:	4616      	mov	r6, r2
 8006672:	d505      	bpl.n	8006680 <__swrite+0x1e>
 8006674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006678:	2302      	movs	r3, #2
 800667a:	2200      	movs	r2, #0
 800667c:	f000 f83c 	bl	80066f8 <_lseek_r>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	4632      	mov	r2, r6
 800668e:	463b      	mov	r3, r7
 8006690:	4628      	mov	r0, r5
 8006692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006696:	f000 b853 	b.w	8006740 <_write_r>

0800669a <__sseek>:
 800669a:	b510      	push	{r4, lr}
 800669c:	460c      	mov	r4, r1
 800669e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a2:	f000 f829 	bl	80066f8 <_lseek_r>
 80066a6:	1c43      	adds	r3, r0, #1
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	bf15      	itete	ne
 80066ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80066ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066b6:	81a3      	strheq	r3, [r4, #12]
 80066b8:	bf18      	it	ne
 80066ba:	81a3      	strhne	r3, [r4, #12]
 80066bc:	bd10      	pop	{r4, pc}

080066be <__sclose>:
 80066be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c2:	f000 b809 	b.w	80066d8 <_close_r>

080066c6 <memset>:
 80066c6:	4402      	add	r2, r0
 80066c8:	4603      	mov	r3, r0
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d100      	bne.n	80066d0 <memset+0xa>
 80066ce:	4770      	bx	lr
 80066d0:	f803 1b01 	strb.w	r1, [r3], #1
 80066d4:	e7f9      	b.n	80066ca <memset+0x4>
	...

080066d8 <_close_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	4d06      	ldr	r5, [pc, #24]	; (80066f4 <_close_r+0x1c>)
 80066dc:	2300      	movs	r3, #0
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	602b      	str	r3, [r5, #0]
 80066e4:	f7fa fe67 	bl	80013b6 <_close>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_close_r+0x1a>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_close_r+0x1a>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	2000043c 	.word	0x2000043c

080066f8 <_lseek_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d07      	ldr	r5, [pc, #28]	; (8006718 <_lseek_r+0x20>)
 80066fc:	4604      	mov	r4, r0
 80066fe:	4608      	mov	r0, r1
 8006700:	4611      	mov	r1, r2
 8006702:	2200      	movs	r2, #0
 8006704:	602a      	str	r2, [r5, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	f7fa fe7c 	bl	8001404 <_lseek>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_lseek_r+0x1e>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_lseek_r+0x1e>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	2000043c 	.word	0x2000043c

0800671c <_read_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d07      	ldr	r5, [pc, #28]	; (800673c <_read_r+0x20>)
 8006720:	4604      	mov	r4, r0
 8006722:	4608      	mov	r0, r1
 8006724:	4611      	mov	r1, r2
 8006726:	2200      	movs	r2, #0
 8006728:	602a      	str	r2, [r5, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	f7fa fe0a 	bl	8001344 <_read>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d102      	bne.n	800673a <_read_r+0x1e>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	b103      	cbz	r3, 800673a <_read_r+0x1e>
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	2000043c 	.word	0x2000043c

08006740 <_write_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4d07      	ldr	r5, [pc, #28]	; (8006760 <_write_r+0x20>)
 8006744:	4604      	mov	r4, r0
 8006746:	4608      	mov	r0, r1
 8006748:	4611      	mov	r1, r2
 800674a:	2200      	movs	r2, #0
 800674c:	602a      	str	r2, [r5, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	f7fa fe15 	bl	800137e <_write>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_write_r+0x1e>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b103      	cbz	r3, 800675e <_write_r+0x1e>
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	2000043c 	.word	0x2000043c

08006764 <__errno>:
 8006764:	4b01      	ldr	r3, [pc, #4]	; (800676c <__errno+0x8>)
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000068 	.word	0x20000068

08006770 <__libc_init_array>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	4d0d      	ldr	r5, [pc, #52]	; (80067a8 <__libc_init_array+0x38>)
 8006774:	4c0d      	ldr	r4, [pc, #52]	; (80067ac <__libc_init_array+0x3c>)
 8006776:	1b64      	subs	r4, r4, r5
 8006778:	10a4      	asrs	r4, r4, #2
 800677a:	2600      	movs	r6, #0
 800677c:	42a6      	cmp	r6, r4
 800677e:	d109      	bne.n	8006794 <__libc_init_array+0x24>
 8006780:	4d0b      	ldr	r5, [pc, #44]	; (80067b0 <__libc_init_array+0x40>)
 8006782:	4c0c      	ldr	r4, [pc, #48]	; (80067b4 <__libc_init_array+0x44>)
 8006784:	f000 fe42 	bl	800740c <_init>
 8006788:	1b64      	subs	r4, r4, r5
 800678a:	10a4      	asrs	r4, r4, #2
 800678c:	2600      	movs	r6, #0
 800678e:	42a6      	cmp	r6, r4
 8006790:	d105      	bne.n	800679e <__libc_init_array+0x2e>
 8006792:	bd70      	pop	{r4, r5, r6, pc}
 8006794:	f855 3b04 	ldr.w	r3, [r5], #4
 8006798:	4798      	blx	r3
 800679a:	3601      	adds	r6, #1
 800679c:	e7ee      	b.n	800677c <__libc_init_array+0xc>
 800679e:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a2:	4798      	blx	r3
 80067a4:	3601      	adds	r6, #1
 80067a6:	e7f2      	b.n	800678e <__libc_init_array+0x1e>
 80067a8:	0800754c 	.word	0x0800754c
 80067ac:	0800754c 	.word	0x0800754c
 80067b0:	0800754c 	.word	0x0800754c
 80067b4:	08007550 	.word	0x08007550

080067b8 <__retarget_lock_init_recursive>:
 80067b8:	4770      	bx	lr

080067ba <__retarget_lock_acquire_recursive>:
 80067ba:	4770      	bx	lr

080067bc <__retarget_lock_release_recursive>:
 80067bc:	4770      	bx	lr
	...

080067c0 <__assert_func>:
 80067c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067c2:	4614      	mov	r4, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	4b09      	ldr	r3, [pc, #36]	; (80067ec <__assert_func+0x2c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4605      	mov	r5, r0
 80067cc:	68d8      	ldr	r0, [r3, #12]
 80067ce:	b14c      	cbz	r4, 80067e4 <__assert_func+0x24>
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <__assert_func+0x30>)
 80067d2:	9100      	str	r1, [sp, #0]
 80067d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067d8:	4906      	ldr	r1, [pc, #24]	; (80067f4 <__assert_func+0x34>)
 80067da:	462b      	mov	r3, r5
 80067dc:	f000 f9bc 	bl	8006b58 <fiprintf>
 80067e0:	f000 f9dc 	bl	8006b9c <abort>
 80067e4:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <__assert_func+0x38>)
 80067e6:	461c      	mov	r4, r3
 80067e8:	e7f3      	b.n	80067d2 <__assert_func+0x12>
 80067ea:	bf00      	nop
 80067ec:	20000068 	.word	0x20000068
 80067f0:	080074d3 	.word	0x080074d3
 80067f4:	080074e0 	.word	0x080074e0
 80067f8:	0800750e 	.word	0x0800750e

080067fc <_free_r>:
 80067fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067fe:	2900      	cmp	r1, #0
 8006800:	d044      	beq.n	800688c <_free_r+0x90>
 8006802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006806:	9001      	str	r0, [sp, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	f1a1 0404 	sub.w	r4, r1, #4
 800680e:	bfb8      	it	lt
 8006810:	18e4      	addlt	r4, r4, r3
 8006812:	f000 f8e7 	bl	80069e4 <__malloc_lock>
 8006816:	4a1e      	ldr	r2, [pc, #120]	; (8006890 <_free_r+0x94>)
 8006818:	9801      	ldr	r0, [sp, #4]
 800681a:	6813      	ldr	r3, [r2, #0]
 800681c:	b933      	cbnz	r3, 800682c <_free_r+0x30>
 800681e:	6063      	str	r3, [r4, #4]
 8006820:	6014      	str	r4, [r2, #0]
 8006822:	b003      	add	sp, #12
 8006824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006828:	f000 b8e2 	b.w	80069f0 <__malloc_unlock>
 800682c:	42a3      	cmp	r3, r4
 800682e:	d908      	bls.n	8006842 <_free_r+0x46>
 8006830:	6825      	ldr	r5, [r4, #0]
 8006832:	1961      	adds	r1, r4, r5
 8006834:	428b      	cmp	r3, r1
 8006836:	bf01      	itttt	eq
 8006838:	6819      	ldreq	r1, [r3, #0]
 800683a:	685b      	ldreq	r3, [r3, #4]
 800683c:	1949      	addeq	r1, r1, r5
 800683e:	6021      	streq	r1, [r4, #0]
 8006840:	e7ed      	b.n	800681e <_free_r+0x22>
 8006842:	461a      	mov	r2, r3
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	b10b      	cbz	r3, 800684c <_free_r+0x50>
 8006848:	42a3      	cmp	r3, r4
 800684a:	d9fa      	bls.n	8006842 <_free_r+0x46>
 800684c:	6811      	ldr	r1, [r2, #0]
 800684e:	1855      	adds	r5, r2, r1
 8006850:	42a5      	cmp	r5, r4
 8006852:	d10b      	bne.n	800686c <_free_r+0x70>
 8006854:	6824      	ldr	r4, [r4, #0]
 8006856:	4421      	add	r1, r4
 8006858:	1854      	adds	r4, r2, r1
 800685a:	42a3      	cmp	r3, r4
 800685c:	6011      	str	r1, [r2, #0]
 800685e:	d1e0      	bne.n	8006822 <_free_r+0x26>
 8006860:	681c      	ldr	r4, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	6053      	str	r3, [r2, #4]
 8006866:	440c      	add	r4, r1
 8006868:	6014      	str	r4, [r2, #0]
 800686a:	e7da      	b.n	8006822 <_free_r+0x26>
 800686c:	d902      	bls.n	8006874 <_free_r+0x78>
 800686e:	230c      	movs	r3, #12
 8006870:	6003      	str	r3, [r0, #0]
 8006872:	e7d6      	b.n	8006822 <_free_r+0x26>
 8006874:	6825      	ldr	r5, [r4, #0]
 8006876:	1961      	adds	r1, r4, r5
 8006878:	428b      	cmp	r3, r1
 800687a:	bf04      	itt	eq
 800687c:	6819      	ldreq	r1, [r3, #0]
 800687e:	685b      	ldreq	r3, [r3, #4]
 8006880:	6063      	str	r3, [r4, #4]
 8006882:	bf04      	itt	eq
 8006884:	1949      	addeq	r1, r1, r5
 8006886:	6021      	streq	r1, [r4, #0]
 8006888:	6054      	str	r4, [r2, #4]
 800688a:	e7ca      	b.n	8006822 <_free_r+0x26>
 800688c:	b003      	add	sp, #12
 800688e:	bd30      	pop	{r4, r5, pc}
 8006890:	20000444 	.word	0x20000444

08006894 <malloc>:
 8006894:	4b02      	ldr	r3, [pc, #8]	; (80068a0 <malloc+0xc>)
 8006896:	4601      	mov	r1, r0
 8006898:	6818      	ldr	r0, [r3, #0]
 800689a:	f000 b823 	b.w	80068e4 <_malloc_r>
 800689e:	bf00      	nop
 80068a0:	20000068 	.word	0x20000068

080068a4 <sbrk_aligned>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	4e0e      	ldr	r6, [pc, #56]	; (80068e0 <sbrk_aligned+0x3c>)
 80068a8:	460c      	mov	r4, r1
 80068aa:	6831      	ldr	r1, [r6, #0]
 80068ac:	4605      	mov	r5, r0
 80068ae:	b911      	cbnz	r1, 80068b6 <sbrk_aligned+0x12>
 80068b0:	f000 f964 	bl	8006b7c <_sbrk_r>
 80068b4:	6030      	str	r0, [r6, #0]
 80068b6:	4621      	mov	r1, r4
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 f95f 	bl	8006b7c <_sbrk_r>
 80068be:	1c43      	adds	r3, r0, #1
 80068c0:	d00a      	beq.n	80068d8 <sbrk_aligned+0x34>
 80068c2:	1cc4      	adds	r4, r0, #3
 80068c4:	f024 0403 	bic.w	r4, r4, #3
 80068c8:	42a0      	cmp	r0, r4
 80068ca:	d007      	beq.n	80068dc <sbrk_aligned+0x38>
 80068cc:	1a21      	subs	r1, r4, r0
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 f954 	bl	8006b7c <_sbrk_r>
 80068d4:	3001      	adds	r0, #1
 80068d6:	d101      	bne.n	80068dc <sbrk_aligned+0x38>
 80068d8:	f04f 34ff 	mov.w	r4, #4294967295
 80068dc:	4620      	mov	r0, r4
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	20000448 	.word	0x20000448

080068e4 <_malloc_r>:
 80068e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e8:	1ccd      	adds	r5, r1, #3
 80068ea:	f025 0503 	bic.w	r5, r5, #3
 80068ee:	3508      	adds	r5, #8
 80068f0:	2d0c      	cmp	r5, #12
 80068f2:	bf38      	it	cc
 80068f4:	250c      	movcc	r5, #12
 80068f6:	2d00      	cmp	r5, #0
 80068f8:	4607      	mov	r7, r0
 80068fa:	db01      	blt.n	8006900 <_malloc_r+0x1c>
 80068fc:	42a9      	cmp	r1, r5
 80068fe:	d905      	bls.n	800690c <_malloc_r+0x28>
 8006900:	230c      	movs	r3, #12
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	2600      	movs	r6, #0
 8006906:	4630      	mov	r0, r6
 8006908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800690c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80069e0 <_malloc_r+0xfc>
 8006910:	f000 f868 	bl	80069e4 <__malloc_lock>
 8006914:	f8d8 3000 	ldr.w	r3, [r8]
 8006918:	461c      	mov	r4, r3
 800691a:	bb5c      	cbnz	r4, 8006974 <_malloc_r+0x90>
 800691c:	4629      	mov	r1, r5
 800691e:	4638      	mov	r0, r7
 8006920:	f7ff ffc0 	bl	80068a4 <sbrk_aligned>
 8006924:	1c43      	adds	r3, r0, #1
 8006926:	4604      	mov	r4, r0
 8006928:	d155      	bne.n	80069d6 <_malloc_r+0xf2>
 800692a:	f8d8 4000 	ldr.w	r4, [r8]
 800692e:	4626      	mov	r6, r4
 8006930:	2e00      	cmp	r6, #0
 8006932:	d145      	bne.n	80069c0 <_malloc_r+0xdc>
 8006934:	2c00      	cmp	r4, #0
 8006936:	d048      	beq.n	80069ca <_malloc_r+0xe6>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	4631      	mov	r1, r6
 800693c:	4638      	mov	r0, r7
 800693e:	eb04 0903 	add.w	r9, r4, r3
 8006942:	f000 f91b 	bl	8006b7c <_sbrk_r>
 8006946:	4581      	cmp	r9, r0
 8006948:	d13f      	bne.n	80069ca <_malloc_r+0xe6>
 800694a:	6821      	ldr	r1, [r4, #0]
 800694c:	1a6d      	subs	r5, r5, r1
 800694e:	4629      	mov	r1, r5
 8006950:	4638      	mov	r0, r7
 8006952:	f7ff ffa7 	bl	80068a4 <sbrk_aligned>
 8006956:	3001      	adds	r0, #1
 8006958:	d037      	beq.n	80069ca <_malloc_r+0xe6>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	442b      	add	r3, r5
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	f8d8 3000 	ldr.w	r3, [r8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d038      	beq.n	80069da <_malloc_r+0xf6>
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	42a2      	cmp	r2, r4
 800696c:	d12b      	bne.n	80069c6 <_malloc_r+0xe2>
 800696e:	2200      	movs	r2, #0
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	e00f      	b.n	8006994 <_malloc_r+0xb0>
 8006974:	6822      	ldr	r2, [r4, #0]
 8006976:	1b52      	subs	r2, r2, r5
 8006978:	d41f      	bmi.n	80069ba <_malloc_r+0xd6>
 800697a:	2a0b      	cmp	r2, #11
 800697c:	d917      	bls.n	80069ae <_malloc_r+0xca>
 800697e:	1961      	adds	r1, r4, r5
 8006980:	42a3      	cmp	r3, r4
 8006982:	6025      	str	r5, [r4, #0]
 8006984:	bf18      	it	ne
 8006986:	6059      	strne	r1, [r3, #4]
 8006988:	6863      	ldr	r3, [r4, #4]
 800698a:	bf08      	it	eq
 800698c:	f8c8 1000 	streq.w	r1, [r8]
 8006990:	5162      	str	r2, [r4, r5]
 8006992:	604b      	str	r3, [r1, #4]
 8006994:	4638      	mov	r0, r7
 8006996:	f104 060b 	add.w	r6, r4, #11
 800699a:	f000 f829 	bl	80069f0 <__malloc_unlock>
 800699e:	f026 0607 	bic.w	r6, r6, #7
 80069a2:	1d23      	adds	r3, r4, #4
 80069a4:	1af2      	subs	r2, r6, r3
 80069a6:	d0ae      	beq.n	8006906 <_malloc_r+0x22>
 80069a8:	1b9b      	subs	r3, r3, r6
 80069aa:	50a3      	str	r3, [r4, r2]
 80069ac:	e7ab      	b.n	8006906 <_malloc_r+0x22>
 80069ae:	42a3      	cmp	r3, r4
 80069b0:	6862      	ldr	r2, [r4, #4]
 80069b2:	d1dd      	bne.n	8006970 <_malloc_r+0x8c>
 80069b4:	f8c8 2000 	str.w	r2, [r8]
 80069b8:	e7ec      	b.n	8006994 <_malloc_r+0xb0>
 80069ba:	4623      	mov	r3, r4
 80069bc:	6864      	ldr	r4, [r4, #4]
 80069be:	e7ac      	b.n	800691a <_malloc_r+0x36>
 80069c0:	4634      	mov	r4, r6
 80069c2:	6876      	ldr	r6, [r6, #4]
 80069c4:	e7b4      	b.n	8006930 <_malloc_r+0x4c>
 80069c6:	4613      	mov	r3, r2
 80069c8:	e7cc      	b.n	8006964 <_malloc_r+0x80>
 80069ca:	230c      	movs	r3, #12
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	4638      	mov	r0, r7
 80069d0:	f000 f80e 	bl	80069f0 <__malloc_unlock>
 80069d4:	e797      	b.n	8006906 <_malloc_r+0x22>
 80069d6:	6025      	str	r5, [r4, #0]
 80069d8:	e7dc      	b.n	8006994 <_malloc_r+0xb0>
 80069da:	605b      	str	r3, [r3, #4]
 80069dc:	deff      	udf	#255	; 0xff
 80069de:	bf00      	nop
 80069e0:	20000444 	.word	0x20000444

080069e4 <__malloc_lock>:
 80069e4:	4801      	ldr	r0, [pc, #4]	; (80069ec <__malloc_lock+0x8>)
 80069e6:	f7ff bee8 	b.w	80067ba <__retarget_lock_acquire_recursive>
 80069ea:	bf00      	nop
 80069ec:	20000440 	.word	0x20000440

080069f0 <__malloc_unlock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__malloc_unlock+0x8>)
 80069f2:	f7ff bee3 	b.w	80067bc <__retarget_lock_release_recursive>
 80069f6:	bf00      	nop
 80069f8:	20000440 	.word	0x20000440

080069fc <__sflush_r>:
 80069fc:	898a      	ldrh	r2, [r1, #12]
 80069fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a02:	4605      	mov	r5, r0
 8006a04:	0710      	lsls	r0, r2, #28
 8006a06:	460c      	mov	r4, r1
 8006a08:	d458      	bmi.n	8006abc <__sflush_r+0xc0>
 8006a0a:	684b      	ldr	r3, [r1, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	dc05      	bgt.n	8006a1c <__sflush_r+0x20>
 8006a10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dc02      	bgt.n	8006a1c <__sflush_r+0x20>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a1e:	2e00      	cmp	r6, #0
 8006a20:	d0f9      	beq.n	8006a16 <__sflush_r+0x1a>
 8006a22:	2300      	movs	r3, #0
 8006a24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a28:	682f      	ldr	r7, [r5, #0]
 8006a2a:	6a21      	ldr	r1, [r4, #32]
 8006a2c:	602b      	str	r3, [r5, #0]
 8006a2e:	d032      	beq.n	8006a96 <__sflush_r+0x9a>
 8006a30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	075a      	lsls	r2, r3, #29
 8006a36:	d505      	bpl.n	8006a44 <__sflush_r+0x48>
 8006a38:	6863      	ldr	r3, [r4, #4]
 8006a3a:	1ac0      	subs	r0, r0, r3
 8006a3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a3e:	b10b      	cbz	r3, 8006a44 <__sflush_r+0x48>
 8006a40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a42:	1ac0      	subs	r0, r0, r3
 8006a44:	2300      	movs	r3, #0
 8006a46:	4602      	mov	r2, r0
 8006a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a4a:	6a21      	ldr	r1, [r4, #32]
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b0      	blx	r6
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	d106      	bne.n	8006a64 <__sflush_r+0x68>
 8006a56:	6829      	ldr	r1, [r5, #0]
 8006a58:	291d      	cmp	r1, #29
 8006a5a:	d82b      	bhi.n	8006ab4 <__sflush_r+0xb8>
 8006a5c:	4a29      	ldr	r2, [pc, #164]	; (8006b04 <__sflush_r+0x108>)
 8006a5e:	410a      	asrs	r2, r1
 8006a60:	07d6      	lsls	r6, r2, #31
 8006a62:	d427      	bmi.n	8006ab4 <__sflush_r+0xb8>
 8006a64:	2200      	movs	r2, #0
 8006a66:	6062      	str	r2, [r4, #4]
 8006a68:	04d9      	lsls	r1, r3, #19
 8006a6a:	6922      	ldr	r2, [r4, #16]
 8006a6c:	6022      	str	r2, [r4, #0]
 8006a6e:	d504      	bpl.n	8006a7a <__sflush_r+0x7e>
 8006a70:	1c42      	adds	r2, r0, #1
 8006a72:	d101      	bne.n	8006a78 <__sflush_r+0x7c>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b903      	cbnz	r3, 8006a7a <__sflush_r+0x7e>
 8006a78:	6560      	str	r0, [r4, #84]	; 0x54
 8006a7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a7c:	602f      	str	r7, [r5, #0]
 8006a7e:	2900      	cmp	r1, #0
 8006a80:	d0c9      	beq.n	8006a16 <__sflush_r+0x1a>
 8006a82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a86:	4299      	cmp	r1, r3
 8006a88:	d002      	beq.n	8006a90 <__sflush_r+0x94>
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f7ff feb6 	bl	80067fc <_free_r>
 8006a90:	2000      	movs	r0, #0
 8006a92:	6360      	str	r0, [r4, #52]	; 0x34
 8006a94:	e7c0      	b.n	8006a18 <__sflush_r+0x1c>
 8006a96:	2301      	movs	r3, #1
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b0      	blx	r6
 8006a9c:	1c41      	adds	r1, r0, #1
 8006a9e:	d1c8      	bne.n	8006a32 <__sflush_r+0x36>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0c5      	beq.n	8006a32 <__sflush_r+0x36>
 8006aa6:	2b1d      	cmp	r3, #29
 8006aa8:	d001      	beq.n	8006aae <__sflush_r+0xb2>
 8006aaa:	2b16      	cmp	r3, #22
 8006aac:	d101      	bne.n	8006ab2 <__sflush_r+0xb6>
 8006aae:	602f      	str	r7, [r5, #0]
 8006ab0:	e7b1      	b.n	8006a16 <__sflush_r+0x1a>
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	e7ad      	b.n	8006a18 <__sflush_r+0x1c>
 8006abc:	690f      	ldr	r7, [r1, #16]
 8006abe:	2f00      	cmp	r7, #0
 8006ac0:	d0a9      	beq.n	8006a16 <__sflush_r+0x1a>
 8006ac2:	0793      	lsls	r3, r2, #30
 8006ac4:	680e      	ldr	r6, [r1, #0]
 8006ac6:	bf08      	it	eq
 8006ac8:	694b      	ldreq	r3, [r1, #20]
 8006aca:	600f      	str	r7, [r1, #0]
 8006acc:	bf18      	it	ne
 8006ace:	2300      	movne	r3, #0
 8006ad0:	eba6 0807 	sub.w	r8, r6, r7
 8006ad4:	608b      	str	r3, [r1, #8]
 8006ad6:	f1b8 0f00 	cmp.w	r8, #0
 8006ada:	dd9c      	ble.n	8006a16 <__sflush_r+0x1a>
 8006adc:	6a21      	ldr	r1, [r4, #32]
 8006ade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ae0:	4643      	mov	r3, r8
 8006ae2:	463a      	mov	r2, r7
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	47b0      	blx	r6
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	dc06      	bgt.n	8006afa <__sflush_r+0xfe>
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e78e      	b.n	8006a18 <__sflush_r+0x1c>
 8006afa:	4407      	add	r7, r0
 8006afc:	eba8 0800 	sub.w	r8, r8, r0
 8006b00:	e7e9      	b.n	8006ad6 <__sflush_r+0xda>
 8006b02:	bf00      	nop
 8006b04:	dfbffffe 	.word	0xdfbffffe

08006b08 <_fflush_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	690b      	ldr	r3, [r1, #16]
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	b913      	cbnz	r3, 8006b18 <_fflush_r+0x10>
 8006b12:	2500      	movs	r5, #0
 8006b14:	4628      	mov	r0, r5
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	b118      	cbz	r0, 8006b22 <_fflush_r+0x1a>
 8006b1a:	6a03      	ldr	r3, [r0, #32]
 8006b1c:	b90b      	cbnz	r3, 8006b22 <_fflush_r+0x1a>
 8006b1e:	f7ff fd59 	bl	80065d4 <__sinit>
 8006b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f3      	beq.n	8006b12 <_fflush_r+0xa>
 8006b2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b2c:	07d0      	lsls	r0, r2, #31
 8006b2e:	d404      	bmi.n	8006b3a <_fflush_r+0x32>
 8006b30:	0599      	lsls	r1, r3, #22
 8006b32:	d402      	bmi.n	8006b3a <_fflush_r+0x32>
 8006b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b36:	f7ff fe40 	bl	80067ba <__retarget_lock_acquire_recursive>
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	f7ff ff5d 	bl	80069fc <__sflush_r>
 8006b42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b44:	07da      	lsls	r2, r3, #31
 8006b46:	4605      	mov	r5, r0
 8006b48:	d4e4      	bmi.n	8006b14 <_fflush_r+0xc>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	059b      	lsls	r3, r3, #22
 8006b4e:	d4e1      	bmi.n	8006b14 <_fflush_r+0xc>
 8006b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b52:	f7ff fe33 	bl	80067bc <__retarget_lock_release_recursive>
 8006b56:	e7dd      	b.n	8006b14 <_fflush_r+0xc>

08006b58 <fiprintf>:
 8006b58:	b40e      	push	{r1, r2, r3}
 8006b5a:	b503      	push	{r0, r1, lr}
 8006b5c:	4601      	mov	r1, r0
 8006b5e:	ab03      	add	r3, sp, #12
 8006b60:	4805      	ldr	r0, [pc, #20]	; (8006b78 <fiprintf+0x20>)
 8006b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b66:	6800      	ldr	r0, [r0, #0]
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	f000 f847 	bl	8006bfc <_vfiprintf_r>
 8006b6e:	b002      	add	sp, #8
 8006b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b74:	b003      	add	sp, #12
 8006b76:	4770      	bx	lr
 8006b78:	20000068 	.word	0x20000068

08006b7c <_sbrk_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4d06      	ldr	r5, [pc, #24]	; (8006b98 <_sbrk_r+0x1c>)
 8006b80:	2300      	movs	r3, #0
 8006b82:	4604      	mov	r4, r0
 8006b84:	4608      	mov	r0, r1
 8006b86:	602b      	str	r3, [r5, #0]
 8006b88:	f7fa fc4a 	bl	8001420 <_sbrk>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_sbrk_r+0x1a>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_sbrk_r+0x1a>
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	2000043c 	.word	0x2000043c

08006b9c <abort>:
 8006b9c:	b508      	push	{r3, lr}
 8006b9e:	2006      	movs	r0, #6
 8006ba0:	f000 fb94 	bl	80072cc <raise>
 8006ba4:	2001      	movs	r0, #1
 8006ba6:	f7fa fbc3 	bl	8001330 <_exit>

08006baa <__sfputc_r>:
 8006baa:	6893      	ldr	r3, [r2, #8]
 8006bac:	3b01      	subs	r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	b410      	push	{r4}
 8006bb2:	6093      	str	r3, [r2, #8]
 8006bb4:	da08      	bge.n	8006bc8 <__sfputc_r+0x1e>
 8006bb6:	6994      	ldr	r4, [r2, #24]
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	db01      	blt.n	8006bc0 <__sfputc_r+0x16>
 8006bbc:	290a      	cmp	r1, #10
 8006bbe:	d103      	bne.n	8006bc8 <__sfputc_r+0x1e>
 8006bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bc4:	f000 bac4 	b.w	8007150 <__swbuf_r>
 8006bc8:	6813      	ldr	r3, [r2, #0]
 8006bca:	1c58      	adds	r0, r3, #1
 8006bcc:	6010      	str	r0, [r2, #0]
 8006bce:	7019      	strb	r1, [r3, #0]
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <__sfputs_r>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	4606      	mov	r6, r0
 8006bdc:	460f      	mov	r7, r1
 8006bde:	4614      	mov	r4, r2
 8006be0:	18d5      	adds	r5, r2, r3
 8006be2:	42ac      	cmp	r4, r5
 8006be4:	d101      	bne.n	8006bea <__sfputs_r+0x12>
 8006be6:	2000      	movs	r0, #0
 8006be8:	e007      	b.n	8006bfa <__sfputs_r+0x22>
 8006bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bee:	463a      	mov	r2, r7
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f7ff ffda 	bl	8006baa <__sfputc_r>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	d1f3      	bne.n	8006be2 <__sfputs_r+0xa>
 8006bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006bfc <_vfiprintf_r>:
 8006bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c00:	460d      	mov	r5, r1
 8006c02:	b09d      	sub	sp, #116	; 0x74
 8006c04:	4614      	mov	r4, r2
 8006c06:	4698      	mov	r8, r3
 8006c08:	4606      	mov	r6, r0
 8006c0a:	b118      	cbz	r0, 8006c14 <_vfiprintf_r+0x18>
 8006c0c:	6a03      	ldr	r3, [r0, #32]
 8006c0e:	b90b      	cbnz	r3, 8006c14 <_vfiprintf_r+0x18>
 8006c10:	f7ff fce0 	bl	80065d4 <__sinit>
 8006c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c16:	07d9      	lsls	r1, r3, #31
 8006c18:	d405      	bmi.n	8006c26 <_vfiprintf_r+0x2a>
 8006c1a:	89ab      	ldrh	r3, [r5, #12]
 8006c1c:	059a      	lsls	r2, r3, #22
 8006c1e:	d402      	bmi.n	8006c26 <_vfiprintf_r+0x2a>
 8006c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c22:	f7ff fdca 	bl	80067ba <__retarget_lock_acquire_recursive>
 8006c26:	89ab      	ldrh	r3, [r5, #12]
 8006c28:	071b      	lsls	r3, r3, #28
 8006c2a:	d501      	bpl.n	8006c30 <_vfiprintf_r+0x34>
 8006c2c:	692b      	ldr	r3, [r5, #16]
 8006c2e:	b99b      	cbnz	r3, 8006c58 <_vfiprintf_r+0x5c>
 8006c30:	4629      	mov	r1, r5
 8006c32:	4630      	mov	r0, r6
 8006c34:	f000 faca 	bl	80071cc <__swsetup_r>
 8006c38:	b170      	cbz	r0, 8006c58 <_vfiprintf_r+0x5c>
 8006c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c3c:	07dc      	lsls	r4, r3, #31
 8006c3e:	d504      	bpl.n	8006c4a <_vfiprintf_r+0x4e>
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	b01d      	add	sp, #116	; 0x74
 8006c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c4a:	89ab      	ldrh	r3, [r5, #12]
 8006c4c:	0598      	lsls	r0, r3, #22
 8006c4e:	d4f7      	bmi.n	8006c40 <_vfiprintf_r+0x44>
 8006c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c52:	f7ff fdb3 	bl	80067bc <__retarget_lock_release_recursive>
 8006c56:	e7f3      	b.n	8006c40 <_vfiprintf_r+0x44>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c5c:	2320      	movs	r3, #32
 8006c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c66:	2330      	movs	r3, #48	; 0x30
 8006c68:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006e1c <_vfiprintf_r+0x220>
 8006c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c70:	f04f 0901 	mov.w	r9, #1
 8006c74:	4623      	mov	r3, r4
 8006c76:	469a      	mov	sl, r3
 8006c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c7c:	b10a      	cbz	r2, 8006c82 <_vfiprintf_r+0x86>
 8006c7e:	2a25      	cmp	r2, #37	; 0x25
 8006c80:	d1f9      	bne.n	8006c76 <_vfiprintf_r+0x7a>
 8006c82:	ebba 0b04 	subs.w	fp, sl, r4
 8006c86:	d00b      	beq.n	8006ca0 <_vfiprintf_r+0xa4>
 8006c88:	465b      	mov	r3, fp
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4630      	mov	r0, r6
 8006c90:	f7ff ffa2 	bl	8006bd8 <__sfputs_r>
 8006c94:	3001      	adds	r0, #1
 8006c96:	f000 80a9 	beq.w	8006dec <_vfiprintf_r+0x1f0>
 8006c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c9c:	445a      	add	r2, fp
 8006c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8006ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80a1 	beq.w	8006dec <_vfiprintf_r+0x1f0>
 8006caa:	2300      	movs	r3, #0
 8006cac:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cb4:	f10a 0a01 	add.w	sl, sl, #1
 8006cb8:	9304      	str	r3, [sp, #16]
 8006cba:	9307      	str	r3, [sp, #28]
 8006cbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cc0:	931a      	str	r3, [sp, #104]	; 0x68
 8006cc2:	4654      	mov	r4, sl
 8006cc4:	2205      	movs	r2, #5
 8006cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cca:	4854      	ldr	r0, [pc, #336]	; (8006e1c <_vfiprintf_r+0x220>)
 8006ccc:	f7f9 faa8 	bl	8000220 <memchr>
 8006cd0:	9a04      	ldr	r2, [sp, #16]
 8006cd2:	b9d8      	cbnz	r0, 8006d0c <_vfiprintf_r+0x110>
 8006cd4:	06d1      	lsls	r1, r2, #27
 8006cd6:	bf44      	itt	mi
 8006cd8:	2320      	movmi	r3, #32
 8006cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cde:	0713      	lsls	r3, r2, #28
 8006ce0:	bf44      	itt	mi
 8006ce2:	232b      	movmi	r3, #43	; 0x2b
 8006ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cec:	2b2a      	cmp	r3, #42	; 0x2a
 8006cee:	d015      	beq.n	8006d1c <_vfiprintf_r+0x120>
 8006cf0:	9a07      	ldr	r2, [sp, #28]
 8006cf2:	4654      	mov	r4, sl
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	f04f 0c0a 	mov.w	ip, #10
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d00:	3b30      	subs	r3, #48	; 0x30
 8006d02:	2b09      	cmp	r3, #9
 8006d04:	d94d      	bls.n	8006da2 <_vfiprintf_r+0x1a6>
 8006d06:	b1b0      	cbz	r0, 8006d36 <_vfiprintf_r+0x13a>
 8006d08:	9207      	str	r2, [sp, #28]
 8006d0a:	e014      	b.n	8006d36 <_vfiprintf_r+0x13a>
 8006d0c:	eba0 0308 	sub.w	r3, r0, r8
 8006d10:	fa09 f303 	lsl.w	r3, r9, r3
 8006d14:	4313      	orrs	r3, r2
 8006d16:	9304      	str	r3, [sp, #16]
 8006d18:	46a2      	mov	sl, r4
 8006d1a:	e7d2      	b.n	8006cc2 <_vfiprintf_r+0xc6>
 8006d1c:	9b03      	ldr	r3, [sp, #12]
 8006d1e:	1d19      	adds	r1, r3, #4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	9103      	str	r1, [sp, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	bfbb      	ittet	lt
 8006d28:	425b      	neglt	r3, r3
 8006d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d2e:	9307      	strge	r3, [sp, #28]
 8006d30:	9307      	strlt	r3, [sp, #28]
 8006d32:	bfb8      	it	lt
 8006d34:	9204      	strlt	r2, [sp, #16]
 8006d36:	7823      	ldrb	r3, [r4, #0]
 8006d38:	2b2e      	cmp	r3, #46	; 0x2e
 8006d3a:	d10c      	bne.n	8006d56 <_vfiprintf_r+0x15a>
 8006d3c:	7863      	ldrb	r3, [r4, #1]
 8006d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d40:	d134      	bne.n	8006dac <_vfiprintf_r+0x1b0>
 8006d42:	9b03      	ldr	r3, [sp, #12]
 8006d44:	1d1a      	adds	r2, r3, #4
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	9203      	str	r2, [sp, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bfb8      	it	lt
 8006d4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d52:	3402      	adds	r4, #2
 8006d54:	9305      	str	r3, [sp, #20]
 8006d56:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006e2c <_vfiprintf_r+0x230>
 8006d5a:	7821      	ldrb	r1, [r4, #0]
 8006d5c:	2203      	movs	r2, #3
 8006d5e:	4650      	mov	r0, sl
 8006d60:	f7f9 fa5e 	bl	8000220 <memchr>
 8006d64:	b138      	cbz	r0, 8006d76 <_vfiprintf_r+0x17a>
 8006d66:	9b04      	ldr	r3, [sp, #16]
 8006d68:	eba0 000a 	sub.w	r0, r0, sl
 8006d6c:	2240      	movs	r2, #64	; 0x40
 8006d6e:	4082      	lsls	r2, r0
 8006d70:	4313      	orrs	r3, r2
 8006d72:	3401      	adds	r4, #1
 8006d74:	9304      	str	r3, [sp, #16]
 8006d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d7a:	4829      	ldr	r0, [pc, #164]	; (8006e20 <_vfiprintf_r+0x224>)
 8006d7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d80:	2206      	movs	r2, #6
 8006d82:	f7f9 fa4d 	bl	8000220 <memchr>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d03f      	beq.n	8006e0a <_vfiprintf_r+0x20e>
 8006d8a:	4b26      	ldr	r3, [pc, #152]	; (8006e24 <_vfiprintf_r+0x228>)
 8006d8c:	bb1b      	cbnz	r3, 8006dd6 <_vfiprintf_r+0x1da>
 8006d8e:	9b03      	ldr	r3, [sp, #12]
 8006d90:	3307      	adds	r3, #7
 8006d92:	f023 0307 	bic.w	r3, r3, #7
 8006d96:	3308      	adds	r3, #8
 8006d98:	9303      	str	r3, [sp, #12]
 8006d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9c:	443b      	add	r3, r7
 8006d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006da0:	e768      	b.n	8006c74 <_vfiprintf_r+0x78>
 8006da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006da6:	460c      	mov	r4, r1
 8006da8:	2001      	movs	r0, #1
 8006daa:	e7a6      	b.n	8006cfa <_vfiprintf_r+0xfe>
 8006dac:	2300      	movs	r3, #0
 8006dae:	3401      	adds	r4, #1
 8006db0:	9305      	str	r3, [sp, #20]
 8006db2:	4619      	mov	r1, r3
 8006db4:	f04f 0c0a 	mov.w	ip, #10
 8006db8:	4620      	mov	r0, r4
 8006dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dbe:	3a30      	subs	r2, #48	; 0x30
 8006dc0:	2a09      	cmp	r2, #9
 8006dc2:	d903      	bls.n	8006dcc <_vfiprintf_r+0x1d0>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0c6      	beq.n	8006d56 <_vfiprintf_r+0x15a>
 8006dc8:	9105      	str	r1, [sp, #20]
 8006dca:	e7c4      	b.n	8006d56 <_vfiprintf_r+0x15a>
 8006dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e7f0      	b.n	8006db8 <_vfiprintf_r+0x1bc>
 8006dd6:	ab03      	add	r3, sp, #12
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	462a      	mov	r2, r5
 8006ddc:	4b12      	ldr	r3, [pc, #72]	; (8006e28 <_vfiprintf_r+0x22c>)
 8006dde:	a904      	add	r1, sp, #16
 8006de0:	4630      	mov	r0, r6
 8006de2:	f3af 8000 	nop.w
 8006de6:	4607      	mov	r7, r0
 8006de8:	1c78      	adds	r0, r7, #1
 8006dea:	d1d6      	bne.n	8006d9a <_vfiprintf_r+0x19e>
 8006dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dee:	07d9      	lsls	r1, r3, #31
 8006df0:	d405      	bmi.n	8006dfe <_vfiprintf_r+0x202>
 8006df2:	89ab      	ldrh	r3, [r5, #12]
 8006df4:	059a      	lsls	r2, r3, #22
 8006df6:	d402      	bmi.n	8006dfe <_vfiprintf_r+0x202>
 8006df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dfa:	f7ff fcdf 	bl	80067bc <__retarget_lock_release_recursive>
 8006dfe:	89ab      	ldrh	r3, [r5, #12]
 8006e00:	065b      	lsls	r3, r3, #25
 8006e02:	f53f af1d 	bmi.w	8006c40 <_vfiprintf_r+0x44>
 8006e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e08:	e71c      	b.n	8006c44 <_vfiprintf_r+0x48>
 8006e0a:	ab03      	add	r3, sp, #12
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	462a      	mov	r2, r5
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <_vfiprintf_r+0x22c>)
 8006e12:	a904      	add	r1, sp, #16
 8006e14:	4630      	mov	r0, r6
 8006e16:	f000 f879 	bl	8006f0c <_printf_i>
 8006e1a:	e7e4      	b.n	8006de6 <_vfiprintf_r+0x1ea>
 8006e1c:	0800750f 	.word	0x0800750f
 8006e20:	08007519 	.word	0x08007519
 8006e24:	00000000 	.word	0x00000000
 8006e28:	08006bd9 	.word	0x08006bd9
 8006e2c:	08007515 	.word	0x08007515

08006e30 <_printf_common>:
 8006e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e34:	4616      	mov	r6, r2
 8006e36:	4699      	mov	r9, r3
 8006e38:	688a      	ldr	r2, [r1, #8]
 8006e3a:	690b      	ldr	r3, [r1, #16]
 8006e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e40:	4293      	cmp	r3, r2
 8006e42:	bfb8      	it	lt
 8006e44:	4613      	movlt	r3, r2
 8006e46:	6033      	str	r3, [r6, #0]
 8006e48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e4c:	4607      	mov	r7, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	b10a      	cbz	r2, 8006e56 <_printf_common+0x26>
 8006e52:	3301      	adds	r3, #1
 8006e54:	6033      	str	r3, [r6, #0]
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	0699      	lsls	r1, r3, #26
 8006e5a:	bf42      	ittt	mi
 8006e5c:	6833      	ldrmi	r3, [r6, #0]
 8006e5e:	3302      	addmi	r3, #2
 8006e60:	6033      	strmi	r3, [r6, #0]
 8006e62:	6825      	ldr	r5, [r4, #0]
 8006e64:	f015 0506 	ands.w	r5, r5, #6
 8006e68:	d106      	bne.n	8006e78 <_printf_common+0x48>
 8006e6a:	f104 0a19 	add.w	sl, r4, #25
 8006e6e:	68e3      	ldr	r3, [r4, #12]
 8006e70:	6832      	ldr	r2, [r6, #0]
 8006e72:	1a9b      	subs	r3, r3, r2
 8006e74:	42ab      	cmp	r3, r5
 8006e76:	dc26      	bgt.n	8006ec6 <_printf_common+0x96>
 8006e78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e7c:	1e13      	subs	r3, r2, #0
 8006e7e:	6822      	ldr	r2, [r4, #0]
 8006e80:	bf18      	it	ne
 8006e82:	2301      	movne	r3, #1
 8006e84:	0692      	lsls	r2, r2, #26
 8006e86:	d42b      	bmi.n	8006ee0 <_printf_common+0xb0>
 8006e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	4638      	mov	r0, r7
 8006e90:	47c0      	blx	r8
 8006e92:	3001      	adds	r0, #1
 8006e94:	d01e      	beq.n	8006ed4 <_printf_common+0xa4>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	6922      	ldr	r2, [r4, #16]
 8006e9a:	f003 0306 	and.w	r3, r3, #6
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	bf02      	ittt	eq
 8006ea2:	68e5      	ldreq	r5, [r4, #12]
 8006ea4:	6833      	ldreq	r3, [r6, #0]
 8006ea6:	1aed      	subeq	r5, r5, r3
 8006ea8:	68a3      	ldr	r3, [r4, #8]
 8006eaa:	bf0c      	ite	eq
 8006eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb0:	2500      	movne	r5, #0
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	bfc4      	itt	gt
 8006eb6:	1a9b      	subgt	r3, r3, r2
 8006eb8:	18ed      	addgt	r5, r5, r3
 8006eba:	2600      	movs	r6, #0
 8006ebc:	341a      	adds	r4, #26
 8006ebe:	42b5      	cmp	r5, r6
 8006ec0:	d11a      	bne.n	8006ef8 <_printf_common+0xc8>
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	e008      	b.n	8006ed8 <_printf_common+0xa8>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4652      	mov	r2, sl
 8006eca:	4649      	mov	r1, r9
 8006ecc:	4638      	mov	r0, r7
 8006ece:	47c0      	blx	r8
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d103      	bne.n	8006edc <_printf_common+0xac>
 8006ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006edc:	3501      	adds	r5, #1
 8006ede:	e7c6      	b.n	8006e6e <_printf_common+0x3e>
 8006ee0:	18e1      	adds	r1, r4, r3
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	2030      	movs	r0, #48	; 0x30
 8006ee6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eea:	4422      	add	r2, r4
 8006eec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ef0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ef4:	3302      	adds	r3, #2
 8006ef6:	e7c7      	b.n	8006e88 <_printf_common+0x58>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	4622      	mov	r2, r4
 8006efc:	4649      	mov	r1, r9
 8006efe:	4638      	mov	r0, r7
 8006f00:	47c0      	blx	r8
 8006f02:	3001      	adds	r0, #1
 8006f04:	d0e6      	beq.n	8006ed4 <_printf_common+0xa4>
 8006f06:	3601      	adds	r6, #1
 8006f08:	e7d9      	b.n	8006ebe <_printf_common+0x8e>
	...

08006f0c <_printf_i>:
 8006f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f10:	7e0f      	ldrb	r7, [r1, #24]
 8006f12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f14:	2f78      	cmp	r7, #120	; 0x78
 8006f16:	4691      	mov	r9, r2
 8006f18:	4680      	mov	r8, r0
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	469a      	mov	sl, r3
 8006f1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f22:	d807      	bhi.n	8006f34 <_printf_i+0x28>
 8006f24:	2f62      	cmp	r7, #98	; 0x62
 8006f26:	d80a      	bhi.n	8006f3e <_printf_i+0x32>
 8006f28:	2f00      	cmp	r7, #0
 8006f2a:	f000 80d4 	beq.w	80070d6 <_printf_i+0x1ca>
 8006f2e:	2f58      	cmp	r7, #88	; 0x58
 8006f30:	f000 80c0 	beq.w	80070b4 <_printf_i+0x1a8>
 8006f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f3c:	e03a      	b.n	8006fb4 <_printf_i+0xa8>
 8006f3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f42:	2b15      	cmp	r3, #21
 8006f44:	d8f6      	bhi.n	8006f34 <_printf_i+0x28>
 8006f46:	a101      	add	r1, pc, #4	; (adr r1, 8006f4c <_printf_i+0x40>)
 8006f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f4c:	08006fa5 	.word	0x08006fa5
 8006f50:	08006fb9 	.word	0x08006fb9
 8006f54:	08006f35 	.word	0x08006f35
 8006f58:	08006f35 	.word	0x08006f35
 8006f5c:	08006f35 	.word	0x08006f35
 8006f60:	08006f35 	.word	0x08006f35
 8006f64:	08006fb9 	.word	0x08006fb9
 8006f68:	08006f35 	.word	0x08006f35
 8006f6c:	08006f35 	.word	0x08006f35
 8006f70:	08006f35 	.word	0x08006f35
 8006f74:	08006f35 	.word	0x08006f35
 8006f78:	080070bd 	.word	0x080070bd
 8006f7c:	08006fe5 	.word	0x08006fe5
 8006f80:	08007077 	.word	0x08007077
 8006f84:	08006f35 	.word	0x08006f35
 8006f88:	08006f35 	.word	0x08006f35
 8006f8c:	080070df 	.word	0x080070df
 8006f90:	08006f35 	.word	0x08006f35
 8006f94:	08006fe5 	.word	0x08006fe5
 8006f98:	08006f35 	.word	0x08006f35
 8006f9c:	08006f35 	.word	0x08006f35
 8006fa0:	0800707f 	.word	0x0800707f
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	1d1a      	adds	r2, r3, #4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	602a      	str	r2, [r5, #0]
 8006fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e09f      	b.n	80070f8 <_printf_i+0x1ec>
 8006fb8:	6820      	ldr	r0, [r4, #0]
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	0607      	lsls	r7, r0, #24
 8006fbe:	f103 0104 	add.w	r1, r3, #4
 8006fc2:	6029      	str	r1, [r5, #0]
 8006fc4:	d501      	bpl.n	8006fca <_printf_i+0xbe>
 8006fc6:	681e      	ldr	r6, [r3, #0]
 8006fc8:	e003      	b.n	8006fd2 <_printf_i+0xc6>
 8006fca:	0646      	lsls	r6, r0, #25
 8006fcc:	d5fb      	bpl.n	8006fc6 <_printf_i+0xba>
 8006fce:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006fd2:	2e00      	cmp	r6, #0
 8006fd4:	da03      	bge.n	8006fde <_printf_i+0xd2>
 8006fd6:	232d      	movs	r3, #45	; 0x2d
 8006fd8:	4276      	negs	r6, r6
 8006fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fde:	485a      	ldr	r0, [pc, #360]	; (8007148 <_printf_i+0x23c>)
 8006fe0:	230a      	movs	r3, #10
 8006fe2:	e012      	b.n	800700a <_printf_i+0xfe>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	6820      	ldr	r0, [r4, #0]
 8006fe8:	1d19      	adds	r1, r3, #4
 8006fea:	6029      	str	r1, [r5, #0]
 8006fec:	0605      	lsls	r5, r0, #24
 8006fee:	d501      	bpl.n	8006ff4 <_printf_i+0xe8>
 8006ff0:	681e      	ldr	r6, [r3, #0]
 8006ff2:	e002      	b.n	8006ffa <_printf_i+0xee>
 8006ff4:	0641      	lsls	r1, r0, #25
 8006ff6:	d5fb      	bpl.n	8006ff0 <_printf_i+0xe4>
 8006ff8:	881e      	ldrh	r6, [r3, #0]
 8006ffa:	4853      	ldr	r0, [pc, #332]	; (8007148 <_printf_i+0x23c>)
 8006ffc:	2f6f      	cmp	r7, #111	; 0x6f
 8006ffe:	bf0c      	ite	eq
 8007000:	2308      	moveq	r3, #8
 8007002:	230a      	movne	r3, #10
 8007004:	2100      	movs	r1, #0
 8007006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800700a:	6865      	ldr	r5, [r4, #4]
 800700c:	60a5      	str	r5, [r4, #8]
 800700e:	2d00      	cmp	r5, #0
 8007010:	bfa2      	ittt	ge
 8007012:	6821      	ldrge	r1, [r4, #0]
 8007014:	f021 0104 	bicge.w	r1, r1, #4
 8007018:	6021      	strge	r1, [r4, #0]
 800701a:	b90e      	cbnz	r6, 8007020 <_printf_i+0x114>
 800701c:	2d00      	cmp	r5, #0
 800701e:	d04b      	beq.n	80070b8 <_printf_i+0x1ac>
 8007020:	4615      	mov	r5, r2
 8007022:	fbb6 f1f3 	udiv	r1, r6, r3
 8007026:	fb03 6711 	mls	r7, r3, r1, r6
 800702a:	5dc7      	ldrb	r7, [r0, r7]
 800702c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007030:	4637      	mov	r7, r6
 8007032:	42bb      	cmp	r3, r7
 8007034:	460e      	mov	r6, r1
 8007036:	d9f4      	bls.n	8007022 <_printf_i+0x116>
 8007038:	2b08      	cmp	r3, #8
 800703a:	d10b      	bne.n	8007054 <_printf_i+0x148>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	07de      	lsls	r6, r3, #31
 8007040:	d508      	bpl.n	8007054 <_printf_i+0x148>
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	6861      	ldr	r1, [r4, #4]
 8007046:	4299      	cmp	r1, r3
 8007048:	bfde      	ittt	le
 800704a:	2330      	movle	r3, #48	; 0x30
 800704c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007050:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007054:	1b52      	subs	r2, r2, r5
 8007056:	6122      	str	r2, [r4, #16]
 8007058:	f8cd a000 	str.w	sl, [sp]
 800705c:	464b      	mov	r3, r9
 800705e:	aa03      	add	r2, sp, #12
 8007060:	4621      	mov	r1, r4
 8007062:	4640      	mov	r0, r8
 8007064:	f7ff fee4 	bl	8006e30 <_printf_common>
 8007068:	3001      	adds	r0, #1
 800706a:	d14a      	bne.n	8007102 <_printf_i+0x1f6>
 800706c:	f04f 30ff 	mov.w	r0, #4294967295
 8007070:	b004      	add	sp, #16
 8007072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	f043 0320 	orr.w	r3, r3, #32
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	4833      	ldr	r0, [pc, #204]	; (800714c <_printf_i+0x240>)
 8007080:	2778      	movs	r7, #120	; 0x78
 8007082:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	6829      	ldr	r1, [r5, #0]
 800708a:	061f      	lsls	r7, r3, #24
 800708c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007090:	d402      	bmi.n	8007098 <_printf_i+0x18c>
 8007092:	065f      	lsls	r7, r3, #25
 8007094:	bf48      	it	mi
 8007096:	b2b6      	uxthmi	r6, r6
 8007098:	07df      	lsls	r7, r3, #31
 800709a:	bf48      	it	mi
 800709c:	f043 0320 	orrmi.w	r3, r3, #32
 80070a0:	6029      	str	r1, [r5, #0]
 80070a2:	bf48      	it	mi
 80070a4:	6023      	strmi	r3, [r4, #0]
 80070a6:	b91e      	cbnz	r6, 80070b0 <_printf_i+0x1a4>
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	f023 0320 	bic.w	r3, r3, #32
 80070ae:	6023      	str	r3, [r4, #0]
 80070b0:	2310      	movs	r3, #16
 80070b2:	e7a7      	b.n	8007004 <_printf_i+0xf8>
 80070b4:	4824      	ldr	r0, [pc, #144]	; (8007148 <_printf_i+0x23c>)
 80070b6:	e7e4      	b.n	8007082 <_printf_i+0x176>
 80070b8:	4615      	mov	r5, r2
 80070ba:	e7bd      	b.n	8007038 <_printf_i+0x12c>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	6826      	ldr	r6, [r4, #0]
 80070c0:	6961      	ldr	r1, [r4, #20]
 80070c2:	1d18      	adds	r0, r3, #4
 80070c4:	6028      	str	r0, [r5, #0]
 80070c6:	0635      	lsls	r5, r6, #24
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	d501      	bpl.n	80070d0 <_printf_i+0x1c4>
 80070cc:	6019      	str	r1, [r3, #0]
 80070ce:	e002      	b.n	80070d6 <_printf_i+0x1ca>
 80070d0:	0670      	lsls	r0, r6, #25
 80070d2:	d5fb      	bpl.n	80070cc <_printf_i+0x1c0>
 80070d4:	8019      	strh	r1, [r3, #0]
 80070d6:	2300      	movs	r3, #0
 80070d8:	6123      	str	r3, [r4, #16]
 80070da:	4615      	mov	r5, r2
 80070dc:	e7bc      	b.n	8007058 <_printf_i+0x14c>
 80070de:	682b      	ldr	r3, [r5, #0]
 80070e0:	1d1a      	adds	r2, r3, #4
 80070e2:	602a      	str	r2, [r5, #0]
 80070e4:	681d      	ldr	r5, [r3, #0]
 80070e6:	6862      	ldr	r2, [r4, #4]
 80070e8:	2100      	movs	r1, #0
 80070ea:	4628      	mov	r0, r5
 80070ec:	f7f9 f898 	bl	8000220 <memchr>
 80070f0:	b108      	cbz	r0, 80070f6 <_printf_i+0x1ea>
 80070f2:	1b40      	subs	r0, r0, r5
 80070f4:	6060      	str	r0, [r4, #4]
 80070f6:	6863      	ldr	r3, [r4, #4]
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	2300      	movs	r3, #0
 80070fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007100:	e7aa      	b.n	8007058 <_printf_i+0x14c>
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	462a      	mov	r2, r5
 8007106:	4649      	mov	r1, r9
 8007108:	4640      	mov	r0, r8
 800710a:	47d0      	blx	sl
 800710c:	3001      	adds	r0, #1
 800710e:	d0ad      	beq.n	800706c <_printf_i+0x160>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	079b      	lsls	r3, r3, #30
 8007114:	d413      	bmi.n	800713e <_printf_i+0x232>
 8007116:	68e0      	ldr	r0, [r4, #12]
 8007118:	9b03      	ldr	r3, [sp, #12]
 800711a:	4298      	cmp	r0, r3
 800711c:	bfb8      	it	lt
 800711e:	4618      	movlt	r0, r3
 8007120:	e7a6      	b.n	8007070 <_printf_i+0x164>
 8007122:	2301      	movs	r3, #1
 8007124:	4632      	mov	r2, r6
 8007126:	4649      	mov	r1, r9
 8007128:	4640      	mov	r0, r8
 800712a:	47d0      	blx	sl
 800712c:	3001      	adds	r0, #1
 800712e:	d09d      	beq.n	800706c <_printf_i+0x160>
 8007130:	3501      	adds	r5, #1
 8007132:	68e3      	ldr	r3, [r4, #12]
 8007134:	9903      	ldr	r1, [sp, #12]
 8007136:	1a5b      	subs	r3, r3, r1
 8007138:	42ab      	cmp	r3, r5
 800713a:	dcf2      	bgt.n	8007122 <_printf_i+0x216>
 800713c:	e7eb      	b.n	8007116 <_printf_i+0x20a>
 800713e:	2500      	movs	r5, #0
 8007140:	f104 0619 	add.w	r6, r4, #25
 8007144:	e7f5      	b.n	8007132 <_printf_i+0x226>
 8007146:	bf00      	nop
 8007148:	08007520 	.word	0x08007520
 800714c:	08007531 	.word	0x08007531

08007150 <__swbuf_r>:
 8007150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007152:	460e      	mov	r6, r1
 8007154:	4614      	mov	r4, r2
 8007156:	4605      	mov	r5, r0
 8007158:	b118      	cbz	r0, 8007162 <__swbuf_r+0x12>
 800715a:	6a03      	ldr	r3, [r0, #32]
 800715c:	b90b      	cbnz	r3, 8007162 <__swbuf_r+0x12>
 800715e:	f7ff fa39 	bl	80065d4 <__sinit>
 8007162:	69a3      	ldr	r3, [r4, #24]
 8007164:	60a3      	str	r3, [r4, #8]
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	071a      	lsls	r2, r3, #28
 800716a:	d525      	bpl.n	80071b8 <__swbuf_r+0x68>
 800716c:	6923      	ldr	r3, [r4, #16]
 800716e:	b31b      	cbz	r3, 80071b8 <__swbuf_r+0x68>
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	6922      	ldr	r2, [r4, #16]
 8007174:	1a98      	subs	r0, r3, r2
 8007176:	6963      	ldr	r3, [r4, #20]
 8007178:	b2f6      	uxtb	r6, r6
 800717a:	4283      	cmp	r3, r0
 800717c:	4637      	mov	r7, r6
 800717e:	dc04      	bgt.n	800718a <__swbuf_r+0x3a>
 8007180:	4621      	mov	r1, r4
 8007182:	4628      	mov	r0, r5
 8007184:	f7ff fcc0 	bl	8006b08 <_fflush_r>
 8007188:	b9e0      	cbnz	r0, 80071c4 <__swbuf_r+0x74>
 800718a:	68a3      	ldr	r3, [r4, #8]
 800718c:	3b01      	subs	r3, #1
 800718e:	60a3      	str	r3, [r4, #8]
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	6022      	str	r2, [r4, #0]
 8007196:	701e      	strb	r6, [r3, #0]
 8007198:	6962      	ldr	r2, [r4, #20]
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	429a      	cmp	r2, r3
 800719e:	d004      	beq.n	80071aa <__swbuf_r+0x5a>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	07db      	lsls	r3, r3, #31
 80071a4:	d506      	bpl.n	80071b4 <__swbuf_r+0x64>
 80071a6:	2e0a      	cmp	r6, #10
 80071a8:	d104      	bne.n	80071b4 <__swbuf_r+0x64>
 80071aa:	4621      	mov	r1, r4
 80071ac:	4628      	mov	r0, r5
 80071ae:	f7ff fcab 	bl	8006b08 <_fflush_r>
 80071b2:	b938      	cbnz	r0, 80071c4 <__swbuf_r+0x74>
 80071b4:	4638      	mov	r0, r7
 80071b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b8:	4621      	mov	r1, r4
 80071ba:	4628      	mov	r0, r5
 80071bc:	f000 f806 	bl	80071cc <__swsetup_r>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d0d5      	beq.n	8007170 <__swbuf_r+0x20>
 80071c4:	f04f 37ff 	mov.w	r7, #4294967295
 80071c8:	e7f4      	b.n	80071b4 <__swbuf_r+0x64>
	...

080071cc <__swsetup_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	4b2a      	ldr	r3, [pc, #168]	; (8007278 <__swsetup_r+0xac>)
 80071d0:	4605      	mov	r5, r0
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	460c      	mov	r4, r1
 80071d6:	b118      	cbz	r0, 80071e0 <__swsetup_r+0x14>
 80071d8:	6a03      	ldr	r3, [r0, #32]
 80071da:	b90b      	cbnz	r3, 80071e0 <__swsetup_r+0x14>
 80071dc:	f7ff f9fa 	bl	80065d4 <__sinit>
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071e6:	0718      	lsls	r0, r3, #28
 80071e8:	d422      	bmi.n	8007230 <__swsetup_r+0x64>
 80071ea:	06d9      	lsls	r1, r3, #27
 80071ec:	d407      	bmi.n	80071fe <__swsetup_r+0x32>
 80071ee:	2309      	movs	r3, #9
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071f6:	81a3      	strh	r3, [r4, #12]
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	e034      	b.n	8007268 <__swsetup_r+0x9c>
 80071fe:	0758      	lsls	r0, r3, #29
 8007200:	d512      	bpl.n	8007228 <__swsetup_r+0x5c>
 8007202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007204:	b141      	cbz	r1, 8007218 <__swsetup_r+0x4c>
 8007206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800720a:	4299      	cmp	r1, r3
 800720c:	d002      	beq.n	8007214 <__swsetup_r+0x48>
 800720e:	4628      	mov	r0, r5
 8007210:	f7ff faf4 	bl	80067fc <_free_r>
 8007214:	2300      	movs	r3, #0
 8007216:	6363      	str	r3, [r4, #52]	; 0x34
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800721e:	81a3      	strh	r3, [r4, #12]
 8007220:	2300      	movs	r3, #0
 8007222:	6063      	str	r3, [r4, #4]
 8007224:	6923      	ldr	r3, [r4, #16]
 8007226:	6023      	str	r3, [r4, #0]
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	f043 0308 	orr.w	r3, r3, #8
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	6923      	ldr	r3, [r4, #16]
 8007232:	b94b      	cbnz	r3, 8007248 <__swsetup_r+0x7c>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800723a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800723e:	d003      	beq.n	8007248 <__swsetup_r+0x7c>
 8007240:	4621      	mov	r1, r4
 8007242:	4628      	mov	r0, r5
 8007244:	f000 f884 	bl	8007350 <__smakebuf_r>
 8007248:	89a0      	ldrh	r0, [r4, #12]
 800724a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800724e:	f010 0301 	ands.w	r3, r0, #1
 8007252:	d00a      	beq.n	800726a <__swsetup_r+0x9e>
 8007254:	2300      	movs	r3, #0
 8007256:	60a3      	str	r3, [r4, #8]
 8007258:	6963      	ldr	r3, [r4, #20]
 800725a:	425b      	negs	r3, r3
 800725c:	61a3      	str	r3, [r4, #24]
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	b943      	cbnz	r3, 8007274 <__swsetup_r+0xa8>
 8007262:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007266:	d1c4      	bne.n	80071f2 <__swsetup_r+0x26>
 8007268:	bd38      	pop	{r3, r4, r5, pc}
 800726a:	0781      	lsls	r1, r0, #30
 800726c:	bf58      	it	pl
 800726e:	6963      	ldrpl	r3, [r4, #20]
 8007270:	60a3      	str	r3, [r4, #8]
 8007272:	e7f4      	b.n	800725e <__swsetup_r+0x92>
 8007274:	2000      	movs	r0, #0
 8007276:	e7f7      	b.n	8007268 <__swsetup_r+0x9c>
 8007278:	20000068 	.word	0x20000068

0800727c <_raise_r>:
 800727c:	291f      	cmp	r1, #31
 800727e:	b538      	push	{r3, r4, r5, lr}
 8007280:	4604      	mov	r4, r0
 8007282:	460d      	mov	r5, r1
 8007284:	d904      	bls.n	8007290 <_raise_r+0x14>
 8007286:	2316      	movs	r3, #22
 8007288:	6003      	str	r3, [r0, #0]
 800728a:	f04f 30ff 	mov.w	r0, #4294967295
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007292:	b112      	cbz	r2, 800729a <_raise_r+0x1e>
 8007294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007298:	b94b      	cbnz	r3, 80072ae <_raise_r+0x32>
 800729a:	4620      	mov	r0, r4
 800729c:	f000 f830 	bl	8007300 <_getpid_r>
 80072a0:	462a      	mov	r2, r5
 80072a2:	4601      	mov	r1, r0
 80072a4:	4620      	mov	r0, r4
 80072a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072aa:	f000 b817 	b.w	80072dc <_kill_r>
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d00a      	beq.n	80072c8 <_raise_r+0x4c>
 80072b2:	1c59      	adds	r1, r3, #1
 80072b4:	d103      	bne.n	80072be <_raise_r+0x42>
 80072b6:	2316      	movs	r3, #22
 80072b8:	6003      	str	r3, [r0, #0]
 80072ba:	2001      	movs	r0, #1
 80072bc:	e7e7      	b.n	800728e <_raise_r+0x12>
 80072be:	2400      	movs	r4, #0
 80072c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072c4:	4628      	mov	r0, r5
 80072c6:	4798      	blx	r3
 80072c8:	2000      	movs	r0, #0
 80072ca:	e7e0      	b.n	800728e <_raise_r+0x12>

080072cc <raise>:
 80072cc:	4b02      	ldr	r3, [pc, #8]	; (80072d8 <raise+0xc>)
 80072ce:	4601      	mov	r1, r0
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	f7ff bfd3 	b.w	800727c <_raise_r>
 80072d6:	bf00      	nop
 80072d8:	20000068 	.word	0x20000068

080072dc <_kill_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d07      	ldr	r5, [pc, #28]	; (80072fc <_kill_r+0x20>)
 80072e0:	2300      	movs	r3, #0
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	4611      	mov	r1, r2
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	f7fa f811 	bl	8001310 <_kill>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	d102      	bne.n	80072f8 <_kill_r+0x1c>
 80072f2:	682b      	ldr	r3, [r5, #0]
 80072f4:	b103      	cbz	r3, 80072f8 <_kill_r+0x1c>
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	bf00      	nop
 80072fc:	2000043c 	.word	0x2000043c

08007300 <_getpid_r>:
 8007300:	f7f9 bffe 	b.w	8001300 <_getpid>

08007304 <__swhatbuf_r>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	460c      	mov	r4, r1
 8007308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800730c:	2900      	cmp	r1, #0
 800730e:	b096      	sub	sp, #88	; 0x58
 8007310:	4615      	mov	r5, r2
 8007312:	461e      	mov	r6, r3
 8007314:	da0d      	bge.n	8007332 <__swhatbuf_r+0x2e>
 8007316:	89a3      	ldrh	r3, [r4, #12]
 8007318:	f013 0f80 	tst.w	r3, #128	; 0x80
 800731c:	f04f 0100 	mov.w	r1, #0
 8007320:	bf0c      	ite	eq
 8007322:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007326:	2340      	movne	r3, #64	; 0x40
 8007328:	2000      	movs	r0, #0
 800732a:	6031      	str	r1, [r6, #0]
 800732c:	602b      	str	r3, [r5, #0]
 800732e:	b016      	add	sp, #88	; 0x58
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	466a      	mov	r2, sp
 8007334:	f000 f848 	bl	80073c8 <_fstat_r>
 8007338:	2800      	cmp	r0, #0
 800733a:	dbec      	blt.n	8007316 <__swhatbuf_r+0x12>
 800733c:	9901      	ldr	r1, [sp, #4]
 800733e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007342:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007346:	4259      	negs	r1, r3
 8007348:	4159      	adcs	r1, r3
 800734a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734e:	e7eb      	b.n	8007328 <__swhatbuf_r+0x24>

08007350 <__smakebuf_r>:
 8007350:	898b      	ldrh	r3, [r1, #12]
 8007352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007354:	079d      	lsls	r5, r3, #30
 8007356:	4606      	mov	r6, r0
 8007358:	460c      	mov	r4, r1
 800735a:	d507      	bpl.n	800736c <__smakebuf_r+0x1c>
 800735c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	6123      	str	r3, [r4, #16]
 8007364:	2301      	movs	r3, #1
 8007366:	6163      	str	r3, [r4, #20]
 8007368:	b002      	add	sp, #8
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	ab01      	add	r3, sp, #4
 800736e:	466a      	mov	r2, sp
 8007370:	f7ff ffc8 	bl	8007304 <__swhatbuf_r>
 8007374:	9900      	ldr	r1, [sp, #0]
 8007376:	4605      	mov	r5, r0
 8007378:	4630      	mov	r0, r6
 800737a:	f7ff fab3 	bl	80068e4 <_malloc_r>
 800737e:	b948      	cbnz	r0, 8007394 <__smakebuf_r+0x44>
 8007380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007384:	059a      	lsls	r2, r3, #22
 8007386:	d4ef      	bmi.n	8007368 <__smakebuf_r+0x18>
 8007388:	f023 0303 	bic.w	r3, r3, #3
 800738c:	f043 0302 	orr.w	r3, r3, #2
 8007390:	81a3      	strh	r3, [r4, #12]
 8007392:	e7e3      	b.n	800735c <__smakebuf_r+0xc>
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	6020      	str	r0, [r4, #0]
 8007398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800739c:	81a3      	strh	r3, [r4, #12]
 800739e:	9b00      	ldr	r3, [sp, #0]
 80073a0:	6163      	str	r3, [r4, #20]
 80073a2:	9b01      	ldr	r3, [sp, #4]
 80073a4:	6120      	str	r0, [r4, #16]
 80073a6:	b15b      	cbz	r3, 80073c0 <__smakebuf_r+0x70>
 80073a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ac:	4630      	mov	r0, r6
 80073ae:	f000 f81d 	bl	80073ec <_isatty_r>
 80073b2:	b128      	cbz	r0, 80073c0 <__smakebuf_r+0x70>
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	f023 0303 	bic.w	r3, r3, #3
 80073ba:	f043 0301 	orr.w	r3, r3, #1
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	431d      	orrs	r5, r3
 80073c4:	81a5      	strh	r5, [r4, #12]
 80073c6:	e7cf      	b.n	8007368 <__smakebuf_r+0x18>

080073c8 <_fstat_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	4d07      	ldr	r5, [pc, #28]	; (80073e8 <_fstat_r+0x20>)
 80073cc:	2300      	movs	r3, #0
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	602b      	str	r3, [r5, #0]
 80073d6:	f7f9 fffa 	bl	80013ce <_fstat>
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	d102      	bne.n	80073e4 <_fstat_r+0x1c>
 80073de:	682b      	ldr	r3, [r5, #0]
 80073e0:	b103      	cbz	r3, 80073e4 <_fstat_r+0x1c>
 80073e2:	6023      	str	r3, [r4, #0]
 80073e4:	bd38      	pop	{r3, r4, r5, pc}
 80073e6:	bf00      	nop
 80073e8:	2000043c 	.word	0x2000043c

080073ec <_isatty_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4d06      	ldr	r5, [pc, #24]	; (8007408 <_isatty_r+0x1c>)
 80073f0:	2300      	movs	r3, #0
 80073f2:	4604      	mov	r4, r0
 80073f4:	4608      	mov	r0, r1
 80073f6:	602b      	str	r3, [r5, #0]
 80073f8:	f7f9 fff9 	bl	80013ee <_isatty>
 80073fc:	1c43      	adds	r3, r0, #1
 80073fe:	d102      	bne.n	8007406 <_isatty_r+0x1a>
 8007400:	682b      	ldr	r3, [r5, #0]
 8007402:	b103      	cbz	r3, 8007406 <_isatty_r+0x1a>
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	2000043c 	.word	0x2000043c

0800740c <_init>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	bf00      	nop
 8007410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007412:	bc08      	pop	{r3}
 8007414:	469e      	mov	lr, r3
 8007416:	4770      	bx	lr

08007418 <_fini>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	bf00      	nop
 800741c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741e:	bc08      	pop	{r3}
 8007420:	469e      	mov	lr, r3
 8007422:	4770      	bx	lr
