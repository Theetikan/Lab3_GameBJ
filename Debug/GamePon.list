
GamePon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007204  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007504  08007504  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800750c  0800750c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007510  08007510  00017510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  2000006c  08007580  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08007580  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001330b  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002870  00000000  00000000  000333ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00035c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c89  00000000  00000000  00036c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b70  00000000  00000000  00037909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001475f  00000000  00000000  0005e479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f06cc  00000000  00000000  00072bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cc4  00000000  00000000  001632a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00167f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080073cc 	.word	0x080073cc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080073cc 	.word	0x080073cc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 ff1d 	bl	80013fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f83e 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f982 	bl	80008d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005cc:	f000 f94e 	bl	800086c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d0:	f000 f8c4 	bl	800075c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80005d4:	f000 f882 	bl	80006dc <MX_I2C1_Init>
  MX_SPI3_Init();
 80005d8:	f000 f90a 	bl	80007f0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  SPITxRx_Setup();
 80005dc:	f000 fa48 	bl	8000a70 <SPITxRx_Setup>
  WriteLED();
 80005e0:	f000 fa90 	bl	8000b04 <WriteLED>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  EEPROMReadExample(eepromDataReadBack, 4);
 80005e4:	2104      	movs	r1, #4
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <main+0x7c>)
 80005e8:	f000 fa26 	bl	8000a38 <EEPROMReadExample>
	  HAL_Delay(100);
 80005ec:	2064      	movs	r0, #100	; 0x64
 80005ee:	f000 ff77 	bl	80014e0 <HAL_Delay>
	  EEPROMWriteExample();
 80005f2:	f000 f9fd 	bl	80009f0 <EEPROMWriteExample>

	  SPITxRx_readIO();
 80005f6:	f000 fa51 	bl	8000a9c <SPITxRx_readIO>

	  Switch();
 80005fa:	f000 faef 	bl	8000bdc <Switch>
	  StateGame();
 80005fe:	f000 fb4b 	bl	8000c98 <StateGame>
	  LED();
 8000602:	f000 fbb9 	bl	8000d78 <LED>

	  //Random Number
		srand(time(NULL));
 8000606:	2000      	movs	r0, #0
 8000608:	f006 f812 	bl	8006630 <time>
 800060c:	4602      	mov	r2, r0
 800060e:	460b      	mov	r3, r1
 8000610:	4613      	mov	r3, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f005 fe92 	bl	800633c <srand>
		random_number1 = random_between(1, 10);
 8000618:	210a      	movs	r1, #10
 800061a:	2001      	movs	r0, #1
 800061c:	f000 fab0 	bl	8000b80 <random_between>
 8000620:	4603      	mov	r3, r0
 8000622:	4a06      	ldr	r2, [pc, #24]	; (800063c <main+0x80>)
 8000624:	6013      	str	r3, [r2, #0]
		random_number2 = random_between(1, 10);
 8000626:	210a      	movs	r1, #10
 8000628:	2001      	movs	r0, #1
 800062a:	f000 faa9 	bl	8000b80 <random_between>
 800062e:	4603      	mov	r3, r0
 8000630:	4a03      	ldr	r2, [pc, #12]	; (8000640 <main+0x84>)
 8000632:	6013      	str	r3, [r2, #0]
  {
 8000634:	e7d6      	b.n	80005e4 <main+0x28>
 8000636:	bf00      	nop
 8000638:	20000298 	.word	0x20000298
 800063c:	200002d0 	.word	0x200002d0
 8000640:	200002d4 	.word	0x200002d4

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	2238      	movs	r2, #56	; 0x38
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 ffe3 	bl	800661e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000666:	2000      	movs	r0, #0
 8000668:	f003 faa2 	bl	8003bb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	2340      	movs	r3, #64	; 0x40
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000682:	2304      	movs	r3, #4
 8000684:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000686:	2355      	movs	r3, #85	; 0x55
 8000688:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0318 	add.w	r3, r7, #24
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fb3c 	bl	8003d18 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006a6:	f000 fb95 	bl	8000dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2303      	movs	r3, #3
 80006b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2104      	movs	r1, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fe3a 	bl	800433c <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ce:	f000 fb81 	bl	8000dd4 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_I2C1_Init+0x74>)
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <MX_I2C1_Init+0x78>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_I2C1_Init+0x74>)
 80006e8:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <MX_I2C1_Init+0x7c>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_I2C1_Init+0x74>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_I2C1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_I2C1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <MX_I2C1_Init+0x74>)
 8000718:	f001 fc17 	bl	8001f4a <HAL_I2C_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000722:	f000 fb57 	bl	8000dd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000726:	2100      	movs	r1, #0
 8000728:	4809      	ldr	r0, [pc, #36]	; (8000750 <MX_I2C1_Init+0x74>)
 800072a:	f003 f9a9 	bl	8003a80 <HAL_I2CEx_ConfigAnalogFilter>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000734:	f000 fb4e 	bl	8000dd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000738:	2100      	movs	r1, #0
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_I2C1_Init+0x74>)
 800073c:	f003 f9eb 	bl	8003b16 <HAL_I2CEx_ConfigDigitalFilter>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000746:	f000 fb45 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000088 	.word	0x20000088
 8000754:	40005400 	.word	0x40005400
 8000758:	30a0a7fb 	.word	0x30a0a7fb

0800075c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000762:	4a22      	ldr	r2, [pc, #136]	; (80007ec <MX_LPUART1_UART_Init+0x90>)
 8000764:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800079e:	4812      	ldr	r0, [pc, #72]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 80007a0:	f004 ff5e 	bl	8005660 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007aa:	f000 fb13 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 80007b2:	f005 fcf9 	bl	80061a8 <HAL_UARTEx_SetTxFifoThreshold>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007bc:	f000 fb0a 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	f005 fd2e 	bl	8006224 <HAL_UARTEx_SetRxFifoThreshold>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007ce:	f000 fb01 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 80007d4:	f005 fcaf 	bl	8006136 <HAL_UARTEx_DisableFifoMode>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007de:	f000 faf9 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000019c 	.word	0x2000019c
 80007ec:	40008000 	.word	0x40008000

080007f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_SPI3_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_SPI3_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_SPI3_Init+0x74>)
 80007fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_SPI3_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_SPI3_Init+0x74>)
 800080a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800080e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_SPI3_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_SPI3_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_SPI3_Init+0x74>)
 800081e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000822:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_SPI3_Init+0x74>)
 8000826:	2238      	movs	r2, #56	; 0x38
 8000828:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_SPI3_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_SPI3_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_SPI3_Init+0x74>)
 800083e:	2207      	movs	r2, #7
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_SPI3_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_SPI3_Init+0x74>)
 800084a:	2208      	movs	r2, #8
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_SPI3_Init+0x74>)
 8000850:	f004 f9de 	bl	8004c10 <HAL_SPI_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 fabb 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000230 	.word	0x20000230
 8000868:	40003c00 	.word	0x40003c00

0800086c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_DMA_Init+0x60>)
 8000874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_DMA_Init+0x60>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6493      	str	r3, [r2, #72]	; 0x48
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_DMA_Init+0x60>)
 8000880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_DMA_Init+0x60>)
 800088c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <MX_DMA_Init+0x60>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6493      	str	r3, [r2, #72]	; 0x48
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_DMA_Init+0x60>)
 8000898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	200b      	movs	r0, #11
 80008a8:	f000 ff17 	bl	80016da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008ac:	200b      	movs	r0, #11
 80008ae:	f000 ff2e 	bl	800170e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	200c      	movs	r0, #12
 80008b8:	f000 ff0f 	bl	80016da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80008bc:	200c      	movs	r0, #12
 80008be:	f000 ff26 	bl	800170e <HAL_NVIC_EnableIRQ>

}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <MX_GPIO_Init+0x114>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a3e      	ldr	r2, [pc, #248]	; (80009e4 <MX_GPIO_Init+0x114>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b3c      	ldr	r3, [pc, #240]	; (80009e4 <MX_GPIO_Init+0x114>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <MX_GPIO_Init+0x114>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a38      	ldr	r2, [pc, #224]	; (80009e4 <MX_GPIO_Init+0x114>)
 8000904:	f043 0320 	orr.w	r3, r3, #32
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <MX_GPIO_Init+0x114>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0320 	and.w	r3, r3, #32
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b33      	ldr	r3, [pc, #204]	; (80009e4 <MX_GPIO_Init+0x114>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a32      	ldr	r2, [pc, #200]	; (80009e4 <MX_GPIO_Init+0x114>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <MX_GPIO_Init+0x114>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <MX_GPIO_Init+0x114>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a2c      	ldr	r2, [pc, #176]	; (80009e4 <MX_GPIO_Init+0x114>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <MX_GPIO_Init+0x114>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <MX_GPIO_Init+0x114>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <MX_GPIO_Init+0x114>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <MX_GPIO_Init+0x114>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2120      	movs	r1, #32
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f001 fab5 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2104      	movs	r1, #4
 800096e:	481e      	ldr	r0, [pc, #120]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000970:	f001 fab0 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4818      	ldr	r0, [pc, #96]	; (80009ec <MX_GPIO_Init+0x11c>)
 800098c:	f001 f908 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000990:	2320      	movs	r3, #32
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f001 f8f9 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ae:	2304      	movs	r3, #4
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <MX_GPIO_Init+0x118>)
 80009c6:	f001 f8eb 	bl	8001ba0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2028      	movs	r0, #40	; 0x28
 80009d0:	f000 fe83 	bl	80016da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d4:	2028      	movs	r0, #40	; 0x28
 80009d6:	f000 fe9a 	bl	800170e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000c00 	.word	0x48000c00
 80009ec:	48000800 	.word	0x48000800

080009f0 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */
void EEPROMWriteExample() {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <EEPROMWriteExample+0x3c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d012      	beq.n	8000a24 <EEPROMWriteExample+0x34>
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <EEPROMWriteExample+0x40>)
 8000a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b20      	cmp	r3, #32
 8000a08:	d10c      	bne.n	8000a24 <EEPROMWriteExample+0x34>
		static uint8_t data[4] = { 0x50, 0x4F, 0x4E, 0x31 };
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 4);
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <EEPROMWriteExample+0x44>)
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2302      	movs	r3, #2
 8000a14:	222c      	movs	r2, #44	; 0x2c
 8000a16:	21a0      	movs	r1, #160	; 0xa0
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <EEPROMWriteExample+0x40>)
 8000a1a:	f001 fb31 	bl	8002080 <HAL_I2C_Mem_Write_IT>
		eepromExampleWriteFlag = 0;
 8000a1e:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <EEPROMWriteExample+0x3c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
	}
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000294 	.word	0x20000294
 8000a30:	20000088 	.word	0x20000088
 8000a34:	20000000 	.word	0x20000000

08000a38 <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	807b      	strh	r3, [r7, #2]
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	222c      	movs	r2, #44	; 0x2c
 8000a50:	21a0      	movs	r1, #160	; 0xa0
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <EEPROMReadExample+0x30>)
 8000a54:	f001 fb9e 	bl	8002194 <HAL_I2C_Mem_Read_IT>
		eepromExampleReadFlag = 0;
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <EEPROMReadExample+0x34>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
	}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000088 	.word	0x20000088
 8000a6c:	20000295 	.word	0x20000295

08000a70 <SPITxRx_Setup>:


void SPITxRx_Setup() {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
//CS pulse
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a74:	2200      	movs	r2, #0
 8000a76:	2104      	movs	r1, #4
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <SPITxRx_Setup+0x28>)
 8000a7a:	f001 fa2b 	bl	8001ed4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f000 fd2e 	bl	80014e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000a84:	2201      	movs	r2, #1
 8000a86:	2104      	movs	r1, #4
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <SPITxRx_Setup+0x28>)
 8000a8a:	f001 fa23 	bl	8001ed4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f000 fd26 	bl	80014e0 <HAL_Delay>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	48000c00 	.word	0x48000c00

08000a9c <SPITxRx_readIO>:
void SPITxRx_readIO() {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) {
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4813      	ldr	r0, [pc, #76]	; (8000af0 <SPITxRx_readIO+0x54>)
 8000aa4:	f001 f9fe 	bl	8001ea4 <HAL_GPIO_ReadPin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d01e      	beq.n	8000aec <SPITxRx_readIO+0x50>
		if (StateRT == 0){
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <SPITxRx_readIO+0x58>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10e      	bne.n	8000ad4 <SPITxRx_readIO+0x38>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2104      	movs	r1, #4
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <SPITxRx_readIO+0x54>)
 8000abc:	f001 fa0a 	bl	8001ed4 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001; //what to do receive or transmit (1 == receive)
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <SPITxRx_readIO+0x5c>)
 8000ac2:	2241      	movs	r2, #65	; 0x41
 8000ac4:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12; //address
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <SPITxRx_readIO+0x5c>)
 8000ac8:	2212      	movs	r2, #18
 8000aca:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <SPITxRx_readIO+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	709a      	strb	r2, [r3, #2]
 8000ad2:	e005      	b.n	8000ae0 <SPITxRx_readIO+0x44>
		}
		else if (StateRT == 1){
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <SPITxRx_readIO+0x58>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d101      	bne.n	8000ae0 <SPITxRx_readIO+0x44>
			LED();
 8000adc:	f000 f94c 	bl	8000d78 <LED>
		}
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	4a06      	ldr	r2, [pc, #24]	; (8000afc <SPITxRx_readIO+0x60>)
 8000ae4:	4904      	ldr	r1, [pc, #16]	; (8000af8 <SPITxRx_readIO+0x5c>)
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <SPITxRx_readIO+0x64>)
 8000ae8:	f004 f93e 	bl	8004d68 <HAL_SPI_TransmitReceive_IT>
	}
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	48000c00 	.word	0x48000c00
 8000af4:	200002dc 	.word	0x200002dc
 8000af8:	200002a8 	.word	0x200002a8
 8000afc:	2000029c 	.word	0x2000029c
 8000b00:	20000230 	.word	0x20000230

08000b04 <WriteLED>:

void WriteLED(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <WriteLED+0x30>)
 8000b0e:	f001 f9e1 	bl	8001ed4 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;//write
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <WriteLED+0x34>)
 8000b14:	2240      	movs	r2, #64	; 0x40
 8000b16:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;//IODIRB
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <WriteLED+0x34>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b00000000;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <WriteLED+0x34>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000b24:	2303      	movs	r3, #3
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <WriteLED+0x38>)
 8000b28:	4903      	ldr	r1, [pc, #12]	; (8000b38 <WriteLED+0x34>)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <WriteLED+0x3c>)
 8000b2c:	f004 f91c 	bl	8004d68 <HAL_SPI_TransmitReceive_IT>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	48000c00 	.word	0x48000c00
 8000b38:	200002a8 	.word	0x200002a8
 8000b3c:	2000029c 	.word	0x2000029c
 8000b40:	20000230 	.word	0x20000230

08000b44 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	StateRT+=1;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000b54:	6013      	str	r3, [r2, #0]
		if (StateRT>1)
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	dd02      	ble.n	8000b64 <HAL_SPI_TxRxCpltCallback+0x20>
		{
			StateRT = 0;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
		}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000b64:	2201      	movs	r2, #1
 8000b66:	2104      	movs	r1, #4
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <HAL_SPI_TxRxCpltCallback+0x38>)
 8000b6a:	f001 f9b3 	bl	8001ed4 <HAL_GPIO_WritePin>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200002dc 	.word	0x200002dc
 8000b7c:	48000c00 	.word	0x48000c00

08000b80 <random_between>:


int random_between(int min, int max)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
    int r = (rand() / (float) RAND_MAX) * (max + 1) + min;
 8000b8a:	f005 fc05 	bl	8006398 <rand>
 8000b8e:	ee07 0a90 	vmov	s15, r0
 8000b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b96:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000bd8 <random_between+0x58>
 8000b9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	ee07 3a90 	vmov	s15, r3
 8000ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000baa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bc0:	ee17 3a90 	vmov	r3, s15
 8000bc4:	60fb      	str	r3, [r7, #12]
    return r > max ? max: r;
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	bfa8      	it	ge
 8000bce:	4613      	movge	r3, r2

}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	4f000000 	.word	0x4f000000

08000bdc <Switch>:


void Switch()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	if (SPIRx[2] == 15){
 8000be0:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <Switch+0x9c>)
 8000be2:	789b      	ldrb	r3, [r3, #2]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d102      	bne.n	8000bee <Switch+0x12>
		click = 0;
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <Switch+0xa0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
	}
    if (click == 0)
 8000bee:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <Switch+0xa0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d13e      	bne.n	8000c74 <Switch+0x98>
    {
        if (SPIRx[2] == 7) // Button 1 pressed (0000 0001) P1 hit
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <Switch+0x9c>)
 8000bf8:	789b      	ldrb	r3, [r3, #2]
 8000bfa:	2b07      	cmp	r3, #7
 8000bfc:	d10d      	bne.n	8000c1a <Switch+0x3e>
        {
            click = 1;
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <Switch+0xa0>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
            ScorePlayer1 += random_number1; // Random the number
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <Switch+0xa4>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <Switch+0xa8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <Switch+0xa4>)
 8000c10:	6013      	str	r3, [r2, #0]
            HAL_Delay(100);
 8000c12:	2064      	movs	r0, #100	; 0x64
 8000c14:	f000 fc64 	bl	80014e0 <HAL_Delay>
            click = 1;
            P2Finish = 1;
            HAL_Delay(100);
        }
    }
}
 8000c18:	e02c      	b.n	8000c74 <Switch+0x98>
        else if (SPIRx[2] == 11) // Button 2 pressed (0000 0010) P1 stand
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <Switch+0x9c>)
 8000c1c:	789b      	ldrb	r3, [r3, #2]
 8000c1e:	2b0b      	cmp	r3, #11
 8000c20:	d109      	bne.n	8000c36 <Switch+0x5a>
            click = 1;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <Switch+0xa0>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
            P1Finish = 1;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <Switch+0xac>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
            HAL_Delay(100);
 8000c2e:	2064      	movs	r0, #100	; 0x64
 8000c30:	f000 fc56 	bl	80014e0 <HAL_Delay>
}
 8000c34:	e01e      	b.n	8000c74 <Switch+0x98>
        else if (SPIRx[2] == 13) // Button 3 pressed (0000 0100) P2 hit
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <Switch+0x9c>)
 8000c38:	789b      	ldrb	r3, [r3, #2]
 8000c3a:	2b0d      	cmp	r3, #13
 8000c3c:	d10d      	bne.n	8000c5a <Switch+0x7e>
            click = 1;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <Switch+0xa0>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
            ScorePlayer2 += random_number2; // Random the number
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <Switch+0xb0>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <Switch+0xb4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <Switch+0xb0>)
 8000c50:	6013      	str	r3, [r2, #0]
            HAL_Delay(100);
 8000c52:	2064      	movs	r0, #100	; 0x64
 8000c54:	f000 fc44 	bl	80014e0 <HAL_Delay>
}
 8000c58:	e00c      	b.n	8000c74 <Switch+0x98>
        else if (SPIRx[2] == 14) // Button 4 pressed (0000 1000) P2 stand
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <Switch+0x9c>)
 8000c5c:	789b      	ldrb	r3, [r3, #2]
 8000c5e:	2b0e      	cmp	r3, #14
 8000c60:	d108      	bne.n	8000c74 <Switch+0x98>
            click = 1;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <Switch+0xa0>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
            P2Finish = 1;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <Switch+0xb8>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]
            HAL_Delay(100);
 8000c6e:	2064      	movs	r0, #100	; 0x64
 8000c70:	f000 fc36 	bl	80014e0 <HAL_Delay>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000029c 	.word	0x2000029c
 8000c7c:	200002d8 	.word	0x200002d8
 8000c80:	200002c0 	.word	0x200002c0
 8000c84:	200002d0 	.word	0x200002d0
 8000c88:	200002c8 	.word	0x200002c8
 8000c8c:	200002c4 	.word	0x200002c4
 8000c90:	200002d4 	.word	0x200002d4
 8000c94:	200002cc 	.word	0x200002cc

08000c98 <StateGame>:


void StateGame(){
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
	if (P1Finish == 1 && P2Finish == 1){
 8000c9c:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <StateGame+0xc4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d155      	bne.n	8000d50 <StateGame+0xb8>
 8000ca4:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <StateGame+0xc8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d151      	bne.n	8000d50 <StateGame+0xb8>
		TotalScorePlayer1 = ScorePlayer1 ;
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <StateGame+0xcc>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <StateGame+0xd0>)
 8000cb2:	6013      	str	r3, [r2, #0]
		TotalScorePlayer2 = ScorePlayer2 ;
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <StateGame+0xd4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a2d      	ldr	r2, [pc, #180]	; (8000d70 <StateGame+0xd8>)
 8000cba:	6013      	str	r3, [r2, #0]
		if (TotalScorePlayer1 == TotalScorePlayer2) {
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <StateGame+0xd0>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <StateGame+0xd8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d103      	bne.n	8000cd0 <StateGame+0x38>
	       State = 3; //Tie
 8000cc8:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <StateGame+0xdc>)
 8000cca:	2203      	movs	r2, #3
 8000ccc:	601a      	str	r2, [r3, #0]
		else if (TotalScorePlayer1 >21 && TotalScorePlayer1 <= 21  ) {
			State = 2; //Player1Win
				}

	}
}
 8000cce:	e03f      	b.n	8000d50 <StateGame+0xb8>
		else if (TotalScorePlayer1 > 21 && TotalScorePlayer2 > 21) {
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <StateGame+0xd0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b15      	cmp	r3, #21
 8000cd6:	dd07      	ble.n	8000ce8 <StateGame+0x50>
 8000cd8:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <StateGame+0xd8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b15      	cmp	r3, #21
 8000cde:	dd03      	ble.n	8000ce8 <StateGame+0x50>
	       State = 3; //Tie
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <StateGame+0xdc>)
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e033      	b.n	8000d50 <StateGame+0xb8>
		else if (TotalScorePlayer1 > TotalScorePlayer2 && TotalScorePlayer1 <= 21) {
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <StateGame+0xd0>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <StateGame+0xd8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dd07      	ble.n	8000d04 <StateGame+0x6c>
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <StateGame+0xd0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b15      	cmp	r3, #21
 8000cfa:	dc03      	bgt.n	8000d04 <StateGame+0x6c>
	       State = 1; //Player1Win
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <StateGame+0xdc>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	e025      	b.n	8000d50 <StateGame+0xb8>
		else if (TotalScorePlayer2 > TotalScorePlayer1 && TotalScorePlayer2 <= 21) {
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <StateGame+0xd8>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <StateGame+0xd0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dd07      	ble.n	8000d20 <StateGame+0x88>
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <StateGame+0xd8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b15      	cmp	r3, #21
 8000d16:	dc03      	bgt.n	8000d20 <StateGame+0x88>
	       State = 2; //Player2Win
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <StateGame+0xdc>)
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	e017      	b.n	8000d50 <StateGame+0xb8>
		else if (TotalScorePlayer2 >21 && TotalScorePlayer2 <= 21  ) {
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <StateGame+0xd8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b15      	cmp	r3, #21
 8000d26:	dd07      	ble.n	8000d38 <StateGame+0xa0>
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <StateGame+0xd8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b15      	cmp	r3, #21
 8000d2e:	dc03      	bgt.n	8000d38 <StateGame+0xa0>
			State = 1; //Player1Win
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <StateGame+0xdc>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e00b      	b.n	8000d50 <StateGame+0xb8>
		else if (TotalScorePlayer1 >21 && TotalScorePlayer1 <= 21  ) {
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <StateGame+0xd0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b15      	cmp	r3, #21
 8000d3e:	dd07      	ble.n	8000d50 <StateGame+0xb8>
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <StateGame+0xd0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b15      	cmp	r3, #21
 8000d46:	dc03      	bgt.n	8000d50 <StateGame+0xb8>
			State = 2; //Player1Win
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <StateGame+0xdc>)
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	e7ff      	b.n	8000d50 <StateGame+0xb8>
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200002c8 	.word	0x200002c8
 8000d60:	200002cc 	.word	0x200002cc
 8000d64:	200002c0 	.word	0x200002c0
 8000d68:	200002b8 	.word	0x200002b8
 8000d6c:	200002c4 	.word	0x200002c4
 8000d70:	200002bc 	.word	0x200002bc
 8000d74:	200002b4 	.word	0x200002b4

08000d78 <LED>:

void LED() {
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
		SPITx[0] = 0b01000000; // write
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <LED+0x54>)
 8000d7e:	2240      	movs	r2, #64	; 0x40
 8000d80:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x15; // OLATB
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <LED+0x54>)
 8000d84:	2215      	movs	r2, #21
 8000d86:	705a      	strb	r2, [r3, #1]
		if (State == 3) { //tie
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <LED+0x58>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d102      	bne.n	8000d96 <LED+0x1e>
			SPITx[2] = 0b11111110; // LED ON
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <LED+0x54>)
 8000d92:	22fe      	movs	r2, #254	; 0xfe
 8000d94:	709a      	strb	r2, [r3, #2]
		}
		if (State == 1) { // p1 win
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <LED+0x58>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d102      	bne.n	8000da4 <LED+0x2c>
				SPITx[2] = 0b11111110; // LED ON
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <LED+0x54>)
 8000da0:	22fe      	movs	r2, #254	; 0xfe
 8000da2:	709a      	strb	r2, [r3, #2]
		}
		if (State == 2) { //p2 win
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <LED+0x58>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d102      	bne.n	8000db2 <LED+0x3a>
				SPITx[2] = 0b11111110; // LED ON
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <LED+0x54>)
 8000dae:	22fe      	movs	r2, #254	; 0xfe
 8000db0:	709a      	strb	r2, [r3, #2]
		}
		if (State == 0) { //playing
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <LED+0x58>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d102      	bne.n	8000dc0 <LED+0x48>
			SPITx[2] = 0b00000001; // LED ON
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <LED+0x54>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	709a      	strb	r2, [r3, #2]
		}
	}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	200002a8 	.word	0x200002a8
 8000dd0:	200002b4 	.word	0x200002b4

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_MspInit+0x44>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_MspInit+0x44>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6613      	str	r3, [r2, #96]	; 0x60
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_MspInit+0x44>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_MspInit+0x44>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x44>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x44>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e16:	f002 ff6f 	bl	8003cf8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0a0      	sub	sp, #128	; 0x80
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	2254      	movs	r2, #84	; 0x54
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f005 fbe8 	bl	800661e <memset>
  if(hi2c->Instance==I2C1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a5f      	ldr	r2, [pc, #380]	; (8000fd0 <HAL_I2C_MspInit+0x1a8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	f040 80b6 	bne.w	8000fc6 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e5a:	2340      	movs	r3, #64	; 0x40
 8000e5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	4618      	mov	r0, r3
 8000e68:	f003 fc84 	bl	8004774 <HAL_RCCEx_PeriphCLKConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e72:	f7ff ffaf 	bl	8000dd4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b57      	ldr	r3, [pc, #348]	; (8000fd4 <HAL_I2C_MspInit+0x1ac>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a56      	ldr	r2, [pc, #344]	; (8000fd4 <HAL_I2C_MspInit+0x1ac>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <HAL_I2C_MspInit+0x1ac>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b51      	ldr	r3, [pc, #324]	; (8000fd4 <HAL_I2C_MspInit+0x1ac>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	4a50      	ldr	r2, [pc, #320]	; (8000fd4 <HAL_I2C_MspInit+0x1ac>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9a:	4b4e      	ldr	r3, [pc, #312]	; (8000fd4 <HAL_I2C_MspInit+0x1ac>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eac:	2312      	movs	r3, #18
 8000eae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f000 fe6b 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ece:	2312      	movs	r3, #18
 8000ed0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eda:	2304      	movs	r3, #4
 8000edc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	483c      	ldr	r0, [pc, #240]	; (8000fd8 <HAL_I2C_MspInit+0x1b0>)
 8000ee6:	f000 fe5b 	bl	8001ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eea:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <HAL_I2C_MspInit+0x1ac>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a39      	ldr	r2, [pc, #228]	; (8000fd4 <HAL_I2C_MspInit+0x1ac>)
 8000ef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <HAL_I2C_MspInit+0x1ac>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <HAL_I2C_MspInit+0x1b4>)
 8000f04:	4a36      	ldr	r2, [pc, #216]	; (8000fe0 <HAL_I2C_MspInit+0x1b8>)
 8000f06:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000f08:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <HAL_I2C_MspInit+0x1b4>)
 8000f0a:	2210      	movs	r2, #16
 8000f0c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f0e:	4b33      	ldr	r3, [pc, #204]	; (8000fdc <HAL_I2C_MspInit+0x1b4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f14:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_I2C_MspInit+0x1b4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <HAL_I2C_MspInit+0x1b4>)
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f20:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_I2C_MspInit+0x1b4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_I2C_MspInit+0x1b4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <HAL_I2C_MspInit+0x1b4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f32:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <HAL_I2C_MspInit+0x1b4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f38:	4828      	ldr	r0, [pc, #160]	; (8000fdc <HAL_I2C_MspInit+0x1b4>)
 8000f3a:	f000 fc03 	bl	8001744 <HAL_DMA_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8000f44:	f7ff ff46 	bl	8000dd4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <HAL_I2C_MspInit+0x1b4>)
 8000f4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f4e:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <HAL_I2C_MspInit+0x1b4>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <HAL_I2C_MspInit+0x1bc>)
 8000f56:	4a24      	ldr	r2, [pc, #144]	; (8000fe8 <HAL_I2C_MspInit+0x1c0>)
 8000f58:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <HAL_I2C_MspInit+0x1bc>)
 8000f5c:	2211      	movs	r2, #17
 8000f5e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <HAL_I2C_MspInit+0x1bc>)
 8000f62:	2210      	movs	r2, #16
 8000f64:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <HAL_I2C_MspInit+0x1bc>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_I2C_MspInit+0x1bc>)
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_I2C_MspInit+0x1bc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_I2C_MspInit+0x1bc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_I2C_MspInit+0x1bc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_I2C_MspInit+0x1bc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f8a:	4816      	ldr	r0, [pc, #88]	; (8000fe4 <HAL_I2C_MspInit+0x1bc>)
 8000f8c:	f000 fbda 	bl	8001744 <HAL_DMA_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8000f96:	f7ff ff1d 	bl	8000dd4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <HAL_I2C_MspInit+0x1bc>)
 8000f9e:	639a      	str	r2, [r3, #56]	; 0x38
 8000fa0:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <HAL_I2C_MspInit+0x1bc>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	201f      	movs	r0, #31
 8000fac:	f000 fb95 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fb0:	201f      	movs	r0, #31
 8000fb2:	f000 fbac 	bl	800170e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2020      	movs	r0, #32
 8000fbc:	f000 fb8d 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000fc0:	2020      	movs	r0, #32
 8000fc2:	f000 fba4 	bl	800170e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3780      	adds	r7, #128	; 0x80
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	200000dc 	.word	0x200000dc
 8000fe0:	40020008 	.word	0x40020008
 8000fe4:	2000013c 	.word	0x2000013c
 8000fe8:	4002001c 	.word	0x4002001c

08000fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b09e      	sub	sp, #120	; 0x78
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	2254      	movs	r2, #84	; 0x54
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f005 fb06 	bl	800661e <memset>
  if(huart->Instance==LPUART1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <HAL_UART_MspInit+0xa8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d136      	bne.n	800108a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800101c:	2320      	movs	r3, #32
 800101e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4618      	mov	r0, r3
 800102a:	f003 fba3 	bl	8004774 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001034:	f7ff fece 	bl	8000dd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_UART_MspInit+0xac>)
 800103a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800103c:	4a16      	ldr	r2, [pc, #88]	; (8001098 <HAL_UART_MspInit+0xac>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_UART_MspInit+0xac>)
 8001046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_UART_MspInit+0xac>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	4a10      	ldr	r2, [pc, #64]	; (8001098 <HAL_UART_MspInit+0xac>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_UART_MspInit+0xac>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001068:	230c      	movs	r3, #12
 800106a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001078:	230c      	movs	r3, #12
 800107a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001080:	4619      	mov	r1, r3
 8001082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001086:	f000 fd8b 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	3778      	adds	r7, #120	; 0x78
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40008000 	.word	0x40008000
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <HAL_SPI_MspInit+0x8c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d130      	bne.n	8001120 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_SPI_MspInit+0x90>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_SPI_MspInit+0x90>)
 80010c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_SPI_MspInit+0x90>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_SPI_MspInit+0x90>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a14      	ldr	r2, [pc, #80]	; (800112c <HAL_SPI_MspInit+0x90>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_SPI_MspInit+0x90>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80010ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001100:	2306      	movs	r3, #6
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <HAL_SPI_MspInit+0x94>)
 800110c:	f000 fd48 	bl	8001ba0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	2033      	movs	r0, #51	; 0x33
 8001116:	f000 fae0 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800111a:	2033      	movs	r0, #51	; 0x33
 800111c:	f000 faf7 	bl	800170e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40003c00 	.word	0x40003c00
 800112c:	40021000 	.word	0x40021000
 8001130:	48000800 	.word	0x48000800

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f990 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <DMA1_Channel1_IRQHandler+0x10>)
 800118e:	f000 fbe8 	bl	8001962 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000dc 	.word	0x200000dc

0800119c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <DMA1_Channel2_IRQHandler+0x10>)
 80011a2:	f000 fbde 	bl	8001962 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000013c 	.word	0x2000013c

080011b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <I2C1_EV_IRQHandler+0x10>)
 80011b6:	f001 f873 	bl	80022a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000088 	.word	0x20000088

080011c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <I2C1_ER_IRQHandler+0x10>)
 80011ca:	f001 f883 	bl	80022d4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000088 	.word	0x20000088

080011d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011e0:	f000 fe90 	bl	8001f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <SPI3_IRQHandler+0x10>)
 80011ee:	f003 fe69 	bl	8004ec4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000230 	.word	0x20000230

080011fc <_getpid>:
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
 8001200:	2301      	movs	r3, #1
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_kill>:
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	f005 fa7d 	bl	8006714 <__errno>
 800121a:	4603      	mov	r3, r0
 800121c:	2216      	movs	r2, #22
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_exit>:
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ffe7 	bl	800120c <_kill>
 800123e:	e7fe      	b.n	800123e <_exit+0x12>

08001240 <_read>:
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e00a      	b.n	8001268 <_read+0x28>
 8001252:	f3af 8000 	nop.w
 8001256:	4601      	mov	r1, r0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	b2ca      	uxtb	r2, r1
 8001260:	701a      	strb	r2, [r3, #0]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbf0      	blt.n	8001252 <_read+0x12>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_write>:
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	e009      	b.n	80012a0 <_write+0x26>
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	60ba      	str	r2, [r7, #8]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f3af 8000 	nop.w
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	dbf1      	blt.n	800128c <_write+0x12>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_close>:
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_fstat>:
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	2300      	movs	r3, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <_isatty>:
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	2301      	movs	r3, #1
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_lseek>:
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	2300      	movs	r3, #0
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <_sbrk>:
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <_sbrk+0x5c>)
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <_sbrk+0x60>)
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x22>
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <_sbrk+0x64>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <_sbrk+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d207      	bcs.n	800135c <_sbrk+0x40>
 800134c:	f005 f9e2 	bl	8006714 <__errno>
 8001350:	4603      	mov	r3, r0
 8001352:	220c      	movs	r2, #12
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e009      	b.n	8001370 <_sbrk+0x54>
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <_sbrk+0x64>)
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20020000 	.word	0x20020000
 800137c:	00000400 	.word	0x00000400
 8001380:	200002e0 	.word	0x200002e0
 8001384:	20000438 	.word	0x20000438

08001388 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <SystemInit+0x20>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <SystemInit+0x20>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <LoopForever+0x2>)
 80013ae:	4685      	mov	sp, r0
 80013b0:	f7ff ffea 	bl	8001388 <SystemInit>
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <LoopForever+0x6>)
 80013b6:	490d      	ldr	r1, [pc, #52]	; (80013ec <LoopForever+0xa>)
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <LoopForever+0xe>)
 80013ba:	2300      	movs	r3, #0
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:
 80013be:	58d4      	ldr	r4, [r2, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:
 80013c4:	18c4      	adds	r4, r0, r3
 80013c6:	428c      	cmp	r4, r1
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <LoopForever+0x12>)
 80013cc:	4c0a      	ldr	r4, [pc, #40]	; (80013f8 <LoopForever+0x16>)
 80013ce:	2300      	movs	r3, #0
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:
 80013d6:	42a2      	cmp	r2, r4
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>
 80013da:	f005 f9a1 	bl	8006720 <__libc_init_array>
 80013de:	f7ff f8ed 	bl	80005bc <main>

080013e2 <LoopForever>:
 80013e2:	e7fe      	b.n	80013e2 <LoopForever>
 80013e4:	20020000 	.word	0x20020000
 80013e8:	20000000 	.word	0x20000000
 80013ec:	2000006c 	.word	0x2000006c
 80013f0:	08007514 	.word	0x08007514
 80013f4:	2000006c 	.word	0x2000006c
 80013f8:	20000434 	.word	0x20000434

080013fc <ADC1_2_IRQHandler>:
 80013fc:	e7fe      	b.n	80013fc <ADC1_2_IRQHandler>

080013fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f95b 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140e:	2000      	movs	r0, #0
 8001410:	f000 f80e 	bl	8001430 <HAL_InitTick>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	e001      	b.n	8001424 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001420:	f7ff fcde 	bl	8000de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001424:	79fb      	ldrb	r3, [r7, #7]

}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_InitTick+0x68>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d022      	beq.n	800148a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_InitTick+0x6c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_InitTick+0x68>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001450:	fbb1 f3f3 	udiv	r3, r1, r3
 8001454:	fbb2 f3f3 	udiv	r3, r2, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f000 f966 	bl	800172a <HAL_SYSTICK_Config>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10f      	bne.n	8001484 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	d809      	bhi.n	800147e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146a:	2200      	movs	r2, #0
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	f04f 30ff 	mov.w	r0, #4294967295
 8001472:	f000 f932 	bl	80016da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_InitTick+0x70>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e007      	b.n	800148e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	e004      	b.n	800148e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e001      	b.n	800148e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000000c 	.word	0x2000000c
 800149c:	20000004 	.word	0x20000004
 80014a0:	20000008 	.word	0x20000008

080014a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_IncTick+0x1c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_IncTick+0x20>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a03      	ldr	r2, [pc, #12]	; (80014c0 <HAL_IncTick+0x1c>)
 80014b4:	6013      	str	r3, [r2, #0]
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	200002e4 	.word	0x200002e4
 80014c4:	2000000c 	.word	0x2000000c

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200002e4 	.word	0x200002e4

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f8:	d004      	beq.n	8001504 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_Delay+0x40>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001504:	bf00      	nop
 8001506:	f7ff ffdf 	bl	80014c8 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	429a      	cmp	r2, r3
 8001514:	d8f7      	bhi.n	8001506 <HAL_Delay+0x26>
  {
  }
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000000c 	.word	0x2000000c

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	; (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	; (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	; (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff8e 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff29 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff40 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff90 	bl	8001618 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5f 	bl	80015c4 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff33 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffa4 	bl	8001680 <SysTick_Config>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e08d      	b.n	8001872 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_DMA_Init+0x138>)
 800175e:	429a      	cmp	r2, r3
 8001760:	d80f      	bhi.n	8001782 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	4b45      	ldr	r3, [pc, #276]	; (8001880 <HAL_DMA_Init+0x13c>)
 800176a:	4413      	add	r3, r2
 800176c:	4a45      	ldr	r2, [pc, #276]	; (8001884 <HAL_DMA_Init+0x140>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	009a      	lsls	r2, r3, #2
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a42      	ldr	r2, [pc, #264]	; (8001888 <HAL_DMA_Init+0x144>)
 800177e:	641a      	str	r2, [r3, #64]	; 0x40
 8001780:	e00e      	b.n	80017a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	4b40      	ldr	r3, [pc, #256]	; (800188c <HAL_DMA_Init+0x148>)
 800178a:	4413      	add	r3, r2
 800178c:	4a3d      	ldr	r2, [pc, #244]	; (8001884 <HAL_DMA_Init+0x140>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	009a      	lsls	r2, r3, #2
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a3c      	ldr	r2, [pc, #240]	; (8001890 <HAL_DMA_Init+0x14c>)
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2202      	movs	r2, #2
 80017a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f972 	bl	8001adc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001800:	d102      	bne.n	8001808 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800181c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d010      	beq.n	8001848 <HAL_DMA_Init+0x104>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b04      	cmp	r3, #4
 800182c:	d80c      	bhi.n	8001848 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f992 	bl	8001b58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	e008      	b.n	800185a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40020407 	.word	0x40020407
 8001880:	bffdfff8 	.word	0xbffdfff8
 8001884:	cccccccd 	.word	0xcccccccd
 8001888:	40020000 	.word	0x40020000
 800188c:	bffdfbf8 	.word	0xbffdfbf8
 8001890:	40020400 	.word	0x40020400

08001894 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d00d      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2204      	movs	r2, #4
 80018b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e047      	b.n	8001958 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 020e 	bic.w	r2, r2, #14
 80018d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	2101      	movs	r1, #1
 8001906:	fa01 f202 	lsl.w	r2, r1, r2
 800190a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001914:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00c      	beq.n	8001938 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800192c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001936:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4798      	blx	r3
    }
  }
  return status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	2204      	movs	r2, #4
 8001984:	409a      	lsls	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d026      	beq.n	80019dc <HAL_DMA_IRQHandler+0x7a>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d021      	beq.n	80019dc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d107      	bne.n	80019b6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0204 	bic.w	r2, r2, #4
 80019b4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f003 021f 	and.w	r2, r3, #31
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	2104      	movs	r1, #4
 80019c4:	fa01 f202 	lsl.w	r2, r1, r2
 80019c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d071      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80019da:	e06c      	b.n	8001ab6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2202      	movs	r2, #2
 80019e6:	409a      	lsls	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d02e      	beq.n	8001a4e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d029      	beq.n	8001a4e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0320 	and.w	r3, r3, #32
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10b      	bne.n	8001a20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 020a 	bic.w	r2, r2, #10
 8001a16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d038      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a4c:	e033      	b.n	8001ab6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2208      	movs	r2, #8
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d02a      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d025      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 020e 	bic.w	r2, r2, #14
 8001a7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d004      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
}
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ace:	b2db      	uxtb	r3, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d802      	bhi.n	8001af6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e001      	b.n	8001afa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001af8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	3b08      	subs	r3, #8
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	009a      	lsls	r2, r3, #2
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b26:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2201      	movs	r2, #1
 8001b30:	409a      	lsls	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b36:	bf00      	nop
 8001b38:	371c      	adds	r7, #28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40020407 	.word	0x40020407
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020820 	.word	0x40020820
 8001b50:	cccccccd 	.word	0xcccccccd
 8001b54:	40020880 	.word	0x40020880

08001b58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	461a      	mov	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b7a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	2201      	movs	r2, #1
 8001b86:	409a      	lsls	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	1000823f 	.word	0x1000823f
 8001b9c:	40020940 	.word	0x40020940

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bae:	e15a      	b.n	8001e66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 814c 	beq.w	8001e60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d005      	beq.n	8001be0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d130      	bne.n	8001c42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c16:	2201      	movs	r2, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 0201 	and.w	r2, r3, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d017      	beq.n	8001c7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d123      	bne.n	8001cd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	6939      	ldr	r1, [r7, #16]
 8001cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0203 	and.w	r2, r3, #3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80a6 	beq.w	8001e60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d14:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <HAL_GPIO_Init+0x2e4>)
 8001d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d18:	4a5a      	ldr	r2, [pc, #360]	; (8001e84 <HAL_GPIO_Init+0x2e4>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d20:	4b58      	ldr	r3, [pc, #352]	; (8001e84 <HAL_GPIO_Init+0x2e4>)
 8001d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2c:	4a56      	ldr	r2, [pc, #344]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d56:	d01f      	beq.n	8001d98 <HAL_GPIO_Init+0x1f8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d019      	beq.n	8001d94 <HAL_GPIO_Init+0x1f4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_GPIO_Init+0x1f0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <HAL_GPIO_Init+0x2f4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x1ec>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a49      	ldr	r2, [pc, #292]	; (8001e98 <HAL_GPIO_Init+0x2f8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x1e8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a48      	ldr	r2, [pc, #288]	; (8001e9c <HAL_GPIO_Init+0x2fc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x1e4>
 8001d80:	2305      	movs	r3, #5
 8001d82:	e00a      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d84:	2306      	movs	r3, #6
 8001d86:	e008      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d88:	2304      	movs	r3, #4
 8001d8a:	e006      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e004      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e002      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	f002 0203 	and.w	r2, r2, #3
 8001da0:	0092      	lsls	r2, r2, #2
 8001da2:	4093      	lsls	r3, r2
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001daa:	4937      	ldr	r1, [pc, #220]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db8:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ddc:	4a30      	ldr	r2, [pc, #192]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e06:	4a26      	ldr	r2, [pc, #152]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e5a:	4a11      	ldr	r2, [pc, #68]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3301      	adds	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f47f ae9d 	bne.w	8001bb0 <HAL_GPIO_Init+0x10>
  }
}
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	48000800 	.word	0x48000800
 8001e94:	48000c00 	.word	0x48000c00
 8001e98:	48001000 	.word	0x48001000
 8001e9c:	48001400 	.word	0x48001400
 8001ea0:	40010400 	.word	0x40010400

08001ea4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	887b      	ldrh	r3, [r7, #2]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	e001      	b.n	8001ec6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f1a:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f806 	bl	8001f34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e08d      	b.n	8002078 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe ff59 	bl	8000e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2224      	movs	r2, #36	; 0x24
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f9a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001faa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d107      	bne.n	8001fc4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	e006      	b.n	8001fd2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fd0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d108      	bne.n	8001fec <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	e007      	b.n	8001ffc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800200a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800201e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69d9      	ldr	r1, [r3, #28]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1a      	ldr	r2, [r3, #32]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0201 	orr.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	4608      	mov	r0, r1
 800208a:	4611      	mov	r1, r2
 800208c:	461a      	mov	r2, r3
 800208e:	4603      	mov	r3, r0
 8002090:	817b      	strh	r3, [r7, #10]
 8002092:	460b      	mov	r3, r1
 8002094:	813b      	strh	r3, [r7, #8]
 8002096:	4613      	mov	r3, r2
 8002098:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d16a      	bne.n	800217c <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_I2C_Mem_Write_IT+0x32>
 80020ac:	8bbb      	ldrh	r3, [r7, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e05f      	b.n	800217e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020cc:	d101      	bne.n	80020d2 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
 80020d0:	e055      	b.n	800217e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2C_Mem_Write_IT+0x60>
 80020dc:	2302      	movs	r3, #2
 80020de:	e04e      	b.n	800217e <HAL_I2C_Mem_Write_IT+0xfe>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2221      	movs	r2, #33	; 0x21
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2240      	movs	r2, #64	; 0x40
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8bba      	ldrh	r2, [r7, #28]
 800210e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_I2C_Mem_Write_IT+0x108>)
 8002114:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4a1c      	ldr	r2, [pc, #112]	; (800218c <HAL_I2C_Mem_Write_IT+0x10c>)
 800211a:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 800211c:	897a      	ldrh	r2, [r7, #10]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d109      	bne.n	800213c <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002128:	893b      	ldrh	r3, [r7, #8]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	651a      	str	r2, [r3, #80]	; 0x50
 800213a:	e00b      	b.n	8002154 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800213c:	893b      	ldrh	r3, [r7, #8]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	b29b      	uxth	r3, r3
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800214a:	893b      	ldrh	r3, [r7, #8]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	8979      	ldrh	r1, [r7, #10]
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <HAL_I2C_Mem_Write_IT+0x110>)
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f001 fb78 	bl	8003858 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002170:	2101      	movs	r1, #1
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f001 fba2 	bl	80038bc <I2C_Enable_IRQ>

    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e000      	b.n	800217e <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800217c:	2302      	movs	r3, #2
  }
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	ffff0000 	.word	0xffff0000
 800218c:	0800245d 	.word	0x0800245d
 8002190:	80002000 	.word	0x80002000

08002194 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	4608      	mov	r0, r1
 800219e:	4611      	mov	r1, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	817b      	strh	r3, [r7, #10]
 80021a6:	460b      	mov	r3, r1
 80021a8:	813b      	strh	r3, [r7, #8]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	d166      	bne.n	8002288 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_I2C_Mem_Read_IT+0x32>
 80021c0:	8bbb      	ldrh	r3, [r7, #28]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d105      	bne.n	80021d2 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e05b      	b.n	800228a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e0:	d101      	bne.n	80021e6 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
 80021e4:	e051      	b.n	800228a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_I2C_Mem_Read_IT+0x60>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e04a      	b.n	800228a <HAL_I2C_Mem_Read_IT+0xf6>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2222      	movs	r2, #34	; 0x22
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8bba      	ldrh	r2, [r7, #28]
 800221c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <HAL_I2C_Mem_Read_IT+0x100>)
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a1c      	ldr	r2, [pc, #112]	; (8002298 <HAL_I2C_Mem_Read_IT+0x104>)
 8002228:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 800222a:	897a      	ldrh	r2, [r7, #10]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d109      	bne.n	800224a <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002236:	893b      	ldrh	r3, [r7, #8]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f04f 32ff 	mov.w	r2, #4294967295
 8002246:	651a      	str	r2, [r3, #80]	; 0x50
 8002248:	e00b      	b.n	8002262 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800224a:	893b      	ldrh	r3, [r7, #8]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	b29b      	uxth	r3, r3
 8002250:	b2da      	uxtb	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002258:	893b      	ldrh	r3, [r7, #8]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	8979      	ldrh	r1, [r7, #10]
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_I2C_Mem_Read_IT+0x108>)
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2300      	movs	r3, #0
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f001 faf2 	bl	8003858 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800227c:	2101      	movs	r1, #1
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f001 fb1c 	bl	80038bc <I2C_Enable_IRQ>

    return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002288:	2302      	movs	r3, #2
  }
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	ffff0000 	.word	0xffff0000
 8002298:	0800245d 	.word	0x0800245d
 800229c:	80002000 	.word	0x80002000

080022a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	68f9      	ldr	r1, [r7, #12]
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
  }
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00f      	beq.n	8002316 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	f043 0201 	orr.w	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002314:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00f      	beq.n	8002340 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f043 0208 	orr.w	r2, r3, #8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800233e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00f      	beq.n	800236a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	f043 0202 	orr.w	r2, r3, #2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002368:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 030b 	and.w	r3, r3, #11
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800237a:	68f9      	ldr	r1, [r7, #12]
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f001 f911 	bl	80035a4 <I2C_ITError>
  }
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	70fb      	strb	r3, [r7, #3]
 80023e6:	4613      	mov	r3, r2
 80023e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002468:	4b8d      	ldr	r3, [pc, #564]	; (80026a0 <I2C_Mem_ISR_IT+0x244>)
 800246a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <I2C_Mem_ISR_IT+0x22>
 800247a:	2302      	movs	r3, #2
 800247c:	e10c      	b.n	8002698 <I2C_Mem_ISR_IT+0x23c>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d012      	beq.n	80024b6 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00d      	beq.n	80024b6 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2210      	movs	r2, #16
 80024a0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f043 0204 	orr.w	r2, r3, #4
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f001 f98f 	bl	80037d2 <I2C_Flush_TXDR>
 80024b4:	e0dd      	b.n	8002672 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d022      	beq.n	8002506 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d01d      	beq.n	8002506 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002504:	e0b5      	b.n	8002672 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d02c      	beq.n	800256a <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002516:	2b00      	cmp	r3, #0
 8002518:	d027      	beq.n	800256a <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002522:	d118      	bne.n	8002556 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002554:	e08d      	b.n	8002672 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800255e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f04f 32ff 	mov.w	r2, #4294967295
 8002566:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002568:	e083      	b.n	8002672 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b00      	cmp	r3, #0
 8002572:	d03c      	beq.n	80025ee <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800257a:	2b00      	cmp	r3, #0
 800257c:	d037      	beq.n	80025ee <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d02c      	beq.n	80025e2 <I2C_Mem_ISR_IT+0x186>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d128      	bne.n	80025e2 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	2bff      	cmp	r3, #255	; 0xff
 8002598:	d910      	bls.n	80025bc <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	22ff      	movs	r2, #255	; 0xff
 800259e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a4:	b299      	uxth	r1, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	2300      	movs	r3, #0
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f001 f94f 	bl	8003858 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ba:	e017      	b.n	80025ec <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	b299      	uxth	r1, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	2300      	movs	r3, #0
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f001 f93c 	bl	8003858 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025e0:	e004      	b.n	80025ec <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80025e2:	2140      	movs	r1, #64	; 0x40
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 ffdd 	bl	80035a4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025ea:	e042      	b.n	8002672 <I2C_Mem_ISR_IT+0x216>
 80025ec:	e041      	b.n	8002672 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d03c      	beq.n	8002672 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d037      	beq.n	8002672 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002602:	2101      	movs	r1, #1
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f001 f9dd 	bl	80039c4 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800260a:	2102      	movs	r1, #2
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f001 f955 	bl	80038bc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b22      	cmp	r3, #34	; 0x22
 800261c:	d101      	bne.n	8002622 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800261e:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <I2C_Mem_ISR_IT+0x248>)
 8002620:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	2bff      	cmp	r3, #255	; 0xff
 800262a:	d910      	bls.n	800264e <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	22ff      	movs	r2, #255	; 0xff
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	b299      	uxth	r1, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	b2da      	uxtb	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f001 f906 	bl	8003858 <I2C_TransferConfig>
 800264c:	e011      	b.n	8002672 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	b299      	uxth	r1, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	b2da      	uxtb	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f001 f8f3 	bl	8003858 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002686:	6939      	ldr	r1, [r7, #16]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fd0b 	bl	80030a4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	80002000 	.word	0x80002000
 80026a4:	80002400 	.word	0x80002400

080026a8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <I2C_Slave_ISR_IT+0x24>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e0e2      	b.n	8002892 <I2C_Slave_ISR_IT+0x1ea>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80026e8:	6939      	ldr	r1, [r7, #16]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fda2 	bl	8003234 <I2C_ITSlaveCplt>
 80026f0:	e0ca      	b.n	8002888 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d04b      	beq.n	8002794 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002702:	2b00      	cmp	r3, #0
 8002704:	d046      	beq.n	8002794 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d128      	bne.n	8002762 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b28      	cmp	r3, #40	; 0x28
 800271a:	d108      	bne.n	800272e <I2C_Slave_ISR_IT+0x86>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002722:	d104      	bne.n	800272e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002724:	6939      	ldr	r1, [r7, #16]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fee8 	bl	80034fc <I2C_ITListenCplt>
 800272c:	e031      	b.n	8002792 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b29      	cmp	r3, #41	; 0x29
 8002738:	d10e      	bne.n	8002758 <I2C_Slave_ISR_IT+0xb0>
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002740:	d00a      	beq.n	8002758 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2210      	movs	r2, #16
 8002748:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f001 f841 	bl	80037d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fc4b 	bl	8002fec <I2C_ITSlaveSeqCplt>
 8002756:	e01c      	b.n	8002792 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2210      	movs	r2, #16
 800275e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002760:	e08f      	b.n	8002882 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2210      	movs	r2, #16
 8002768:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f043 0204 	orr.w	r2, r3, #4
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <I2C_Slave_ISR_IT+0xdc>
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002782:	d17e      	bne.n	8002882 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002788:	4619      	mov	r1, r3
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 ff0a 	bl	80035a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002790:	e077      	b.n	8002882 <I2C_Slave_ISR_IT+0x1da>
 8002792:	e076      	b.n	8002882 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d02f      	beq.n	80027fe <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d02a      	beq.n	80027fe <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d018      	beq.n	80027e4 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d14b      	bne.n	8002886 <I2C_Slave_ISR_IT+0x1de>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027f4:	d047      	beq.n	8002886 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fbf8 	bl	8002fec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80027fc:	e043      	b.n	8002886 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d009      	beq.n	800281c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800280e:	2b00      	cmp	r3, #0
 8002810:	d004      	beq.n	800281c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002812:	6939      	ldr	r1, [r7, #16]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fb28 	bl	8002e6a <I2C_ITAddrCplt>
 800281a:	e035      	b.n	8002888 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d030      	beq.n	8002888 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800282c:	2b00      	cmp	r3, #0
 800282e:	d02b      	beq.n	8002888 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d018      	beq.n	800286c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	781a      	ldrb	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
 800286a:	e00d      	b.n	8002888 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002872:	d002      	beq.n	800287a <I2C_Slave_ISR_IT+0x1d2>
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fbb6 	bl	8002fec <I2C_ITSlaveSeqCplt>
 8002880:	e002      	b.n	8002888 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002882:	bf00      	nop
 8002884:	e000      	b.n	8002888 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002886:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b088      	sub	sp, #32
 800289e:	af02      	add	r7, sp, #8
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <I2C_Master_ISR_DMA+0x1a>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e0d9      	b.n	8002a68 <I2C_Master_ISR_DMA+0x1ce>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d016      	beq.n	80028f4 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d011      	beq.n	80028f4 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2210      	movs	r2, #16
 80028d6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80028e4:	2120      	movs	r1, #32
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 ffe8 	bl	80038bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 ff70 	bl	80037d2 <I2C_Flush_TXDR>
 80028f2:	e0b4      	b.n	8002a5e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d071      	beq.n	80029e2 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002904:	2b00      	cmp	r3, #0
 8002906:	d06c      	beq.n	80029e2 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002916:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d04e      	beq.n	80029c0 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	b29b      	uxth	r3, r3
 800292a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800292e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	2bff      	cmp	r3, #255	; 0xff
 8002938:	d906      	bls.n	8002948 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	22ff      	movs	r2, #255	; 0xff
 800293e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e010      	b.n	800296a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800295a:	d003      	beq.n	8002964 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	e002      	b.n	800296a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002968:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	b2da      	uxtb	r2, r3
 8002970:	8a79      	ldrh	r1, [r7, #18]
 8002972:	2300      	movs	r3, #0
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 ff6d 	bl	8003858 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b22      	cmp	r3, #34	; 0x22
 800299a:	d108      	bne.n	80029ae <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029aa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80029ac:	e057      	b.n	8002a5e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029bc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80029be:	e04e      	b.n	8002a5e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029ce:	d003      	beq.n	80029d8 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 face 	bl	8002f72 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80029d6:	e042      	b.n	8002a5e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80029d8:	2140      	movs	r1, #64	; 0x40
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fde2 	bl	80035a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80029e0:	e03d      	b.n	8002a5e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d028      	beq.n	8002a3e <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d023      	beq.n	8002a3e <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d119      	bne.n	8002a34 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a0e:	d025      	beq.n	8002a5c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a18:	d108      	bne.n	8002a2c <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a28:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002a2a:	e017      	b.n	8002a5c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 faa0 	bl	8002f72 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002a32:	e013      	b.n	8002a5c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a34:	2140      	movs	r1, #64	; 0x40
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 fdb4 	bl	80035a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002a3c:	e00e      	b.n	8002a5c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fb25 	bl	80030a4 <I2C_ITMasterCplt>
 8002a5a:	e000      	b.n	8002a5e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002a5c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002a7c:	4b8d      	ldr	r3, [pc, #564]	; (8002cb4 <I2C_Mem_ISR_DMA+0x244>)
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <I2C_Mem_ISR_DMA+0x1e>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e10e      	b.n	8002cac <I2C_Mem_ISR_DMA+0x23c>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d016      	beq.n	8002ace <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d011      	beq.n	8002ace <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2210      	movs	r2, #16
 8002ab0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002abe:	2120      	movs	r1, #32
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fefb 	bl	80038bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fe83 	bl	80037d2 <I2C_Flush_TXDR>
 8002acc:	e0e9      	b.n	8002ca2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00e      	beq.n	8002af6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f04f 32ff 	mov.w	r2, #4294967295
 8002af2:	651a      	str	r2, [r3, #80]	; 0x50
 8002af4:	e0d5      	b.n	8002ca2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d05f      	beq.n	8002bc0 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d05a      	beq.n	8002bc0 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 ff59 	bl	80039c4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002b12:	2110      	movs	r1, #16
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fed1 	bl	80038bc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d048      	beq.n	8002bb6 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2bff      	cmp	r3, #255	; 0xff
 8002b2c:	d910      	bls.n	8002b50 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	22ff      	movs	r2, #255	; 0xff
 8002b32:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b38:	b299      	uxth	r1, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	2300      	movs	r3, #0
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fe85 	bl	8003858 <I2C_TransferConfig>
 8002b4e:	e011      	b.n	8002b74 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	b299      	uxth	r1, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	2300      	movs	r3, #0
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fe72 	bl	8003858 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b22      	cmp	r3, #34	; 0x22
 8002b90:	d108      	bne.n	8002ba4 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ba0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ba2:	e07e      	b.n	8002ca2 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bb2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002bb4:	e075      	b.n	8002ca2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002bb6:	2140      	movs	r1, #64	; 0x40
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 fcf3 	bl	80035a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002bbe:	e070      	b.n	8002ca2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d05d      	beq.n	8002c86 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d058      	beq.n	8002c86 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 fef4 	bl	80039c4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002bdc:	2110      	movs	r1, #16
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fe6c 	bl	80038bc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b22      	cmp	r3, #34	; 0x22
 8002bee:	d101      	bne.n	8002bf4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002bf0:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <I2C_Mem_ISR_DMA+0x248>)
 8002bf2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2bff      	cmp	r3, #255	; 0xff
 8002bfc:	d910      	bls.n	8002c20 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	22ff      	movs	r2, #255	; 0xff
 8002c02:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c08:	b299      	uxth	r1, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fe1d 	bl	8003858 <I2C_TransferConfig>
 8002c1e:	e011      	b.n	8002c44 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2e:	b299      	uxth	r1, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fe0a 	bl	8003858 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b22      	cmp	r3, #34	; 0x22
 8002c60:	d108      	bne.n	8002c74 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c70:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c72:	e016      	b.n	8002ca2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c82:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c84:	e00d      	b.n	8002ca2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fa01 	bl	80030a4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	80002000 	.word	0x80002000
 8002cb8:	80002400 	.word	0x80002400

08002cbc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <I2C_Slave_ISR_DMA+0x24>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e0c0      	b.n	8002e62 <I2C_Slave_ISR_DMA+0x1a6>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d004      	beq.n	8002d06 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fa98 	bl	8003234 <I2C_ITSlaveCplt>
 8002d04:	e0a8      	b.n	8002e58 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8095 	beq.w	8002e3c <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 808f 	beq.w	8002e3c <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d07d      	beq.n	8002e2e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00c      	beq.n	8002d54 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002d50:	2301      	movs	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00c      	beq.n	8002d76 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002d72:	2301      	movs	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d128      	bne.n	8002dce <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b28      	cmp	r3, #40	; 0x28
 8002d86:	d108      	bne.n	8002d9a <I2C_Slave_ISR_DMA+0xde>
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d8e:	d104      	bne.n	8002d9a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fbb2 	bl	80034fc <I2C_ITListenCplt>
 8002d98:	e048      	b.n	8002e2c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b29      	cmp	r3, #41	; 0x29
 8002da4:	d10e      	bne.n	8002dc4 <I2C_Slave_ISR_DMA+0x108>
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dac:	d00a      	beq.n	8002dc4 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2210      	movs	r2, #16
 8002db4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fd0b 	bl	80037d2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f915 	bl	8002fec <I2C_ITSlaveSeqCplt>
 8002dc2:	e033      	b.n	8002e2c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2210      	movs	r2, #16
 8002dca:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002dcc:	e034      	b.n	8002e38 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f043 0204 	orr.w	r2, r3, #4
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <I2C_Slave_ISR_DMA+0x13c>
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df6:	d11f      	bne.n	8002e38 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b21      	cmp	r3, #33	; 0x21
 8002dfc:	d002      	beq.n	8002e04 <I2C_Slave_ISR_DMA+0x148>
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	2b29      	cmp	r3, #41	; 0x29
 8002e02:	d103      	bne.n	8002e0c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2221      	movs	r2, #33	; 0x21
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
 8002e0a:	e008      	b.n	8002e1e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	2b22      	cmp	r3, #34	; 0x22
 8002e10:	d002      	beq.n	8002e18 <I2C_Slave_ISR_DMA+0x15c>
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	2b2a      	cmp	r3, #42	; 0x2a
 8002e16:	d102      	bne.n	8002e1e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2222      	movs	r2, #34	; 0x22
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4619      	mov	r1, r3
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 fbbd 	bl	80035a4 <I2C_ITError>
      if (treatdmanack == 1U)
 8002e2a:	e005      	b.n	8002e38 <I2C_Slave_ISR_DMA+0x17c>
 8002e2c:	e004      	b.n	8002e38 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2210      	movs	r2, #16
 8002e34:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e36:	e00f      	b.n	8002e58 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002e38:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e3a:	e00d      	b.n	8002e58 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f809 	bl	8002e6a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e80:	2b28      	cmp	r3, #40	; 0x28
 8002e82:	d16a      	bne.n	8002f5a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002ea2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002ebe:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d138      	bne.n	8002f3a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002ec8:	897b      	ldrh	r3, [r7, #10]
 8002eca:	09db      	lsrs	r3, r3, #7
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	89bb      	ldrh	r3, [r7, #12]
 8002ed0:	4053      	eors	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f003 0306 	and.w	r3, r3, #6
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d11c      	bne.n	8002f16 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002edc:	897b      	ldrh	r3, [r7, #10]
 8002ede:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d13b      	bne.n	8002f6a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2208      	movs	r2, #8
 8002efe:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f08:	89ba      	ldrh	r2, [r7, #12]
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff fa63 	bl	80023da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f14:	e029      	b.n	8002f6a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fd50 	bl	80039c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f2c:	89ba      	ldrh	r2, [r7, #12]
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fa51 	bl	80023da <HAL_I2C_AddrCallback>
}
 8002f38:	e017      	b.n	8002f6a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fd40 	bl	80039c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f4c:	89ba      	ldrh	r2, [r7, #12]
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	4619      	mov	r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff fa41 	bl	80023da <HAL_I2C_AddrCallback>
}
 8002f58:	e007      	b.n	8002f6a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2208      	movs	r2, #8
 8002f60:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b21      	cmp	r3, #33	; 0x21
 8002f8c:	d115      	bne.n	8002fba <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2211      	movs	r2, #17
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fd0d 	bl	80039c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff f9e9 	bl	800238a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fb8:	e014      	b.n	8002fe4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2212      	movs	r2, #18
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fce:	2102      	movs	r1, #2
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fcf7 	bl	80039c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff f9dd 	bl	800239e <HAL_I2C_MasterRxCpltCallback>
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	e00c      	b.n	800303a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003038:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b29      	cmp	r3, #41	; 0x29
 8003044:	d112      	bne.n	800306c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2228      	movs	r2, #40	; 0x28
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2221      	movs	r2, #33	; 0x21
 8003052:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003054:	2101      	movs	r1, #1
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fcb4 	bl	80039c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff f9a4 	bl	80023b2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800306a:	e017      	b.n	800309c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b2a      	cmp	r3, #42	; 0x2a
 8003076:	d111      	bne.n	800309c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2228      	movs	r2, #40	; 0x28
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2222      	movs	r2, #34	; 0x22
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003086:	2102      	movs	r1, #2
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fc9b 	bl	80039c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff f995 	bl	80023c6 <HAL_I2C_SlaveRxCpltCallback>
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2220      	movs	r2, #32
 80030b8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b21      	cmp	r3, #33	; 0x21
 80030c4:	d107      	bne.n	80030d6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030c6:	2101      	movs	r1, #1
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fc7b 	bl	80039c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2211      	movs	r2, #17
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
 80030d4:	e00c      	b.n	80030f0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b22      	cmp	r3, #34	; 0x22
 80030e0:	d106      	bne.n	80030f0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80030e2:	2102      	movs	r1, #2
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fc6d 	bl	80039c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2212      	movs	r2, #18
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6859      	ldr	r1, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b4c      	ldr	r3, [pc, #304]	; (800322c <I2C_ITMasterCplt+0x188>)
 80030fc:	400b      	ands	r3, r1
 80030fe:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a49      	ldr	r2, [pc, #292]	; (8003230 <I2C_ITMasterCplt+0x18c>)
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2210      	movs	r2, #16
 800311c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f043 0204 	orr.w	r2, r3, #4
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b60      	cmp	r3, #96	; 0x60
 8003134:	d10a      	bne.n	800314c <I2C_ITMasterCplt+0xa8>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	b2db      	uxtb	r3, r3
 8003148:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800314a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 fb40 	bl	80037d2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b60      	cmp	r3, #96	; 0x60
 8003162:	d002      	beq.n	800316a <I2C_ITMasterCplt+0xc6>
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	4619      	mov	r1, r3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fa17 	bl	80035a4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003176:	e054      	b.n	8003222 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b21      	cmp	r3, #33	; 0x21
 8003182:	d124      	bne.n	80031ce <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b40      	cmp	r3, #64	; 0x40
 800319c:	d10b      	bne.n	80031b6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff f92b 	bl	800240a <HAL_I2C_MemTxCpltCallback>
}
 80031b4:	e035      	b.n	8003222 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff f8df 	bl	800238a <HAL_I2C_MasterTxCpltCallback>
}
 80031cc:	e029      	b.n	8003222 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b22      	cmp	r3, #34	; 0x22
 80031d8:	d123      	bne.n	8003222 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b40      	cmp	r3, #64	; 0x40
 80031f2:	d10b      	bne.n	800320c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff f90a 	bl	800241e <HAL_I2C_MemRxCpltCallback>
}
 800320a:	e00a      	b.n	8003222 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff f8be 	bl	800239e <HAL_I2C_MasterRxCpltCallback>
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	fe00e800 	.word	0xfe00e800
 8003230:	ffff0000 	.word	0xffff0000

08003234 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003256:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2220      	movs	r2, #32
 800325e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003260:	7afb      	ldrb	r3, [r7, #11]
 8003262:	2b21      	cmp	r3, #33	; 0x21
 8003264:	d002      	beq.n	800326c <I2C_ITSlaveCplt+0x38>
 8003266:	7afb      	ldrb	r3, [r7, #11]
 8003268:	2b29      	cmp	r3, #41	; 0x29
 800326a:	d108      	bne.n	800327e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800326c:	f248 0101 	movw	r1, #32769	; 0x8001
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fba7 	bl	80039c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2221      	movs	r2, #33	; 0x21
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
 800327c:	e019      	b.n	80032b2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800327e:	7afb      	ldrb	r3, [r7, #11]
 8003280:	2b22      	cmp	r3, #34	; 0x22
 8003282:	d002      	beq.n	800328a <I2C_ITSlaveCplt+0x56>
 8003284:	7afb      	ldrb	r3, [r7, #11]
 8003286:	2b2a      	cmp	r3, #42	; 0x2a
 8003288:	d108      	bne.n	800329c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800328a:	f248 0102 	movw	r1, #32770	; 0x8002
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fb98 	bl	80039c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2222      	movs	r2, #34	; 0x22
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
 800329a:	e00a      	b.n	80032b2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800329c:	7afb      	ldrb	r3, [r7, #11]
 800329e:	2b28      	cmp	r3, #40	; 0x28
 80032a0:	d107      	bne.n	80032b2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80032a2:	f248 0103 	movw	r1, #32771	; 0x8003
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fb8c 	bl	80039c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b89      	ldr	r3, [pc, #548]	; (80034f4 <I2C_ITSlaveCplt+0x2c0>)
 80032ce:	400b      	ands	r3, r1
 80032d0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa7d 	bl	80037d2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d013      	beq.n	800330a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01f      	beq.n	800333a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	b29a      	uxth	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003308:	e017      	b.n	800333a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d012      	beq.n	800333a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003322:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d006      	beq.n	800333a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	b29a      	uxth	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0304 	bic.w	r3, r3, #4
 800334a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00c      	beq.n	8003386 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	f043 0204 	orr.w	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d049      	beq.n	800343a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d044      	beq.n	800343a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d128      	bne.n	800340c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b28      	cmp	r3, #40	; 0x28
 80033c4:	d108      	bne.n	80033d8 <I2C_ITSlaveCplt+0x1a4>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033cc:	d104      	bne.n	80033d8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033ce:	6979      	ldr	r1, [r7, #20]
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f893 	bl	80034fc <I2C_ITListenCplt>
 80033d6:	e030      	b.n	800343a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b29      	cmp	r3, #41	; 0x29
 80033e2:	d10e      	bne.n	8003402 <I2C_ITSlaveCplt+0x1ce>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033ea:	d00a      	beq.n	8003402 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2210      	movs	r2, #16
 80033f2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f9ec 	bl	80037d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff fdf6 	bl	8002fec <I2C_ITSlaveSeqCplt>
 8003400:	e01b      	b.n	800343a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2210      	movs	r2, #16
 8003408:	61da      	str	r2, [r3, #28]
 800340a:	e016      	b.n	800343a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2210      	movs	r2, #16
 8003412:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	f043 0204 	orr.w	r2, r3, #4
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <I2C_ITSlaveCplt+0x1fa>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800342c:	d105      	bne.n	800343a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8b5 	bl	80035a4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	2b00      	cmp	r3, #0
 800344e:	d010      	beq.n	8003472 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8a4 	bl	80035a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b28      	cmp	r3, #40	; 0x28
 8003466:	d141      	bne.n	80034ec <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003468:	6979      	ldr	r1, [r7, #20]
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f846 	bl	80034fc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003470:	e03c      	b.n	80034ec <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800347a:	d014      	beq.n	80034a6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff fdb5 	bl	8002fec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <I2C_ITSlaveCplt+0x2c4>)
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fe ffa9 	bl	80023f6 <HAL_I2C_ListenCpltCallback>
}
 80034a4:	e022      	b.n	80034ec <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b22      	cmp	r3, #34	; 0x22
 80034b0:	d10e      	bne.n	80034d0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7fe ff7c 	bl	80023c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80034ce:	e00d      	b.n	80034ec <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe ff63 	bl	80023b2 <HAL_I2C_SlaveTxCpltCallback>
}
 80034ec:	bf00      	nop
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	fe00e800 	.word	0xfe00e800
 80034f8:	ffff0000 	.word	0xffff0000

080034fc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <I2C_ITListenCplt+0xa4>)
 800350a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d022      	beq.n	8003578 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d012      	beq.n	8003578 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	f043 0204 	orr.w	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003578:	f248 0103 	movw	r1, #32771	; 0x8003
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fa21 	bl	80039c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2210      	movs	r2, #16
 8003588:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fe ff2f 	bl	80023f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	ffff0000 	.word	0xffff0000

080035a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a6d      	ldr	r2, [pc, #436]	; (8003778 <I2C_ITError+0x1d4>)
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b28      	cmp	r3, #40	; 0x28
 80035da:	d005      	beq.n	80035e8 <I2C_ITError+0x44>
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b29      	cmp	r3, #41	; 0x29
 80035e0:	d002      	beq.n	80035e8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b2a      	cmp	r3, #42	; 0x2a
 80035e6:	d10b      	bne.n	8003600 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035e8:	2103      	movs	r1, #3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f9ea 	bl	80039c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2228      	movs	r2, #40	; 0x28
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a60      	ldr	r2, [pc, #384]	; (800377c <I2C_ITError+0x1d8>)
 80035fc:	635a      	str	r2, [r3, #52]	; 0x34
 80035fe:	e030      	b.n	8003662 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003600:	f248 0103 	movw	r1, #32771	; 0x8003
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f9dd 	bl	80039c4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f8e1 	bl	80037d2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b60      	cmp	r3, #96	; 0x60
 800361a:	d01f      	beq.n	800365c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b20      	cmp	r3, #32
 8003630:	d114      	bne.n	800365c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b10      	cmp	r3, #16
 800363e:	d109      	bne.n	8003654 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2210      	movs	r2, #16
 8003646:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2220      	movs	r2, #32
 800365a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	2b00      	cmp	r3, #0
 800366e:	d039      	beq.n	80036e4 <I2C_ITError+0x140>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b11      	cmp	r3, #17
 8003674:	d002      	beq.n	800367c <I2C_ITError+0xd8>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b21      	cmp	r3, #33	; 0x21
 800367a:	d133      	bne.n	80036e4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800368a:	d107      	bne.n	800369c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800369a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe fa0d 	bl	8001ac0 <HAL_DMA_GetState>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d017      	beq.n	80036dc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	4a33      	ldr	r2, [pc, #204]	; (8003780 <I2C_ITError+0x1dc>)
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe f8e7 	bl	8001894 <HAL_DMA_Abort_IT>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d04d      	beq.n	8003768 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036d6:	4610      	mov	r0, r2
 80036d8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036da:	e045      	b.n	8003768 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f851 	bl	8003784 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036e2:	e041      	b.n	8003768 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d039      	beq.n	8003760 <I2C_ITError+0x1bc>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b12      	cmp	r3, #18
 80036f0:	d002      	beq.n	80036f8 <I2C_ITError+0x154>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b22      	cmp	r3, #34	; 0x22
 80036f6:	d133      	bne.n	8003760 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003706:	d107      	bne.n	8003718 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003716:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe f9cf 	bl	8001ac0 <HAL_DMA_GetState>
 8003722:	4603      	mov	r3, r0
 8003724:	2b01      	cmp	r3, #1
 8003726:	d017      	beq.n	8003758 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	4a14      	ldr	r2, [pc, #80]	; (8003780 <I2C_ITError+0x1dc>)
 800372e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe f8a9 	bl	8001894 <HAL_DMA_Abort_IT>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d011      	beq.n	800376c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003752:	4610      	mov	r0, r2
 8003754:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003756:	e009      	b.n	800376c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f813 	bl	8003784 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800375e:	e005      	b.n	800376c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f80f 	bl	8003784 <I2C_TreatErrorCallback>
  }
}
 8003766:	e002      	b.n	800376e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800376c:	bf00      	nop
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	ffff0000 	.word	0xffff0000
 800377c:	080026a9 	.word	0x080026a9
 8003780:	0800381b 	.word	0x0800381b

08003784 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b60      	cmp	r3, #96	; 0x60
 8003796:	d10e      	bne.n	80037b6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fe fe49 	bl	8002446 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037b4:	e009      	b.n	80037ca <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fe fe34 	bl	8002432 <HAL_I2C_ErrorCallback>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d103      	bne.n	80037f0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2200      	movs	r2, #0
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d007      	beq.n	800380e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0201 	orr.w	r2, r2, #1
 800380c:	619a      	str	r2, [r3, #24]
  }
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	2200      	movs	r2, #0
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003844:	2200      	movs	r2, #0
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f7ff ff9b 	bl	8003784 <I2C_TreatErrorCallback>
}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	817b      	strh	r3, [r7, #10]
 8003866:	4613      	mov	r3, r2
 8003868:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800386a:	897b      	ldrh	r3, [r7, #10]
 800386c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003870:	7a7b      	ldrb	r3, [r7, #9]
 8003872:	041b      	lsls	r3, r3, #16
 8003874:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003878:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	4313      	orrs	r3, r2
 8003882:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003886:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	0d5b      	lsrs	r3, r3, #21
 8003892:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <I2C_TransferConfig+0x60>)
 8003898:	430b      	orrs	r3, r1
 800389a:	43db      	mvns	r3, r3
 800389c:	ea02 0103 	and.w	r1, r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	03ff63ff 	.word	0x03ff63ff

080038bc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	4a39      	ldr	r2, [pc, #228]	; (80039b8 <I2C_Enable_IRQ+0xfc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d032      	beq.n	800393c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80038da:	4a38      	ldr	r2, [pc, #224]	; (80039bc <I2C_Enable_IRQ+0x100>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d02d      	beq.n	800393c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80038e4:	4a36      	ldr	r2, [pc, #216]	; (80039c0 <I2C_Enable_IRQ+0x104>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d028      	beq.n	800393c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80038ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	da03      	bge.n	80038fa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80038f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80038fa:	887b      	ldrh	r3, [r7, #2]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800390a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800390c:	887b      	ldrh	r3, [r7, #2]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800391c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800391e:	887b      	ldrh	r3, [r7, #2]
 8003920:	2b10      	cmp	r3, #16
 8003922:	d103      	bne.n	800392c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800392a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800392c:	887b      	ldrh	r3, [r7, #2]
 800392e:	2b20      	cmp	r3, #32
 8003930:	d133      	bne.n	800399a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f043 0320 	orr.w	r3, r3, #32
 8003938:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800393a:	e02e      	b.n	800399a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800393c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003940:	2b00      	cmp	r3, #0
 8003942:	da03      	bge.n	800394c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800394a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800394c:	887b      	ldrh	r3, [r7, #2]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800395c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800396e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	2b10      	cmp	r3, #16
 8003974:	d103      	bne.n	800397e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800397c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800397e:	887b      	ldrh	r3, [r7, #2]
 8003980:	2b20      	cmp	r3, #32
 8003982:	d103      	bne.n	800398c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800398a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800398c:	887b      	ldrh	r3, [r7, #2]
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d103      	bne.n	800399a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003998:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	0800289b 	.word	0x0800289b
 80039bc:	08002cbd 	.word	0x08002cbd
 80039c0:	08002a71 	.word	0x08002a71

080039c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039d4:	887b      	ldrh	r3, [r7, #2]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00f      	beq.n	80039fe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80039e4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039f2:	2b28      	cmp	r3, #40	; 0x28
 80039f4:	d003      	beq.n	80039fe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80039fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80039fe:	887b      	ldrh	r3, [r7, #2]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00f      	beq.n	8003a28 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003a0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a1c:	2b28      	cmp	r3, #40	; 0x28
 8003a1e:	d003      	beq.n	8003a28 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003a26:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da03      	bge.n	8003a38 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a38:	887b      	ldrh	r3, [r7, #2]
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d103      	bne.n	8003a46 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a46:	887b      	ldrh	r3, [r7, #2]
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d103      	bne.n	8003a54 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f043 0320 	orr.w	r3, r3, #32
 8003a52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a54:	887b      	ldrh	r3, [r7, #2]
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d103      	bne.n	8003a62 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6819      	ldr	r1, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	400a      	ands	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d138      	bne.n	8003b08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e032      	b.n	8003b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2224      	movs	r2, #36	; 0x24
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d139      	bne.n	8003ba0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e033      	b.n	8003ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2224      	movs	r2, #36	; 0x24
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e000      	b.n	8003ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d141      	bne.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bbe:	4b4b      	ldr	r3, [pc, #300]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bca:	d131      	bne.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bcc:	4b47      	ldr	r3, [pc, #284]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd2:	4a46      	ldr	r2, [pc, #280]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bdc:	4b43      	ldr	r3, [pc, #268]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003be4:	4a41      	ldr	r2, [pc, #260]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bec:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2232      	movs	r2, #50	; 0x32
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	4a3f      	ldr	r2, [pc, #252]	; (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	0c9b      	lsrs	r3, r3, #18
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c02:	e002      	b.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c0a:	4b38      	ldr	r3, [pc, #224]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c16:	d102      	bne.n	8003c1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f2      	bne.n	8003c04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c1e:	4b33      	ldr	r3, [pc, #204]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2a:	d158      	bne.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e057      	b.n	8003ce0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c30:	4b2e      	ldr	r3, [pc, #184]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c36:	4a2d      	ldr	r2, [pc, #180]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c40:	e04d      	b.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c48:	d141      	bne.n	8003cce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c4a:	4b28      	ldr	r3, [pc, #160]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c56:	d131      	bne.n	8003cbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c58:	4b24      	ldr	r3, [pc, #144]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c5e:	4a23      	ldr	r2, [pc, #140]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c68:	4b20      	ldr	r3, [pc, #128]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c78:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2232      	movs	r2, #50	; 0x32
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	4a1c      	ldr	r2, [pc, #112]	; (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	0c9b      	lsrs	r3, r3, #18
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c8e:	e002      	b.n	8003c96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca2:	d102      	bne.n	8003caa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f2      	bne.n	8003c90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb6:	d112      	bne.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e011      	b.n	8003ce0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ccc:	e007      	b.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cd6:	4a05      	ldr	r2, [pc, #20]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cdc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	20000004 	.word	0x20000004
 8003cf4:	431bde83 	.word	0x431bde83

08003cf8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d06:	6093      	str	r3, [r2, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40007000 	.word	0x40007000

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e2fe      	b.n	8004328 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d075      	beq.n	8003e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d36:	4b97      	ldr	r3, [pc, #604]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d40:	4b94      	ldr	r3, [pc, #592]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b0c      	cmp	r3, #12
 8003d4e:	d102      	bne.n	8003d56 <HAL_RCC_OscConfig+0x3e>
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d002      	beq.n	8003d5c <HAL_RCC_OscConfig+0x44>
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d10b      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	4b8d      	ldr	r3, [pc, #564]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d05b      	beq.n	8003e20 <HAL_RCC_OscConfig+0x108>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d157      	bne.n	8003e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e2d9      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCC_OscConfig+0x74>
 8003d7e:	4b85      	ldr	r3, [pc, #532]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a84      	ldr	r2, [pc, #528]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e01d      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x98>
 8003d96:	4b7f      	ldr	r3, [pc, #508]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a7e      	ldr	r2, [pc, #504]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b7c      	ldr	r3, [pc, #496]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7b      	ldr	r2, [pc, #492]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb0>
 8003db0:	4b78      	ldr	r3, [pc, #480]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a77      	ldr	r2, [pc, #476]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b75      	ldr	r3, [pc, #468]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a74      	ldr	r2, [pc, #464]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fb7a 	bl	80014c8 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fd fb76 	bl	80014c8 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e29e      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dea:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xc0>
 8003df6:	e014      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd fb66 	bl	80014c8 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd fb62 	bl	80014c8 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e28a      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e12:	4b60      	ldr	r3, [pc, #384]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0xe8>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d075      	beq.n	8003f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2e:	4b59      	ldr	r3, [pc, #356]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e38:	4b56      	ldr	r3, [pc, #344]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	d102      	bne.n	8003e4e <HAL_RCC_OscConfig+0x136>
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d002      	beq.n	8003e54 <HAL_RCC_OscConfig+0x13c>
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d11f      	bne.n	8003e94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e54:	4b4f      	ldr	r3, [pc, #316]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_OscConfig+0x154>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e25d      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6c:	4b49      	ldr	r3, [pc, #292]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	4946      	ldr	r1, [pc, #280]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e80:	4b45      	ldr	r3, [pc, #276]	; (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fd fad3 	bl	8001430 <HAL_InitTick>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d043      	beq.n	8003f18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e249      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d023      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e9c:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a3c      	ldr	r2, [pc, #240]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fd fb0e 	bl	80014c8 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb0:	f7fd fb0a 	bl	80014c8 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e232      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec2:	4b34      	ldr	r3, [pc, #208]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ece:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	061b      	lsls	r3, r3, #24
 8003edc:	492d      	ldr	r1, [pc, #180]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	604b      	str	r3, [r1, #4]
 8003ee2:	e01a      	b.n	8003f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fd faea 	bl	80014c8 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef8:	f7fd fae6 	bl	80014c8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e20e      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f0a:	4b22      	ldr	r3, [pc, #136]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x1e0>
 8003f16:	e000      	b.n	8003f1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d041      	beq.n	8003faa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d01c      	beq.n	8003f68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2e:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f34:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3e:	f7fd fac3 	bl	80014c8 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f46:	f7fd fabf 	bl	80014c8 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e1e7      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0ef      	beq.n	8003f46 <HAL_RCC_OscConfig+0x22e>
 8003f66:	e020      	b.n	8003faa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f68:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6e:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fd faa6 	bl	80014c8 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f7e:	e00d      	b.n	8003f9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f80:	f7fd faa2 	bl	80014c8 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d906      	bls.n	8003f9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e1ca      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
 8003f92:	bf00      	nop
 8003f94:	40021000 	.word	0x40021000
 8003f98:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f9c:	4b8c      	ldr	r3, [pc, #560]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8003f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1ea      	bne.n	8003f80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 80a6 	beq.w	8004104 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fbc:	4b84      	ldr	r3, [pc, #528]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_OscConfig+0x2b4>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <HAL_RCC_OscConfig+0x2b6>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd2:	4b7f      	ldr	r3, [pc, #508]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	4a7e      	ldr	r2, [pc, #504]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8003fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8003fde:	4b7c      	ldr	r3, [pc, #496]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fea:	2301      	movs	r3, #1
 8003fec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fee:	4b79      	ldr	r3, [pc, #484]	; (80041d4 <HAL_RCC_OscConfig+0x4bc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d118      	bne.n	800402c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ffa:	4b76      	ldr	r3, [pc, #472]	; (80041d4 <HAL_RCC_OscConfig+0x4bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a75      	ldr	r2, [pc, #468]	; (80041d4 <HAL_RCC_OscConfig+0x4bc>)
 8004000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004006:	f7fd fa5f 	bl	80014c8 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400e:	f7fd fa5b 	bl	80014c8 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e183      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004020:	4b6c      	ldr	r3, [pc, #432]	; (80041d4 <HAL_RCC_OscConfig+0x4bc>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d108      	bne.n	8004046 <HAL_RCC_OscConfig+0x32e>
 8004034:	4b66      	ldr	r3, [pc, #408]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	4a65      	ldr	r2, [pc, #404]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004044:	e024      	b.n	8004090 <HAL_RCC_OscConfig+0x378>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b05      	cmp	r3, #5
 800404c:	d110      	bne.n	8004070 <HAL_RCC_OscConfig+0x358>
 800404e:	4b60      	ldr	r3, [pc, #384]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004054:	4a5e      	ldr	r2, [pc, #376]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004056:	f043 0304 	orr.w	r3, r3, #4
 800405a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800405e:	4b5c      	ldr	r3, [pc, #368]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	4a5a      	ldr	r2, [pc, #360]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800406e:	e00f      	b.n	8004090 <HAL_RCC_OscConfig+0x378>
 8004070:	4b57      	ldr	r3, [pc, #348]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	4a56      	ldr	r2, [pc, #344]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004080:	4b53      	ldr	r3, [pc, #332]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	4a52      	ldr	r2, [pc, #328]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004088:	f023 0304 	bic.w	r3, r3, #4
 800408c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d016      	beq.n	80040c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fd fa16 	bl	80014c8 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a0:	f7fd fa12 	bl	80014c8 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e138      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b6:	4b46      	ldr	r3, [pc, #280]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0ed      	beq.n	80040a0 <HAL_RCC_OscConfig+0x388>
 80040c4:	e015      	b.n	80040f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fd f9ff 	bl	80014c8 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fd f9fb 	bl	80014c8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e121      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040e4:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1ed      	bne.n	80040ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040f2:	7ffb      	ldrb	r3, [r7, #31]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d105      	bne.n	8004104 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f8:	4b35      	ldr	r3, [pc, #212]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	4a34      	ldr	r2, [pc, #208]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 80040fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004102:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d03c      	beq.n	800418a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01c      	beq.n	8004152 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004118:	4b2d      	ldr	r3, [pc, #180]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 800411a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800411e:	4a2c      	ldr	r2, [pc, #176]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fd f9ce 	bl	80014c8 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004130:	f7fd f9ca 	bl	80014c8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e0f2      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004142:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0ef      	beq.n	8004130 <HAL_RCC_OscConfig+0x418>
 8004150:	e01b      	b.n	800418a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004152:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004158:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 800415a:	f023 0301 	bic.w	r3, r3, #1
 800415e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004162:	f7fd f9b1 	bl	80014c8 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800416a:	f7fd f9ad 	bl	80014c8 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e0d5      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800417c:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 800417e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1ef      	bne.n	800416a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 80c9 	beq.w	8004326 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004194:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 030c 	and.w	r3, r3, #12
 800419c:	2b0c      	cmp	r3, #12
 800419e:	f000 8083 	beq.w	80042a8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d15e      	bne.n	8004268 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a08      	ldr	r2, [pc, #32]	; (80041d0 <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b6:	f7fd f987 	bl	80014c8 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041bc:	e00c      	b.n	80041d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041be:	f7fd f983 	bl	80014c8 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d905      	bls.n	80041d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e0ab      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d8:	4b55      	ldr	r3, [pc, #340]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1ec      	bne.n	80041be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e4:	4b52      	ldr	r3, [pc, #328]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	4b52      	ldr	r3, [pc, #328]	; (8004334 <HAL_RCC_OscConfig+0x61c>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6a11      	ldr	r1, [r2, #32]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041f4:	3a01      	subs	r2, #1
 80041f6:	0112      	lsls	r2, r2, #4
 80041f8:	4311      	orrs	r1, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041fe:	0212      	lsls	r2, r2, #8
 8004200:	4311      	orrs	r1, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004206:	0852      	lsrs	r2, r2, #1
 8004208:	3a01      	subs	r2, #1
 800420a:	0552      	lsls	r2, r2, #21
 800420c:	4311      	orrs	r1, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004212:	0852      	lsrs	r2, r2, #1
 8004214:	3a01      	subs	r2, #1
 8004216:	0652      	lsls	r2, r2, #25
 8004218:	4311      	orrs	r1, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800421e:	06d2      	lsls	r2, r2, #27
 8004220:	430a      	orrs	r2, r1
 8004222:	4943      	ldr	r1, [pc, #268]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 8004224:	4313      	orrs	r3, r2
 8004226:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004228:	4b41      	ldr	r3, [pc, #260]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a40      	ldr	r2, [pc, #256]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 800422e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004232:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004234:	4b3e      	ldr	r3, [pc, #248]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4a3d      	ldr	r2, [pc, #244]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 800423a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800423e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fd f942 	bl	80014c8 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004248:	f7fd f93e 	bl	80014c8 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e066      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425a:	4b35      	ldr	r3, [pc, #212]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0x530>
 8004266:	e05e      	b.n	8004326 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004268:	4b31      	ldr	r3, [pc, #196]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a30      	ldr	r2, [pc, #192]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 800426e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd f928 	bl	80014c8 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800427c:	f7fd f924 	bl	80014c8 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e04c      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800428e:	4b28      	ldr	r3, [pc, #160]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800429a:	4b25      	ldr	r3, [pc, #148]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	4924      	ldr	r1, [pc, #144]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 80042a0:	4b25      	ldr	r3, [pc, #148]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	60cb      	str	r3, [r1, #12]
 80042a6:	e03e      	b.n	8004326 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e039      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042b4:	4b1e      	ldr	r3, [pc, #120]	; (8004330 <HAL_RCC_OscConfig+0x618>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f003 0203 	and.w	r2, r3, #3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d12c      	bne.n	8004322 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	3b01      	subs	r3, #1
 80042d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d123      	bne.n	8004322 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d11b      	bne.n	8004322 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d113      	bne.n	8004322 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	085b      	lsrs	r3, r3, #1
 8004306:	3b01      	subs	r3, #1
 8004308:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800430a:	429a      	cmp	r2, r3
 800430c:	d109      	bne.n	8004322 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	3b01      	subs	r3, #1
 800431c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d001      	beq.n	8004326 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	019f800c 	.word	0x019f800c
 8004338:	feeefffc 	.word	0xfeeefffc

0800433c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e11e      	b.n	8004592 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004354:	4b91      	ldr	r3, [pc, #580]	; (800459c <HAL_RCC_ClockConfig+0x260>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d910      	bls.n	8004384 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b8e      	ldr	r3, [pc, #568]	; (800459c <HAL_RCC_ClockConfig+0x260>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 020f 	bic.w	r2, r3, #15
 800436a:	498c      	ldr	r1, [pc, #560]	; (800459c <HAL_RCC_ClockConfig+0x260>)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	4b8a      	ldr	r3, [pc, #552]	; (800459c <HAL_RCC_ClockConfig+0x260>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e106      	b.n	8004592 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d073      	beq.n	8004478 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b03      	cmp	r3, #3
 8004396:	d129      	bne.n	80043ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004398:	4b81      	ldr	r3, [pc, #516]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0f4      	b.n	8004592 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043a8:	f000 f99e 	bl	80046e8 <RCC_GetSysClockFreqFromPLLSource>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4a7c      	ldr	r2, [pc, #496]	; (80045a4 <HAL_RCC_ClockConfig+0x268>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d93f      	bls.n	8004436 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043b6:	4b7a      	ldr	r3, [pc, #488]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d033      	beq.n	8004436 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d12f      	bne.n	8004436 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043d6:	4b72      	ldr	r3, [pc, #456]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043de:	4a70      	ldr	r2, [pc, #448]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 80043e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	e024      	b.n	8004436 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d107      	bne.n	8004404 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043f4:	4b6a      	ldr	r3, [pc, #424]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0c6      	b.n	8004592 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004404:	4b66      	ldr	r3, [pc, #408]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0be      	b.n	8004592 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004414:	f000 f8ce 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 8004418:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4a61      	ldr	r2, [pc, #388]	; (80045a4 <HAL_RCC_ClockConfig+0x268>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d909      	bls.n	8004436 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004422:	4b5f      	ldr	r3, [pc, #380]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800442a:	4a5d      	ldr	r2, [pc, #372]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 800442c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004430:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004436:	4b5a      	ldr	r3, [pc, #360]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f023 0203 	bic.w	r2, r3, #3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	4957      	ldr	r1, [pc, #348]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 8004444:	4313      	orrs	r3, r2
 8004446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004448:	f7fd f83e 	bl	80014c8 <HAL_GetTick>
 800444c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	e00a      	b.n	8004466 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004450:	f7fd f83a 	bl	80014c8 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	; 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e095      	b.n	8004592 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	4b4e      	ldr	r3, [pc, #312]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 020c 	and.w	r2, r3, #12
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	429a      	cmp	r2, r3
 8004476:	d1eb      	bne.n	8004450 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d023      	beq.n	80044cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004490:	4b43      	ldr	r3, [pc, #268]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4a42      	ldr	r2, [pc, #264]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 8004496:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800449a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044a8:	4b3d      	ldr	r3, [pc, #244]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044b0:	4a3b      	ldr	r2, [pc, #236]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 80044b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b8:	4b39      	ldr	r3, [pc, #228]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4936      	ldr	r1, [pc, #216]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
 80044ca:	e008      	b.n	80044de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2b80      	cmp	r3, #128	; 0x80
 80044d0:	d105      	bne.n	80044de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044d2:	4b33      	ldr	r3, [pc, #204]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	4a32      	ldr	r2, [pc, #200]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 80044d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044de:	4b2f      	ldr	r3, [pc, #188]	; (800459c <HAL_RCC_ClockConfig+0x260>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d21d      	bcs.n	8004528 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ec:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_RCC_ClockConfig+0x260>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 020f 	bic.w	r2, r3, #15
 80044f4:	4929      	ldr	r1, [pc, #164]	; (800459c <HAL_RCC_ClockConfig+0x260>)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044fc:	f7fc ffe4 	bl	80014c8 <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004502:	e00a      	b.n	800451a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004504:	f7fc ffe0 	bl	80014c8 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e03b      	b.n	8004592 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b20      	ldr	r3, [pc, #128]	; (800459c <HAL_RCC_ClockConfig+0x260>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d1ed      	bne.n	8004504 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004534:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4917      	ldr	r1, [pc, #92]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004552:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	490f      	ldr	r1, [pc, #60]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004566:	f000 f825 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 800456a:	4602      	mov	r2, r0
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <HAL_RCC_ClockConfig+0x264>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	490c      	ldr	r1, [pc, #48]	; (80045a8 <HAL_RCC_ClockConfig+0x26c>)
 8004578:	5ccb      	ldrb	r3, [r1, r3]
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <HAL_RCC_ClockConfig+0x270>)
 8004584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <HAL_RCC_ClockConfig+0x274>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fc ff50 	bl	8001430 <HAL_InitTick>
 8004590:	4603      	mov	r3, r0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40022000 	.word	0x40022000
 80045a0:	40021000 	.word	0x40021000
 80045a4:	04c4b400 	.word	0x04c4b400
 80045a8:	080073e4 	.word	0x080073e4
 80045ac:	20000004 	.word	0x20000004
 80045b0:	20000008 	.word	0x20000008

080045b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045ba:	4b2c      	ldr	r3, [pc, #176]	; (800466c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d102      	bne.n	80045cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045c6:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	e047      	b.n	800465c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045cc:	4b27      	ldr	r3, [pc, #156]	; (800466c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 030c 	and.w	r3, r3, #12
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d102      	bne.n	80045de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045d8:	4b26      	ldr	r3, [pc, #152]	; (8004674 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	e03e      	b.n	800465c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045de:	4b23      	ldr	r3, [pc, #140]	; (800466c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	2b0c      	cmp	r3, #12
 80045e8:	d136      	bne.n	8004658 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045f4:	4b1d      	ldr	r3, [pc, #116]	; (800466c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	3301      	adds	r3, #1
 8004600:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d10c      	bne.n	8004622 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004608:	4a1a      	ldr	r2, [pc, #104]	; (8004674 <HAL_RCC_GetSysClockFreq+0xc0>)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004610:	4a16      	ldr	r2, [pc, #88]	; (800466c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004612:	68d2      	ldr	r2, [r2, #12]
 8004614:	0a12      	lsrs	r2, r2, #8
 8004616:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	617b      	str	r3, [r7, #20]
      break;
 8004620:	e00c      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004622:	4a13      	ldr	r2, [pc, #76]	; (8004670 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	fbb2 f3f3 	udiv	r3, r2, r3
 800462a:	4a10      	ldr	r2, [pc, #64]	; (800466c <HAL_RCC_GetSysClockFreq+0xb8>)
 800462c:	68d2      	ldr	r2, [r2, #12]
 800462e:	0a12      	lsrs	r2, r2, #8
 8004630:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004634:	fb02 f303 	mul.w	r3, r2, r3
 8004638:	617b      	str	r3, [r7, #20]
      break;
 800463a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_GetSysClockFreq+0xb8>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	0e5b      	lsrs	r3, r3, #25
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	3301      	adds	r3, #1
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	e001      	b.n	800465c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800465c:	693b      	ldr	r3, [r7, #16]
}
 800465e:	4618      	mov	r0, r3
 8004660:	371c      	adds	r7, #28
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000
 8004670:	00f42400 	.word	0x00f42400
 8004674:	016e3600 	.word	0x016e3600

08004678 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <HAL_RCC_GetHCLKFreq+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000004 	.word	0x20000004

08004690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004694:	f7ff fff0 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 8004698:	4602      	mov	r2, r0
 800469a:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	4904      	ldr	r1, [pc, #16]	; (80046b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046a6:	5ccb      	ldrb	r3, [r1, r3]
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40021000 	.word	0x40021000
 80046b8:	080073f4 	.word	0x080073f4

080046bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046c0:	f7ff ffda 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	0adb      	lsrs	r3, r3, #11
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	4904      	ldr	r1, [pc, #16]	; (80046e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40021000 	.word	0x40021000
 80046e4:	080073f4 	.word	0x080073f4

080046e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ee:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046f8:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	3301      	adds	r3, #1
 8004704:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d10c      	bne.n	8004726 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800470c:	4a17      	ldr	r2, [pc, #92]	; (800476c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	4a14      	ldr	r2, [pc, #80]	; (8004768 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004716:	68d2      	ldr	r2, [r2, #12]
 8004718:	0a12      	lsrs	r2, r2, #8
 800471a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	617b      	str	r3, [r7, #20]
    break;
 8004724:	e00c      	b.n	8004740 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004726:	4a12      	ldr	r2, [pc, #72]	; (8004770 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	4a0e      	ldr	r2, [pc, #56]	; (8004768 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004730:	68d2      	ldr	r2, [r2, #12]
 8004732:	0a12      	lsrs	r2, r2, #8
 8004734:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004738:	fb02 f303 	mul.w	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]
    break;
 800473e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004740:	4b09      	ldr	r3, [pc, #36]	; (8004768 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	0e5b      	lsrs	r3, r3, #25
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	3301      	adds	r3, #1
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800475a:	687b      	ldr	r3, [r7, #4]
}
 800475c:	4618      	mov	r0, r3
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40021000 	.word	0x40021000
 800476c:	016e3600 	.word	0x016e3600
 8004770:	00f42400 	.word	0x00f42400

08004774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800477c:	2300      	movs	r3, #0
 800477e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004780:	2300      	movs	r3, #0
 8004782:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8098 	beq.w	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004792:	2300      	movs	r3, #0
 8004794:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004796:	4b43      	ldr	r3, [pc, #268]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10d      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a2:	4b40      	ldr	r3, [pc, #256]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	4a3f      	ldr	r2, [pc, #252]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6593      	str	r3, [r2, #88]	; 0x58
 80047ae:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ba:	2301      	movs	r3, #1
 80047bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047be:	4b3a      	ldr	r3, [pc, #232]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a39      	ldr	r2, [pc, #228]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047ca:	f7fc fe7d 	bl	80014c8 <HAL_GetTick>
 80047ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d0:	e009      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d2:	f7fc fe79 	bl	80014c8 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d902      	bls.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	74fb      	strb	r3, [r7, #19]
        break;
 80047e4:	e005      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047e6:	4b30      	ldr	r3, [pc, #192]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ef      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047f2:	7cfb      	ldrb	r3, [r7, #19]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d159      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047f8:	4b2a      	ldr	r3, [pc, #168]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01e      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	429a      	cmp	r2, r3
 8004812:	d019      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004814:	4b23      	ldr	r3, [pc, #140]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004820:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004830:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004840:	4a18      	ldr	r2, [pc, #96]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fc fe39 	bl	80014c8 <HAL_GetTick>
 8004856:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004858:	e00b      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7fc fe35 	bl	80014c8 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	; 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d902      	bls.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	74fb      	strb	r3, [r7, #19]
            break;
 8004870:	e006      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004872:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0ec      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10b      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004886:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004894:	4903      	ldr	r1, [pc, #12]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800489c:	e008      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800489e:	7cfb      	ldrb	r3, [r7, #19]
 80048a0:	74bb      	strb	r3, [r7, #18]
 80048a2:	e005      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048b0:	7c7b      	ldrb	r3, [r7, #17]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d105      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b6:	4ba7      	ldr	r3, [pc, #668]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	4aa6      	ldr	r2, [pc, #664]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ce:	4ba1      	ldr	r3, [pc, #644]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d4:	f023 0203 	bic.w	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	499d      	ldr	r1, [pc, #628]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048f0:	4b98      	ldr	r3, [pc, #608]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f023 020c 	bic.w	r2, r3, #12
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	4995      	ldr	r1, [pc, #596]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004912:	4b90      	ldr	r3, [pc, #576]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	498c      	ldr	r1, [pc, #560]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004934:	4b87      	ldr	r3, [pc, #540]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	4984      	ldr	r1, [pc, #528]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004956:	4b7f      	ldr	r3, [pc, #508]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	497b      	ldr	r1, [pc, #492]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004978:	4b76      	ldr	r3, [pc, #472]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	4973      	ldr	r1, [pc, #460]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800499a:	4b6e      	ldr	r3, [pc, #440]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	496a      	ldr	r1, [pc, #424]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049bc:	4b65      	ldr	r3, [pc, #404]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	4962      	ldr	r1, [pc, #392]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049de:	4b5d      	ldr	r3, [pc, #372]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	4959      	ldr	r1, [pc, #356]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a00:	4b54      	ldr	r3, [pc, #336]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a06:	f023 0203 	bic.w	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	4951      	ldr	r1, [pc, #324]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a22:	4b4c      	ldr	r3, [pc, #304]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	4948      	ldr	r1, [pc, #288]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d015      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a44:	4b43      	ldr	r3, [pc, #268]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	4940      	ldr	r1, [pc, #256]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a62:	d105      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a64:	4b3b      	ldr	r3, [pc, #236]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4a3a      	ldr	r2, [pc, #232]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d015      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a7c:	4b35      	ldr	r3, [pc, #212]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	4932      	ldr	r1, [pc, #200]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a9c:	4b2d      	ldr	r3, [pc, #180]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a2c      	ldr	r2, [pc, #176]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aa6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d015      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ab4:	4b27      	ldr	r3, [pc, #156]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	4924      	ldr	r1, [pc, #144]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad4:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4a1e      	ldr	r2, [pc, #120]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ade:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d015      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aec:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	4916      	ldr	r1, [pc, #88]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b0a:	d105      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d019      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4908      	ldr	r1, [pc, #32]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b42:	d109      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4a02      	ldr	r2, [pc, #8]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b4e:	60d3      	str	r3, [r2, #12]
 8004b50:	e002      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d015      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b64:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	4926      	ldr	r1, [pc, #152]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b82:	d105      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b84:	4b21      	ldr	r3, [pc, #132]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4a20      	ldr	r2, [pc, #128]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d015      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004baa:	4918      	ldr	r1, [pc, #96]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bba:	d105      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bbc:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d015      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004bd4:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be2:	490a      	ldr	r1, [pc, #40]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bf2:	d105      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a04      	ldr	r2, [pc, #16]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c00:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000

08004c10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e09d      	b.n	8004d5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d108      	bne.n	8004c3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c32:	d009      	beq.n	8004c48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	61da      	str	r2, [r3, #28]
 8004c3a:	e005      	b.n	8004c48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc fa1a 	bl	800109c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c88:	d902      	bls.n	8004c90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	e002      	b.n	8004c96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c9e:	d007      	beq.n	8004cb0 <HAL_SPI_Init+0xa0>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ca8:	d002      	beq.n	8004cb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	ea42 0103 	orr.w	r1, r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	0c1b      	lsrs	r3, r3, #16
 8004d0c:	f003 0204 	and.w	r2, r3, #4
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d2c:	ea42 0103 	orr.w	r1, r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d80:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d88:	7dbb      	ldrb	r3, [r7, #22]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d00d      	beq.n	8004daa <HAL_SPI_TransmitReceive_IT+0x42>
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d94:	d106      	bne.n	8004da4 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <HAL_SPI_TransmitReceive_IT+0x3c>
 8004d9e:	7dbb      	ldrb	r3, [r7, #22]
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d002      	beq.n	8004daa <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
 8004da6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004da8:	e07d      	b.n	8004ea6 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_SPI_TransmitReceive_IT+0x54>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_SPI_TransmitReceive_IT+0x54>
 8004db6:	887b      	ldrh	r3, [r7, #2]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dc0:	e071      	b.n	8004ea6 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_SPI_TransmitReceive_IT+0x68>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e06b      	b.n	8004ea8 <HAL_SPI_TransmitReceive_IT+0x140>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d003      	beq.n	8004dec <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2205      	movs	r2, #5
 8004de8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	887a      	ldrh	r2, [r7, #2]
 8004e02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	887a      	ldrh	r2, [r7, #2]
 8004e16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e22:	d906      	bls.n	8004e32 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4a23      	ldr	r2, [pc, #140]	; (8004eb4 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8004e28:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004e2e:	651a      	str	r2, [r3, #80]	; 0x50
 8004e30:	e005      	b.n	8004e3e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4a21      	ldr	r2, [pc, #132]	; (8004ebc <HAL_SPI_TransmitReceive_IT+0x154>)
 8004e36:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4a21      	ldr	r2, [pc, #132]	; (8004ec0 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004e3c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e46:	d802      	bhi.n	8004e4e <HAL_SPI_TransmitReceive_IT+0xe6>
 8004e48:	887b      	ldrh	r3, [r7, #2]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d908      	bls.n	8004e60 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	e007      	b.n	8004e70 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e6e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d007      	beq.n	8004e8e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004ea4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	0800524f 	.word	0x0800524f
 8004eb8:	080052b5 	.word	0x080052b5
 8004ebc:	080050ff 	.word	0x080050ff
 8004ec0:	080051bd 	.word	0x080051bd

08004ec4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10e      	bne.n	8004f04 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d009      	beq.n	8004f04 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	4798      	blx	r3
    return;
 8004f02:	e0ce      	b.n	80050a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <HAL_SPI_IRQHandler+0x5e>
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d004      	beq.n	8004f22 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	4798      	blx	r3
    return;
 8004f20:	e0bf      	b.n	80050a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <HAL_SPI_IRQHandler+0x7e>
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d105      	bne.n	8004f42 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80b0 	beq.w	80050a2 <HAL_SPI_IRQHandler+0x1de>
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80aa 	beq.w	80050a2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d023      	beq.n	8004fa0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d011      	beq.n	8004f88 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f68:	f043 0204 	orr.w	r2, r3, #4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	e00b      	b.n	8004fa0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f88:	2300      	movs	r3, #0
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	693b      	ldr	r3, [r7, #16]
        return;
 8004f9e:	e080      	b.n	80050a2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d014      	beq.n	8004fd4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00c      	beq.n	8004ff8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe2:	f043 0208 	orr.w	r2, r3, #8
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004fea:	2300      	movs	r3, #0
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d04f      	beq.n	80050a0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800500e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <HAL_SPI_IRQHandler+0x168>
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d034      	beq.n	8005096 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0203 	bic.w	r2, r2, #3
 800503a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005040:	2b00      	cmp	r3, #0
 8005042:	d011      	beq.n	8005068 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <HAL_SPI_IRQHandler+0x1e4>)
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005050:	4618      	mov	r0, r3
 8005052:	f7fc fc1f 	bl	8001894 <HAL_DMA_Abort_IT>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005060:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	2b00      	cmp	r3, #0
 800506e:	d016      	beq.n	800509e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	4a0c      	ldr	r2, [pc, #48]	; (80050a8 <HAL_SPI_IRQHandler+0x1e4>)
 8005076:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507c:	4618      	mov	r0, r3
 800507e:	f7fc fc09 	bl	8001894 <HAL_DMA_Abort_IT>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005094:	e003      	b.n	800509e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f812 	bl	80050c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800509c:	e000      	b.n	80050a0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800509e:	bf00      	nop
    return;
 80050a0:	bf00      	nop
  }
}
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	080050d5 	.word	0x080050d5

080050ac <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff ffe5 	bl	80050c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050f6:	bf00      	nop
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d923      	bls.n	800515a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	b292      	uxth	r2, r2
 800511e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	1c9a      	adds	r2, r3, #2
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b02      	subs	r3, #2
 8005134:	b29a      	uxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005142:	b29b      	uxth	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	d11f      	bne.n	8005188 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005156:	605a      	str	r2, [r3, #4]
 8005158:	e016      	b.n	8005188 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f103 020c 	add.w	r2, r3, #12
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10f      	bne.n	80051b4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051a2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fa14 	bl	80055dc <SPI_CloseRxTx_ISR>
    }
  }
}
 80051b4:	bf00      	nop
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d912      	bls.n	80051f4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	881a      	ldrh	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	1c9a      	adds	r2, r3, #2
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b02      	subs	r3, #2
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051f2:	e012      	b.n	800521a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	7812      	ldrb	r2, [r2, #0]
 8005200:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d110      	bne.n	8005246 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005232:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f9cb 	bl	80055dc <SPI_CloseRxTx_ISR>
    }
  }
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	b292      	uxth	r2, r2
 8005262:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	1c9a      	adds	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10f      	bne.n	80052ac <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f998 	bl	80055dc <SPI_CloseRxTx_ISR>
    }
  }
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	881a      	ldrh	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	1c9a      	adds	r2, r3, #2
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d110      	bne.n	800530c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052f8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f968 	bl	80055dc <SPI_CloseRxTx_ISR>
    }
  }
}
 800530c:	bf00      	nop
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005324:	f7fc f8d0 	bl	80014c8 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	4413      	add	r3, r2
 8005332:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005334:	f7fc f8c8 	bl	80014c8 <HAL_GetTick>
 8005338:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800533a:	4b39      	ldr	r3, [pc, #228]	; (8005420 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	015b      	lsls	r3, r3, #5
 8005340:	0d1b      	lsrs	r3, r3, #20
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	fb02 f303 	mul.w	r3, r2, r3
 8005348:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800534a:	e054      	b.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d050      	beq.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005354:	f7fc f8b8 	bl	80014c8 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	429a      	cmp	r2, r3
 8005362:	d902      	bls.n	800536a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d13d      	bne.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005378:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005382:	d111      	bne.n	80053a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538c:	d004      	beq.n	8005398 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005396:	d107      	bne.n	80053a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b0:	d10f      	bne.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e017      	b.n	8005416 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4013      	ands	r3, r2
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	bf0c      	ite	eq
 8005406:	2301      	moveq	r3, #1
 8005408:	2300      	movne	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	429a      	cmp	r2, r3
 8005412:	d19b      	bne.n	800534c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000004 	.word	0x20000004

08005424 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	; 0x28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005436:	f7fc f847 	bl	80014c8 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	4413      	add	r3, r2
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005446:	f7fc f83f 	bl	80014c8 <HAL_GetTick>
 800544a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005454:	4b3d      	ldr	r3, [pc, #244]	; (800554c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	00da      	lsls	r2, r3, #3
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	0d1b      	lsrs	r3, r3, #20
 8005464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800546c:	e060      	b.n	8005530 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005474:	d107      	bne.n	8005486 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d104      	bne.n	8005486 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005484:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d050      	beq.n	8005530 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800548e:	f7fc f81b 	bl	80014c8 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549a:	429a      	cmp	r2, r3
 800549c:	d902      	bls.n	80054a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d13d      	bne.n	8005520 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054bc:	d111      	bne.n	80054e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c6:	d004      	beq.n	80054d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d0:	d107      	bne.n	80054e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ea:	d10f      	bne.n	800550c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800550a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e010      	b.n	8005542 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	3b01      	subs	r3, #1
 800552e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4013      	ands	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d196      	bne.n	800546e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3728      	adds	r7, #40	; 0x28
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20000004 	.word	0x20000004

08005550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2200      	movs	r2, #0
 8005564:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff ff5b 	bl	8005424 <SPI_WaitFifoStateUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005578:	f043 0220 	orr.w	r2, r3, #32
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e027      	b.n	80055d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2200      	movs	r2, #0
 800558c:	2180      	movs	r1, #128	; 0x80
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f7ff fec0 	bl	8005314 <SPI_WaitFlagStateUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e014      	b.n	80055d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff ff34 	bl	8005424 <SPI_WaitFifoStateUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d007      	beq.n	80055d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e000      	b.n	80055d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055e4:	f7fb ff70 	bl	80014c8 <HAL_GetTick>
 80055e8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0220 	bic.w	r2, r2, #32
 80055f8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	2164      	movs	r1, #100	; 0x64
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff ffa6 	bl	8005550 <SPI_EndRxTxTransaction>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561a:	2b00      	cmp	r3, #0
 800561c:	d115      	bne.n	800564a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b04      	cmp	r3, #4
 8005628:	d107      	bne.n	800563a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff fd3a 	bl	80050ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005638:	e00e      	b.n	8005658 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fb fa7e 	bl	8000b44 <HAL_SPI_TxRxCpltCallback>
}
 8005648:	e006      	b.n	8005658 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff fd34 	bl	80050c0 <HAL_SPI_ErrorCallback>
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e042      	b.n	80056f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fb fcb1 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2224      	movs	r2, #36	; 0x24
 800568e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fb24 	bl	8005cf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f825 	bl	8005700 <UART_SetConfig>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e01b      	b.n	80056f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fba3 	bl	8005e3c <UART_CheckIdleState>
 80056f6:	4603      	mov	r3, r0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005704:	b08c      	sub	sp, #48	; 0x30
 8005706:	af00      	add	r7, sp, #0
 8005708:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	431a      	orrs	r2, r3
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	431a      	orrs	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	4313      	orrs	r3, r2
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4baa      	ldr	r3, [pc, #680]	; (80059d8 <UART_SetConfig+0x2d8>)
 8005730:	4013      	ands	r3, r2
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005738:	430b      	orrs	r3, r1
 800573a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a9f      	ldr	r2, [pc, #636]	; (80059dc <UART_SetConfig+0x2dc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d004      	beq.n	800576c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005768:	4313      	orrs	r3, r2
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005776:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005780:	430b      	orrs	r3, r1
 8005782:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	f023 010f 	bic.w	r1, r3, #15
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a90      	ldr	r2, [pc, #576]	; (80059e0 <UART_SetConfig+0x2e0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d125      	bne.n	80057f0 <UART_SetConfig+0xf0>
 80057a4:	4b8f      	ldr	r3, [pc, #572]	; (80059e4 <UART_SetConfig+0x2e4>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d81a      	bhi.n	80057e8 <UART_SetConfig+0xe8>
 80057b2:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <UART_SetConfig+0xb8>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	080057c9 	.word	0x080057c9
 80057bc:	080057d9 	.word	0x080057d9
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057e1 	.word	0x080057e1
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ce:	e116      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057d0:	2302      	movs	r3, #2
 80057d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d6:	e112      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057d8:	2304      	movs	r3, #4
 80057da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057de:	e10e      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057e0:	2308      	movs	r3, #8
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057e6:	e10a      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057e8:	2310      	movs	r3, #16
 80057ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ee:	e106      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a7c      	ldr	r2, [pc, #496]	; (80059e8 <UART_SetConfig+0x2e8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d138      	bne.n	800586c <UART_SetConfig+0x16c>
 80057fa:	4b7a      	ldr	r3, [pc, #488]	; (80059e4 <UART_SetConfig+0x2e4>)
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005800:	f003 030c 	and.w	r3, r3, #12
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d82d      	bhi.n	8005864 <UART_SetConfig+0x164>
 8005808:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <UART_SetConfig+0x110>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	08005845 	.word	0x08005845
 8005814:	08005865 	.word	0x08005865
 8005818:	08005865 	.word	0x08005865
 800581c:	08005865 	.word	0x08005865
 8005820:	08005855 	.word	0x08005855
 8005824:	08005865 	.word	0x08005865
 8005828:	08005865 	.word	0x08005865
 800582c:	08005865 	.word	0x08005865
 8005830:	0800584d 	.word	0x0800584d
 8005834:	08005865 	.word	0x08005865
 8005838:	08005865 	.word	0x08005865
 800583c:	08005865 	.word	0x08005865
 8005840:	0800585d 	.word	0x0800585d
 8005844:	2300      	movs	r3, #0
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584a:	e0d8      	b.n	80059fe <UART_SetConfig+0x2fe>
 800584c:	2302      	movs	r3, #2
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005852:	e0d4      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005854:	2304      	movs	r3, #4
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585a:	e0d0      	b.n	80059fe <UART_SetConfig+0x2fe>
 800585c:	2308      	movs	r3, #8
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005862:	e0cc      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005864:	2310      	movs	r3, #16
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586a:	e0c8      	b.n	80059fe <UART_SetConfig+0x2fe>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a5e      	ldr	r2, [pc, #376]	; (80059ec <UART_SetConfig+0x2ec>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d125      	bne.n	80058c2 <UART_SetConfig+0x1c2>
 8005876:	4b5b      	ldr	r3, [pc, #364]	; (80059e4 <UART_SetConfig+0x2e4>)
 8005878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005880:	2b30      	cmp	r3, #48	; 0x30
 8005882:	d016      	beq.n	80058b2 <UART_SetConfig+0x1b2>
 8005884:	2b30      	cmp	r3, #48	; 0x30
 8005886:	d818      	bhi.n	80058ba <UART_SetConfig+0x1ba>
 8005888:	2b20      	cmp	r3, #32
 800588a:	d00a      	beq.n	80058a2 <UART_SetConfig+0x1a2>
 800588c:	2b20      	cmp	r3, #32
 800588e:	d814      	bhi.n	80058ba <UART_SetConfig+0x1ba>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <UART_SetConfig+0x19a>
 8005894:	2b10      	cmp	r3, #16
 8005896:	d008      	beq.n	80058aa <UART_SetConfig+0x1aa>
 8005898:	e00f      	b.n	80058ba <UART_SetConfig+0x1ba>
 800589a:	2300      	movs	r3, #0
 800589c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a0:	e0ad      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058a2:	2302      	movs	r3, #2
 80058a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a8:	e0a9      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058aa:	2304      	movs	r3, #4
 80058ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b0:	e0a5      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058b2:	2308      	movs	r3, #8
 80058b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b8:	e0a1      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058ba:	2310      	movs	r3, #16
 80058bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c0:	e09d      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a4a      	ldr	r2, [pc, #296]	; (80059f0 <UART_SetConfig+0x2f0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d125      	bne.n	8005918 <UART_SetConfig+0x218>
 80058cc:	4b45      	ldr	r3, [pc, #276]	; (80059e4 <UART_SetConfig+0x2e4>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058d6:	2bc0      	cmp	r3, #192	; 0xc0
 80058d8:	d016      	beq.n	8005908 <UART_SetConfig+0x208>
 80058da:	2bc0      	cmp	r3, #192	; 0xc0
 80058dc:	d818      	bhi.n	8005910 <UART_SetConfig+0x210>
 80058de:	2b80      	cmp	r3, #128	; 0x80
 80058e0:	d00a      	beq.n	80058f8 <UART_SetConfig+0x1f8>
 80058e2:	2b80      	cmp	r3, #128	; 0x80
 80058e4:	d814      	bhi.n	8005910 <UART_SetConfig+0x210>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <UART_SetConfig+0x1f0>
 80058ea:	2b40      	cmp	r3, #64	; 0x40
 80058ec:	d008      	beq.n	8005900 <UART_SetConfig+0x200>
 80058ee:	e00f      	b.n	8005910 <UART_SetConfig+0x210>
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f6:	e082      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058f8:	2302      	movs	r3, #2
 80058fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058fe:	e07e      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005900:	2304      	movs	r3, #4
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005906:	e07a      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005908:	2308      	movs	r3, #8
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590e:	e076      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005910:	2310      	movs	r3, #16
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e072      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a35      	ldr	r2, [pc, #212]	; (80059f4 <UART_SetConfig+0x2f4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d12a      	bne.n	8005978 <UART_SetConfig+0x278>
 8005922:	4b30      	ldr	r3, [pc, #192]	; (80059e4 <UART_SetConfig+0x2e4>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005930:	d01a      	beq.n	8005968 <UART_SetConfig+0x268>
 8005932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005936:	d81b      	bhi.n	8005970 <UART_SetConfig+0x270>
 8005938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800593c:	d00c      	beq.n	8005958 <UART_SetConfig+0x258>
 800593e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005942:	d815      	bhi.n	8005970 <UART_SetConfig+0x270>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <UART_SetConfig+0x250>
 8005948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594c:	d008      	beq.n	8005960 <UART_SetConfig+0x260>
 800594e:	e00f      	b.n	8005970 <UART_SetConfig+0x270>
 8005950:	2300      	movs	r3, #0
 8005952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005956:	e052      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005958:	2302      	movs	r3, #2
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800595e:	e04e      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005966:	e04a      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596e:	e046      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005976:	e042      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a17      	ldr	r2, [pc, #92]	; (80059dc <UART_SetConfig+0x2dc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d13a      	bne.n	80059f8 <UART_SetConfig+0x2f8>
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <UART_SetConfig+0x2e4>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800598c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005990:	d01a      	beq.n	80059c8 <UART_SetConfig+0x2c8>
 8005992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005996:	d81b      	bhi.n	80059d0 <UART_SetConfig+0x2d0>
 8005998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599c:	d00c      	beq.n	80059b8 <UART_SetConfig+0x2b8>
 800599e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a2:	d815      	bhi.n	80059d0 <UART_SetConfig+0x2d0>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <UART_SetConfig+0x2b0>
 80059a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ac:	d008      	beq.n	80059c0 <UART_SetConfig+0x2c0>
 80059ae:	e00f      	b.n	80059d0 <UART_SetConfig+0x2d0>
 80059b0:	2300      	movs	r3, #0
 80059b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b6:	e022      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059b8:	2302      	movs	r3, #2
 80059ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059be:	e01e      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059c0:	2304      	movs	r3, #4
 80059c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c6:	e01a      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059c8:	2308      	movs	r3, #8
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ce:	e016      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d6:	e012      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059d8:	cfff69f3 	.word	0xcfff69f3
 80059dc:	40008000 	.word	0x40008000
 80059e0:	40013800 	.word	0x40013800
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40004400 	.word	0x40004400
 80059ec:	40004800 	.word	0x40004800
 80059f0:	40004c00 	.word	0x40004c00
 80059f4:	40005000 	.word	0x40005000
 80059f8:	2310      	movs	r3, #16
 80059fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4aae      	ldr	r2, [pc, #696]	; (8005cbc <UART_SetConfig+0x5bc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	f040 8097 	bne.w	8005b38 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d823      	bhi.n	8005a5a <UART_SetConfig+0x35a>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <UART_SetConfig+0x318>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a5b 	.word	0x08005a5b
 8005a20:	08005a45 	.word	0x08005a45
 8005a24:	08005a5b 	.word	0x08005a5b
 8005a28:	08005a4b 	.word	0x08005a4b
 8005a2c:	08005a5b 	.word	0x08005a5b
 8005a30:	08005a5b 	.word	0x08005a5b
 8005a34:	08005a5b 	.word	0x08005a5b
 8005a38:	08005a53 	.word	0x08005a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3c:	f7fe fe28 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 8005a40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a42:	e010      	b.n	8005a66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a44:	4b9e      	ldr	r3, [pc, #632]	; (8005cc0 <UART_SetConfig+0x5c0>)
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a48:	e00d      	b.n	8005a66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a4a:	f7fe fdb3 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 8005a4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a50:	e009      	b.n	8005a66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a58:	e005      	b.n	8005a66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8130 	beq.w	8005cce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	4a94      	ldr	r2, [pc, #592]	; (8005cc4 <UART_SetConfig+0x5c4>)
 8005a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d305      	bcc.n	8005a9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d903      	bls.n	8005aa6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005aa4:	e113      	b.n	8005cce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	60bb      	str	r3, [r7, #8]
 8005aac:	60fa      	str	r2, [r7, #12]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	4a84      	ldr	r2, [pc, #528]	; (8005cc4 <UART_SetConfig+0x5c4>)
 8005ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2200      	movs	r2, #0
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ac8:	f7fa fbfa 	bl	80002c0 <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	020b      	lsls	r3, r1, #8
 8005ade:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ae2:	0202      	lsls	r2, r0, #8
 8005ae4:	6979      	ldr	r1, [r7, #20]
 8005ae6:	6849      	ldr	r1, [r1, #4]
 8005ae8:	0849      	lsrs	r1, r1, #1
 8005aea:	2000      	movs	r0, #0
 8005aec:	460c      	mov	r4, r1
 8005aee:	4605      	mov	r5, r0
 8005af0:	eb12 0804 	adds.w	r8, r2, r4
 8005af4:	eb43 0905 	adc.w	r9, r3, r5
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	469a      	mov	sl, r3
 8005b00:	4693      	mov	fp, r2
 8005b02:	4652      	mov	r2, sl
 8005b04:	465b      	mov	r3, fp
 8005b06:	4640      	mov	r0, r8
 8005b08:	4649      	mov	r1, r9
 8005b0a:	f7fa fbd9 	bl	80002c0 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4613      	mov	r3, r2
 8005b14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b1c:	d308      	bcc.n	8005b30 <UART_SetConfig+0x430>
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b24:	d204      	bcs.n	8005b30 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6a3a      	ldr	r2, [r7, #32]
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	e0ce      	b.n	8005cce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b36:	e0ca      	b.n	8005cce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b40:	d166      	bne.n	8005c10 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d827      	bhi.n	8005b9a <UART_SetConfig+0x49a>
 8005b4a:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <UART_SetConfig+0x450>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b75 	.word	0x08005b75
 8005b54:	08005b7d 	.word	0x08005b7d
 8005b58:	08005b85 	.word	0x08005b85
 8005b5c:	08005b9b 	.word	0x08005b9b
 8005b60:	08005b8b 	.word	0x08005b8b
 8005b64:	08005b9b 	.word	0x08005b9b
 8005b68:	08005b9b 	.word	0x08005b9b
 8005b6c:	08005b9b 	.word	0x08005b9b
 8005b70:	08005b93 	.word	0x08005b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b74:	f7fe fd8c 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 8005b78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b7a:	e014      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b7c:	f7fe fd9e 	bl	80046bc <HAL_RCC_GetPCLK2Freq>
 8005b80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b82:	e010      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b84:	4b4e      	ldr	r3, [pc, #312]	; (8005cc0 <UART_SetConfig+0x5c0>)
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b88:	e00d      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b8a:	f7fe fd13 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 8005b8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b90:	e009      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b98:	e005      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ba4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 8090 	beq.w	8005cce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	4a44      	ldr	r2, [pc, #272]	; (8005cc4 <UART_SetConfig+0x5c4>)
 8005bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bc0:	005a      	lsls	r2, r3, #1
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	441a      	add	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	2b0f      	cmp	r3, #15
 8005bd8:	d916      	bls.n	8005c08 <UART_SetConfig+0x508>
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be0:	d212      	bcs.n	8005c08 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f023 030f 	bic.w	r3, r3, #15
 8005bea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	8bfb      	ldrh	r3, [r7, #30]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	8bfa      	ldrh	r2, [r7, #30]
 8005c04:	60da      	str	r2, [r3, #12]
 8005c06:	e062      	b.n	8005cce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c0e:	e05e      	b.n	8005cce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d828      	bhi.n	8005c6a <UART_SetConfig+0x56a>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <UART_SetConfig+0x520>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c4d 	.word	0x08005c4d
 8005c28:	08005c55 	.word	0x08005c55
 8005c2c:	08005c6b 	.word	0x08005c6b
 8005c30:	08005c5b 	.word	0x08005c5b
 8005c34:	08005c6b 	.word	0x08005c6b
 8005c38:	08005c6b 	.word	0x08005c6b
 8005c3c:	08005c6b 	.word	0x08005c6b
 8005c40:	08005c63 	.word	0x08005c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c44:	f7fe fd24 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 8005c48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c4a:	e014      	b.n	8005c76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c4c:	f7fe fd36 	bl	80046bc <HAL_RCC_GetPCLK2Freq>
 8005c50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c52:	e010      	b.n	8005c76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <UART_SetConfig+0x5c0>)
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c58:	e00d      	b.n	8005c76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5a:	f7fe fcab 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 8005c5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c60:	e009      	b.n	8005c76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c68:	e005      	b.n	8005c76 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c74:	bf00      	nop
    }

    if (pclk != 0U)
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d028      	beq.n	8005cce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	4a10      	ldr	r2, [pc, #64]	; (8005cc4 <UART_SetConfig+0x5c4>)
 8005c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c86:	461a      	mov	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	441a      	add	r2, r3
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b0f      	cmp	r3, #15
 8005ca4:	d910      	bls.n	8005cc8 <UART_SetConfig+0x5c8>
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cac:	d20c      	bcs.n	8005cc8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60da      	str	r2, [r3, #12]
 8005cb8:	e009      	b.n	8005cce <UART_SetConfig+0x5ce>
 8005cba:	bf00      	nop
 8005cbc:	40008000 	.word	0x40008000
 8005cc0:	00f42400 	.word	0x00f42400
 8005cc4:	080073fc 	.word	0x080073fc
      }
      else
      {
        ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005cea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3730      	adds	r7, #48	; 0x30
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01a      	beq.n	8005e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df6:	d10a      	bne.n	8005e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	605a      	str	r2, [r3, #4]
  }
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b098      	sub	sp, #96	; 0x60
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e4c:	f7fb fb3c 	bl	80014c8 <HAL_GetTick>
 8005e50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d12f      	bne.n	8005ec0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f88e 	bl	8005f90 <UART_WaitOnFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d022      	beq.n	8005ec0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e98:	647b      	str	r3, [r7, #68]	; 0x44
 8005e9a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e6      	bne.n	8005e7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e063      	b.n	8005f88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d149      	bne.n	8005f62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ece:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f857 	bl	8005f90 <UART_WaitOnFlagUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d03c      	beq.n	8005f62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005efc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f06:	633b      	str	r3, [r7, #48]	; 0x30
 8005f08:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e6      	bne.n	8005ee8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3308      	adds	r3, #8
 8005f20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f023 0301 	bic.w	r3, r3, #1
 8005f30:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3308      	adds	r3, #8
 8005f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f3a:	61fa      	str	r2, [r7, #28]
 8005f3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	69b9      	ldr	r1, [r7, #24]
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	617b      	str	r3, [r7, #20]
   return(result);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e5      	bne.n	8005f1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e012      	b.n	8005f88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3758      	adds	r7, #88	; 0x58
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa0:	e04f      	b.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa8:	d04b      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005faa:	f7fb fa8d 	bl	80014c8 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d302      	bcc.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e04e      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d037      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b80      	cmp	r3, #128	; 0x80
 8005fd6:	d034      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b40      	cmp	r3, #64	; 0x40
 8005fdc:	d031      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d110      	bne.n	800600e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f838 	bl	800606a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e029      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800601c:	d111      	bne.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f81e 	bl	800606a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e00f      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	429a      	cmp	r2, r3
 800605e:	d0a0      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800606a:	b480      	push	{r7}
 800606c:	b095      	sub	sp, #84	; 0x54
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006090:	643b      	str	r3, [r7, #64]	; 0x40
 8006092:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006096:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e6      	bne.n	8006072 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3308      	adds	r3, #8
 80060aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ba:	f023 0301 	bic.w	r3, r3, #1
 80060be:	64bb      	str	r3, [r7, #72]	; 0x48
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3308      	adds	r3, #8
 80060c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e3      	bne.n	80060a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d118      	bne.n	8006116 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f023 0310 	bic.w	r3, r3, #16
 80060f8:	647b      	str	r3, [r7, #68]	; 0x44
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006102:	61bb      	str	r3, [r7, #24]
 8006104:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6979      	ldr	r1, [r7, #20]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	613b      	str	r3, [r7, #16]
   return(result);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e6      	bne.n	80060e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	675a      	str	r2, [r3, #116]	; 0x74
}
 800612a:	bf00      	nop
 800612c:	3754      	adds	r7, #84	; 0x54
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_UARTEx_DisableFifoMode+0x16>
 8006148:	2302      	movs	r3, #2
 800614a:	e027      	b.n	800619c <HAL_UARTEx_DisableFifoMode+0x66>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2224      	movs	r2, #36	; 0x24
 8006158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800617a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061bc:	2302      	movs	r3, #2
 80061be:	e02d      	b.n	800621c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	; 0x24
 80061cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0201 	bic.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f84f 	bl	80062a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006238:	2302      	movs	r3, #2
 800623a:	e02d      	b.n	8006298 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2224      	movs	r2, #36	; 0x24
 8006248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f811 	bl	80062a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d108      	bne.n	80062c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062c0:	e031      	b.n	8006326 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062c2:	2308      	movs	r3, #8
 80062c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062c6:	2308      	movs	r3, #8
 80062c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	0e5b      	lsrs	r3, r3, #25
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	0f5b      	lsrs	r3, r3, #29
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	7b3a      	ldrb	r2, [r7, #12]
 80062ee:	4911      	ldr	r1, [pc, #68]	; (8006334 <UARTEx_SetNbDataToProcess+0x94>)
 80062f0:	5c8a      	ldrb	r2, [r1, r2]
 80062f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062f6:	7b3a      	ldrb	r2, [r7, #12]
 80062f8:	490f      	ldr	r1, [pc, #60]	; (8006338 <UARTEx_SetNbDataToProcess+0x98>)
 80062fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006300:	b29a      	uxth	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	7b7a      	ldrb	r2, [r7, #13]
 800630c:	4909      	ldr	r1, [pc, #36]	; (8006334 <UARTEx_SetNbDataToProcess+0x94>)
 800630e:	5c8a      	ldrb	r2, [r1, r2]
 8006310:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006314:	7b7a      	ldrb	r2, [r7, #13]
 8006316:	4908      	ldr	r1, [pc, #32]	; (8006338 <UARTEx_SetNbDataToProcess+0x98>)
 8006318:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800631a:	fb93 f3f2 	sdiv	r3, r3, r2
 800631e:	b29a      	uxth	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	08007414 	.word	0x08007414
 8006338:	0800741c 	.word	0x0800741c

0800633c <srand>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4b10      	ldr	r3, [pc, #64]	; (8006380 <srand+0x44>)
 8006340:	681d      	ldr	r5, [r3, #0]
 8006342:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006344:	4604      	mov	r4, r0
 8006346:	b9b3      	cbnz	r3, 8006376 <srand+0x3a>
 8006348:	2018      	movs	r0, #24
 800634a:	f000 fa7b 	bl	8006844 <malloc>
 800634e:	4602      	mov	r2, r0
 8006350:	6328      	str	r0, [r5, #48]	; 0x30
 8006352:	b920      	cbnz	r0, 800635e <srand+0x22>
 8006354:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <srand+0x48>)
 8006356:	480c      	ldr	r0, [pc, #48]	; (8006388 <srand+0x4c>)
 8006358:	2146      	movs	r1, #70	; 0x46
 800635a:	f000 fa09 	bl	8006770 <__assert_func>
 800635e:	490b      	ldr	r1, [pc, #44]	; (800638c <srand+0x50>)
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <srand+0x54>)
 8006362:	e9c0 1300 	strd	r1, r3, [r0]
 8006366:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <srand+0x58>)
 8006368:	6083      	str	r3, [r0, #8]
 800636a:	230b      	movs	r3, #11
 800636c:	8183      	strh	r3, [r0, #12]
 800636e:	2100      	movs	r1, #0
 8006370:	2001      	movs	r0, #1
 8006372:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006376:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006378:	2200      	movs	r2, #0
 800637a:	611c      	str	r4, [r3, #16]
 800637c:	615a      	str	r2, [r3, #20]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	20000068 	.word	0x20000068
 8006384:	08007424 	.word	0x08007424
 8006388:	0800743b 	.word	0x0800743b
 800638c:	abcd330e 	.word	0xabcd330e
 8006390:	e66d1234 	.word	0xe66d1234
 8006394:	0005deec 	.word	0x0005deec

08006398 <rand>:
 8006398:	4b16      	ldr	r3, [pc, #88]	; (80063f4 <rand+0x5c>)
 800639a:	b510      	push	{r4, lr}
 800639c:	681c      	ldr	r4, [r3, #0]
 800639e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063a0:	b9b3      	cbnz	r3, 80063d0 <rand+0x38>
 80063a2:	2018      	movs	r0, #24
 80063a4:	f000 fa4e 	bl	8006844 <malloc>
 80063a8:	4602      	mov	r2, r0
 80063aa:	6320      	str	r0, [r4, #48]	; 0x30
 80063ac:	b920      	cbnz	r0, 80063b8 <rand+0x20>
 80063ae:	4b12      	ldr	r3, [pc, #72]	; (80063f8 <rand+0x60>)
 80063b0:	4812      	ldr	r0, [pc, #72]	; (80063fc <rand+0x64>)
 80063b2:	2152      	movs	r1, #82	; 0x52
 80063b4:	f000 f9dc 	bl	8006770 <__assert_func>
 80063b8:	4911      	ldr	r1, [pc, #68]	; (8006400 <rand+0x68>)
 80063ba:	4b12      	ldr	r3, [pc, #72]	; (8006404 <rand+0x6c>)
 80063bc:	e9c0 1300 	strd	r1, r3, [r0]
 80063c0:	4b11      	ldr	r3, [pc, #68]	; (8006408 <rand+0x70>)
 80063c2:	6083      	str	r3, [r0, #8]
 80063c4:	230b      	movs	r3, #11
 80063c6:	8183      	strh	r3, [r0, #12]
 80063c8:	2100      	movs	r1, #0
 80063ca:	2001      	movs	r0, #1
 80063cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80063d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80063d2:	480e      	ldr	r0, [pc, #56]	; (800640c <rand+0x74>)
 80063d4:	690b      	ldr	r3, [r1, #16]
 80063d6:	694c      	ldr	r4, [r1, #20]
 80063d8:	4a0d      	ldr	r2, [pc, #52]	; (8006410 <rand+0x78>)
 80063da:	4358      	muls	r0, r3
 80063dc:	fb02 0004 	mla	r0, r2, r4, r0
 80063e0:	fba3 3202 	umull	r3, r2, r3, r2
 80063e4:	3301      	adds	r3, #1
 80063e6:	eb40 0002 	adc.w	r0, r0, r2
 80063ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80063ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80063f2:	bd10      	pop	{r4, pc}
 80063f4:	20000068 	.word	0x20000068
 80063f8:	08007424 	.word	0x08007424
 80063fc:	0800743b 	.word	0x0800743b
 8006400:	abcd330e 	.word	0xabcd330e
 8006404:	e66d1234 	.word	0xe66d1234
 8006408:	0005deec 	.word	0x0005deec
 800640c:	5851f42d 	.word	0x5851f42d
 8006410:	4c957f2d 	.word	0x4c957f2d

08006414 <std>:
 8006414:	2300      	movs	r3, #0
 8006416:	b510      	push	{r4, lr}
 8006418:	4604      	mov	r4, r0
 800641a:	e9c0 3300 	strd	r3, r3, [r0]
 800641e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006422:	6083      	str	r3, [r0, #8]
 8006424:	8181      	strh	r1, [r0, #12]
 8006426:	6643      	str	r3, [r0, #100]	; 0x64
 8006428:	81c2      	strh	r2, [r0, #14]
 800642a:	6183      	str	r3, [r0, #24]
 800642c:	4619      	mov	r1, r3
 800642e:	2208      	movs	r2, #8
 8006430:	305c      	adds	r0, #92	; 0x5c
 8006432:	f000 f8f4 	bl	800661e <memset>
 8006436:	4b0d      	ldr	r3, [pc, #52]	; (800646c <std+0x58>)
 8006438:	6263      	str	r3, [r4, #36]	; 0x24
 800643a:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <std+0x5c>)
 800643c:	62a3      	str	r3, [r4, #40]	; 0x28
 800643e:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <std+0x60>)
 8006440:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006442:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <std+0x64>)
 8006444:	6323      	str	r3, [r4, #48]	; 0x30
 8006446:	4b0d      	ldr	r3, [pc, #52]	; (800647c <std+0x68>)
 8006448:	6224      	str	r4, [r4, #32]
 800644a:	429c      	cmp	r4, r3
 800644c:	d006      	beq.n	800645c <std+0x48>
 800644e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006452:	4294      	cmp	r4, r2
 8006454:	d002      	beq.n	800645c <std+0x48>
 8006456:	33d0      	adds	r3, #208	; 0xd0
 8006458:	429c      	cmp	r4, r3
 800645a:	d105      	bne.n	8006468 <std+0x54>
 800645c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006464:	f000 b980 	b.w	8006768 <__retarget_lock_init_recursive>
 8006468:	bd10      	pop	{r4, pc}
 800646a:	bf00      	nop
 800646c:	08006599 	.word	0x08006599
 8006470:	080065bb 	.word	0x080065bb
 8006474:	080065f3 	.word	0x080065f3
 8006478:	08006617 	.word	0x08006617
 800647c:	200002e8 	.word	0x200002e8

08006480 <stdio_exit_handler>:
 8006480:	4a02      	ldr	r2, [pc, #8]	; (800648c <stdio_exit_handler+0xc>)
 8006482:	4903      	ldr	r1, [pc, #12]	; (8006490 <stdio_exit_handler+0x10>)
 8006484:	4803      	ldr	r0, [pc, #12]	; (8006494 <stdio_exit_handler+0x14>)
 8006486:	f000 b869 	b.w	800655c <_fwalk_sglue>
 800648a:	bf00      	nop
 800648c:	20000010 	.word	0x20000010
 8006490:	08006ab9 	.word	0x08006ab9
 8006494:	2000001c 	.word	0x2000001c

08006498 <cleanup_stdio>:
 8006498:	6841      	ldr	r1, [r0, #4]
 800649a:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <cleanup_stdio+0x34>)
 800649c:	4299      	cmp	r1, r3
 800649e:	b510      	push	{r4, lr}
 80064a0:	4604      	mov	r4, r0
 80064a2:	d001      	beq.n	80064a8 <cleanup_stdio+0x10>
 80064a4:	f000 fb08 	bl	8006ab8 <_fflush_r>
 80064a8:	68a1      	ldr	r1, [r4, #8]
 80064aa:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <cleanup_stdio+0x38>)
 80064ac:	4299      	cmp	r1, r3
 80064ae:	d002      	beq.n	80064b6 <cleanup_stdio+0x1e>
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 fb01 	bl	8006ab8 <_fflush_r>
 80064b6:	68e1      	ldr	r1, [r4, #12]
 80064b8:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <cleanup_stdio+0x3c>)
 80064ba:	4299      	cmp	r1, r3
 80064bc:	d004      	beq.n	80064c8 <cleanup_stdio+0x30>
 80064be:	4620      	mov	r0, r4
 80064c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c4:	f000 baf8 	b.w	8006ab8 <_fflush_r>
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	bf00      	nop
 80064cc:	200002e8 	.word	0x200002e8
 80064d0:	20000350 	.word	0x20000350
 80064d4:	200003b8 	.word	0x200003b8

080064d8 <global_stdio_init.part.0>:
 80064d8:	b510      	push	{r4, lr}
 80064da:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <global_stdio_init.part.0+0x30>)
 80064dc:	4c0b      	ldr	r4, [pc, #44]	; (800650c <global_stdio_init.part.0+0x34>)
 80064de:	4a0c      	ldr	r2, [pc, #48]	; (8006510 <global_stdio_init.part.0+0x38>)
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	4620      	mov	r0, r4
 80064e4:	2200      	movs	r2, #0
 80064e6:	2104      	movs	r1, #4
 80064e8:	f7ff ff94 	bl	8006414 <std>
 80064ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80064f0:	2201      	movs	r2, #1
 80064f2:	2109      	movs	r1, #9
 80064f4:	f7ff ff8e 	bl	8006414 <std>
 80064f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80064fc:	2202      	movs	r2, #2
 80064fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006502:	2112      	movs	r1, #18
 8006504:	f7ff bf86 	b.w	8006414 <std>
 8006508:	20000420 	.word	0x20000420
 800650c:	200002e8 	.word	0x200002e8
 8006510:	08006481 	.word	0x08006481

08006514 <__sfp_lock_acquire>:
 8006514:	4801      	ldr	r0, [pc, #4]	; (800651c <__sfp_lock_acquire+0x8>)
 8006516:	f000 b928 	b.w	800676a <__retarget_lock_acquire_recursive>
 800651a:	bf00      	nop
 800651c:	20000429 	.word	0x20000429

08006520 <__sfp_lock_release>:
 8006520:	4801      	ldr	r0, [pc, #4]	; (8006528 <__sfp_lock_release+0x8>)
 8006522:	f000 b923 	b.w	800676c <__retarget_lock_release_recursive>
 8006526:	bf00      	nop
 8006528:	20000429 	.word	0x20000429

0800652c <__sinit>:
 800652c:	b510      	push	{r4, lr}
 800652e:	4604      	mov	r4, r0
 8006530:	f7ff fff0 	bl	8006514 <__sfp_lock_acquire>
 8006534:	6a23      	ldr	r3, [r4, #32]
 8006536:	b11b      	cbz	r3, 8006540 <__sinit+0x14>
 8006538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800653c:	f7ff bff0 	b.w	8006520 <__sfp_lock_release>
 8006540:	4b04      	ldr	r3, [pc, #16]	; (8006554 <__sinit+0x28>)
 8006542:	6223      	str	r3, [r4, #32]
 8006544:	4b04      	ldr	r3, [pc, #16]	; (8006558 <__sinit+0x2c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1f5      	bne.n	8006538 <__sinit+0xc>
 800654c:	f7ff ffc4 	bl	80064d8 <global_stdio_init.part.0>
 8006550:	e7f2      	b.n	8006538 <__sinit+0xc>
 8006552:	bf00      	nop
 8006554:	08006499 	.word	0x08006499
 8006558:	20000420 	.word	0x20000420

0800655c <_fwalk_sglue>:
 800655c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006560:	4607      	mov	r7, r0
 8006562:	4688      	mov	r8, r1
 8006564:	4614      	mov	r4, r2
 8006566:	2600      	movs	r6, #0
 8006568:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800656c:	f1b9 0901 	subs.w	r9, r9, #1
 8006570:	d505      	bpl.n	800657e <_fwalk_sglue+0x22>
 8006572:	6824      	ldr	r4, [r4, #0]
 8006574:	2c00      	cmp	r4, #0
 8006576:	d1f7      	bne.n	8006568 <_fwalk_sglue+0xc>
 8006578:	4630      	mov	r0, r6
 800657a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657e:	89ab      	ldrh	r3, [r5, #12]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d907      	bls.n	8006594 <_fwalk_sglue+0x38>
 8006584:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006588:	3301      	adds	r3, #1
 800658a:	d003      	beq.n	8006594 <_fwalk_sglue+0x38>
 800658c:	4629      	mov	r1, r5
 800658e:	4638      	mov	r0, r7
 8006590:	47c0      	blx	r8
 8006592:	4306      	orrs	r6, r0
 8006594:	3568      	adds	r5, #104	; 0x68
 8006596:	e7e9      	b.n	800656c <_fwalk_sglue+0x10>

08006598 <__sread>:
 8006598:	b510      	push	{r4, lr}
 800659a:	460c      	mov	r4, r1
 800659c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a0:	f000 f894 	bl	80066cc <_read_r>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	bfab      	itete	ge
 80065a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065aa:	89a3      	ldrhlt	r3, [r4, #12]
 80065ac:	181b      	addge	r3, r3, r0
 80065ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065b2:	bfac      	ite	ge
 80065b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80065b6:	81a3      	strhlt	r3, [r4, #12]
 80065b8:	bd10      	pop	{r4, pc}

080065ba <__swrite>:
 80065ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065be:	461f      	mov	r7, r3
 80065c0:	898b      	ldrh	r3, [r1, #12]
 80065c2:	05db      	lsls	r3, r3, #23
 80065c4:	4605      	mov	r5, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	4616      	mov	r6, r2
 80065ca:	d505      	bpl.n	80065d8 <__swrite+0x1e>
 80065cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d0:	2302      	movs	r3, #2
 80065d2:	2200      	movs	r2, #0
 80065d4:	f000 f868 	bl	80066a8 <_lseek_r>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065e2:	81a3      	strh	r3, [r4, #12]
 80065e4:	4632      	mov	r2, r6
 80065e6:	463b      	mov	r3, r7
 80065e8:	4628      	mov	r0, r5
 80065ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ee:	f000 b87f 	b.w	80066f0 <_write_r>

080065f2 <__sseek>:
 80065f2:	b510      	push	{r4, lr}
 80065f4:	460c      	mov	r4, r1
 80065f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fa:	f000 f855 	bl	80066a8 <_lseek_r>
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	bf15      	itete	ne
 8006604:	6560      	strne	r0, [r4, #84]	; 0x54
 8006606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800660a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800660e:	81a3      	strheq	r3, [r4, #12]
 8006610:	bf18      	it	ne
 8006612:	81a3      	strhne	r3, [r4, #12]
 8006614:	bd10      	pop	{r4, pc}

08006616 <__sclose>:
 8006616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661a:	f000 b823 	b.w	8006664 <_close_r>

0800661e <memset>:
 800661e:	4402      	add	r2, r0
 8006620:	4603      	mov	r3, r0
 8006622:	4293      	cmp	r3, r2
 8006624:	d100      	bne.n	8006628 <memset+0xa>
 8006626:	4770      	bx	lr
 8006628:	f803 1b01 	strb.w	r1, [r3], #1
 800662c:	e7f9      	b.n	8006622 <memset+0x4>
	...

08006630 <time>:
 8006630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <time+0x30>)
 8006634:	2200      	movs	r2, #0
 8006636:	4669      	mov	r1, sp
 8006638:	4604      	mov	r4, r0
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	f000 f822 	bl	8006684 <_gettimeofday_r>
 8006640:	2800      	cmp	r0, #0
 8006642:	bfbe      	ittt	lt
 8006644:	f04f 32ff 	movlt.w	r2, #4294967295
 8006648:	f04f 33ff 	movlt.w	r3, #4294967295
 800664c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006650:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006654:	b10c      	cbz	r4, 800665a <time+0x2a>
 8006656:	e9c4 0100 	strd	r0, r1, [r4]
 800665a:	b004      	add	sp, #16
 800665c:	bd10      	pop	{r4, pc}
 800665e:	bf00      	nop
 8006660:	20000068 	.word	0x20000068

08006664 <_close_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	4d06      	ldr	r5, [pc, #24]	; (8006680 <_close_r+0x1c>)
 8006668:	2300      	movs	r3, #0
 800666a:	4604      	mov	r4, r0
 800666c:	4608      	mov	r0, r1
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	f7fa fe1f 	bl	80012b2 <_close>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d102      	bne.n	800667e <_close_r+0x1a>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	b103      	cbz	r3, 800667e <_close_r+0x1a>
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	20000424 	.word	0x20000424

08006684 <_gettimeofday_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4d07      	ldr	r5, [pc, #28]	; (80066a4 <_gettimeofday_r+0x20>)
 8006688:	2300      	movs	r3, #0
 800668a:	4604      	mov	r4, r0
 800668c:	4608      	mov	r0, r1
 800668e:	4611      	mov	r1, r2
 8006690:	602b      	str	r3, [r5, #0]
 8006692:	f000 fe93 	bl	80073bc <_gettimeofday>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d102      	bne.n	80066a0 <_gettimeofday_r+0x1c>
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	b103      	cbz	r3, 80066a0 <_gettimeofday_r+0x1c>
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	bd38      	pop	{r3, r4, r5, pc}
 80066a2:	bf00      	nop
 80066a4:	20000424 	.word	0x20000424

080066a8 <_lseek_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d07      	ldr	r5, [pc, #28]	; (80066c8 <_lseek_r+0x20>)
 80066ac:	4604      	mov	r4, r0
 80066ae:	4608      	mov	r0, r1
 80066b0:	4611      	mov	r1, r2
 80066b2:	2200      	movs	r2, #0
 80066b4:	602a      	str	r2, [r5, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	f7fa fe22 	bl	8001300 <_lseek>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d102      	bne.n	80066c6 <_lseek_r+0x1e>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	b103      	cbz	r3, 80066c6 <_lseek_r+0x1e>
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	20000424 	.word	0x20000424

080066cc <_read_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d07      	ldr	r5, [pc, #28]	; (80066ec <_read_r+0x20>)
 80066d0:	4604      	mov	r4, r0
 80066d2:	4608      	mov	r0, r1
 80066d4:	4611      	mov	r1, r2
 80066d6:	2200      	movs	r2, #0
 80066d8:	602a      	str	r2, [r5, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	f7fa fdb0 	bl	8001240 <_read>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d102      	bne.n	80066ea <_read_r+0x1e>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b103      	cbz	r3, 80066ea <_read_r+0x1e>
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	20000424 	.word	0x20000424

080066f0 <_write_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d07      	ldr	r5, [pc, #28]	; (8006710 <_write_r+0x20>)
 80066f4:	4604      	mov	r4, r0
 80066f6:	4608      	mov	r0, r1
 80066f8:	4611      	mov	r1, r2
 80066fa:	2200      	movs	r2, #0
 80066fc:	602a      	str	r2, [r5, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	f7fa fdbb 	bl	800127a <_write>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_write_r+0x1e>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_write_r+0x1e>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	20000424 	.word	0x20000424

08006714 <__errno>:
 8006714:	4b01      	ldr	r3, [pc, #4]	; (800671c <__errno+0x8>)
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	20000068 	.word	0x20000068

08006720 <__libc_init_array>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	4d0d      	ldr	r5, [pc, #52]	; (8006758 <__libc_init_array+0x38>)
 8006724:	4c0d      	ldr	r4, [pc, #52]	; (800675c <__libc_init_array+0x3c>)
 8006726:	1b64      	subs	r4, r4, r5
 8006728:	10a4      	asrs	r4, r4, #2
 800672a:	2600      	movs	r6, #0
 800672c:	42a6      	cmp	r6, r4
 800672e:	d109      	bne.n	8006744 <__libc_init_array+0x24>
 8006730:	4d0b      	ldr	r5, [pc, #44]	; (8006760 <__libc_init_array+0x40>)
 8006732:	4c0c      	ldr	r4, [pc, #48]	; (8006764 <__libc_init_array+0x44>)
 8006734:	f000 fe4a 	bl	80073cc <_init>
 8006738:	1b64      	subs	r4, r4, r5
 800673a:	10a4      	asrs	r4, r4, #2
 800673c:	2600      	movs	r6, #0
 800673e:	42a6      	cmp	r6, r4
 8006740:	d105      	bne.n	800674e <__libc_init_array+0x2e>
 8006742:	bd70      	pop	{r4, r5, r6, pc}
 8006744:	f855 3b04 	ldr.w	r3, [r5], #4
 8006748:	4798      	blx	r3
 800674a:	3601      	adds	r6, #1
 800674c:	e7ee      	b.n	800672c <__libc_init_array+0xc>
 800674e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006752:	4798      	blx	r3
 8006754:	3601      	adds	r6, #1
 8006756:	e7f2      	b.n	800673e <__libc_init_array+0x1e>
 8006758:	0800750c 	.word	0x0800750c
 800675c:	0800750c 	.word	0x0800750c
 8006760:	0800750c 	.word	0x0800750c
 8006764:	08007510 	.word	0x08007510

08006768 <__retarget_lock_init_recursive>:
 8006768:	4770      	bx	lr

0800676a <__retarget_lock_acquire_recursive>:
 800676a:	4770      	bx	lr

0800676c <__retarget_lock_release_recursive>:
 800676c:	4770      	bx	lr
	...

08006770 <__assert_func>:
 8006770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006772:	4614      	mov	r4, r2
 8006774:	461a      	mov	r2, r3
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <__assert_func+0x2c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4605      	mov	r5, r0
 800677c:	68d8      	ldr	r0, [r3, #12]
 800677e:	b14c      	cbz	r4, 8006794 <__assert_func+0x24>
 8006780:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <__assert_func+0x30>)
 8006782:	9100      	str	r1, [sp, #0]
 8006784:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006788:	4906      	ldr	r1, [pc, #24]	; (80067a4 <__assert_func+0x34>)
 800678a:	462b      	mov	r3, r5
 800678c:	f000 f9bc 	bl	8006b08 <fiprintf>
 8006790:	f000 f9dc 	bl	8006b4c <abort>
 8006794:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <__assert_func+0x38>)
 8006796:	461c      	mov	r4, r3
 8006798:	e7f3      	b.n	8006782 <__assert_func+0x12>
 800679a:	bf00      	nop
 800679c:	20000068 	.word	0x20000068
 80067a0:	08007493 	.word	0x08007493
 80067a4:	080074a0 	.word	0x080074a0
 80067a8:	080074ce 	.word	0x080074ce

080067ac <_free_r>:
 80067ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067ae:	2900      	cmp	r1, #0
 80067b0:	d044      	beq.n	800683c <_free_r+0x90>
 80067b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067b6:	9001      	str	r0, [sp, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f1a1 0404 	sub.w	r4, r1, #4
 80067be:	bfb8      	it	lt
 80067c0:	18e4      	addlt	r4, r4, r3
 80067c2:	f000 f8e7 	bl	8006994 <__malloc_lock>
 80067c6:	4a1e      	ldr	r2, [pc, #120]	; (8006840 <_free_r+0x94>)
 80067c8:	9801      	ldr	r0, [sp, #4]
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	b933      	cbnz	r3, 80067dc <_free_r+0x30>
 80067ce:	6063      	str	r3, [r4, #4]
 80067d0:	6014      	str	r4, [r2, #0]
 80067d2:	b003      	add	sp, #12
 80067d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067d8:	f000 b8e2 	b.w	80069a0 <__malloc_unlock>
 80067dc:	42a3      	cmp	r3, r4
 80067de:	d908      	bls.n	80067f2 <_free_r+0x46>
 80067e0:	6825      	ldr	r5, [r4, #0]
 80067e2:	1961      	adds	r1, r4, r5
 80067e4:	428b      	cmp	r3, r1
 80067e6:	bf01      	itttt	eq
 80067e8:	6819      	ldreq	r1, [r3, #0]
 80067ea:	685b      	ldreq	r3, [r3, #4]
 80067ec:	1949      	addeq	r1, r1, r5
 80067ee:	6021      	streq	r1, [r4, #0]
 80067f0:	e7ed      	b.n	80067ce <_free_r+0x22>
 80067f2:	461a      	mov	r2, r3
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	b10b      	cbz	r3, 80067fc <_free_r+0x50>
 80067f8:	42a3      	cmp	r3, r4
 80067fa:	d9fa      	bls.n	80067f2 <_free_r+0x46>
 80067fc:	6811      	ldr	r1, [r2, #0]
 80067fe:	1855      	adds	r5, r2, r1
 8006800:	42a5      	cmp	r5, r4
 8006802:	d10b      	bne.n	800681c <_free_r+0x70>
 8006804:	6824      	ldr	r4, [r4, #0]
 8006806:	4421      	add	r1, r4
 8006808:	1854      	adds	r4, r2, r1
 800680a:	42a3      	cmp	r3, r4
 800680c:	6011      	str	r1, [r2, #0]
 800680e:	d1e0      	bne.n	80067d2 <_free_r+0x26>
 8006810:	681c      	ldr	r4, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	6053      	str	r3, [r2, #4]
 8006816:	440c      	add	r4, r1
 8006818:	6014      	str	r4, [r2, #0]
 800681a:	e7da      	b.n	80067d2 <_free_r+0x26>
 800681c:	d902      	bls.n	8006824 <_free_r+0x78>
 800681e:	230c      	movs	r3, #12
 8006820:	6003      	str	r3, [r0, #0]
 8006822:	e7d6      	b.n	80067d2 <_free_r+0x26>
 8006824:	6825      	ldr	r5, [r4, #0]
 8006826:	1961      	adds	r1, r4, r5
 8006828:	428b      	cmp	r3, r1
 800682a:	bf04      	itt	eq
 800682c:	6819      	ldreq	r1, [r3, #0]
 800682e:	685b      	ldreq	r3, [r3, #4]
 8006830:	6063      	str	r3, [r4, #4]
 8006832:	bf04      	itt	eq
 8006834:	1949      	addeq	r1, r1, r5
 8006836:	6021      	streq	r1, [r4, #0]
 8006838:	6054      	str	r4, [r2, #4]
 800683a:	e7ca      	b.n	80067d2 <_free_r+0x26>
 800683c:	b003      	add	sp, #12
 800683e:	bd30      	pop	{r4, r5, pc}
 8006840:	2000042c 	.word	0x2000042c

08006844 <malloc>:
 8006844:	4b02      	ldr	r3, [pc, #8]	; (8006850 <malloc+0xc>)
 8006846:	4601      	mov	r1, r0
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f000 b823 	b.w	8006894 <_malloc_r>
 800684e:	bf00      	nop
 8006850:	20000068 	.word	0x20000068

08006854 <sbrk_aligned>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	4e0e      	ldr	r6, [pc, #56]	; (8006890 <sbrk_aligned+0x3c>)
 8006858:	460c      	mov	r4, r1
 800685a:	6831      	ldr	r1, [r6, #0]
 800685c:	4605      	mov	r5, r0
 800685e:	b911      	cbnz	r1, 8006866 <sbrk_aligned+0x12>
 8006860:	f000 f964 	bl	8006b2c <_sbrk_r>
 8006864:	6030      	str	r0, [r6, #0]
 8006866:	4621      	mov	r1, r4
 8006868:	4628      	mov	r0, r5
 800686a:	f000 f95f 	bl	8006b2c <_sbrk_r>
 800686e:	1c43      	adds	r3, r0, #1
 8006870:	d00a      	beq.n	8006888 <sbrk_aligned+0x34>
 8006872:	1cc4      	adds	r4, r0, #3
 8006874:	f024 0403 	bic.w	r4, r4, #3
 8006878:	42a0      	cmp	r0, r4
 800687a:	d007      	beq.n	800688c <sbrk_aligned+0x38>
 800687c:	1a21      	subs	r1, r4, r0
 800687e:	4628      	mov	r0, r5
 8006880:	f000 f954 	bl	8006b2c <_sbrk_r>
 8006884:	3001      	adds	r0, #1
 8006886:	d101      	bne.n	800688c <sbrk_aligned+0x38>
 8006888:	f04f 34ff 	mov.w	r4, #4294967295
 800688c:	4620      	mov	r0, r4
 800688e:	bd70      	pop	{r4, r5, r6, pc}
 8006890:	20000430 	.word	0x20000430

08006894 <_malloc_r>:
 8006894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006898:	1ccd      	adds	r5, r1, #3
 800689a:	f025 0503 	bic.w	r5, r5, #3
 800689e:	3508      	adds	r5, #8
 80068a0:	2d0c      	cmp	r5, #12
 80068a2:	bf38      	it	cc
 80068a4:	250c      	movcc	r5, #12
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	4607      	mov	r7, r0
 80068aa:	db01      	blt.n	80068b0 <_malloc_r+0x1c>
 80068ac:	42a9      	cmp	r1, r5
 80068ae:	d905      	bls.n	80068bc <_malloc_r+0x28>
 80068b0:	230c      	movs	r3, #12
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	2600      	movs	r6, #0
 80068b6:	4630      	mov	r0, r6
 80068b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006990 <_malloc_r+0xfc>
 80068c0:	f000 f868 	bl	8006994 <__malloc_lock>
 80068c4:	f8d8 3000 	ldr.w	r3, [r8]
 80068c8:	461c      	mov	r4, r3
 80068ca:	bb5c      	cbnz	r4, 8006924 <_malloc_r+0x90>
 80068cc:	4629      	mov	r1, r5
 80068ce:	4638      	mov	r0, r7
 80068d0:	f7ff ffc0 	bl	8006854 <sbrk_aligned>
 80068d4:	1c43      	adds	r3, r0, #1
 80068d6:	4604      	mov	r4, r0
 80068d8:	d155      	bne.n	8006986 <_malloc_r+0xf2>
 80068da:	f8d8 4000 	ldr.w	r4, [r8]
 80068de:	4626      	mov	r6, r4
 80068e0:	2e00      	cmp	r6, #0
 80068e2:	d145      	bne.n	8006970 <_malloc_r+0xdc>
 80068e4:	2c00      	cmp	r4, #0
 80068e6:	d048      	beq.n	800697a <_malloc_r+0xe6>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	4631      	mov	r1, r6
 80068ec:	4638      	mov	r0, r7
 80068ee:	eb04 0903 	add.w	r9, r4, r3
 80068f2:	f000 f91b 	bl	8006b2c <_sbrk_r>
 80068f6:	4581      	cmp	r9, r0
 80068f8:	d13f      	bne.n	800697a <_malloc_r+0xe6>
 80068fa:	6821      	ldr	r1, [r4, #0]
 80068fc:	1a6d      	subs	r5, r5, r1
 80068fe:	4629      	mov	r1, r5
 8006900:	4638      	mov	r0, r7
 8006902:	f7ff ffa7 	bl	8006854 <sbrk_aligned>
 8006906:	3001      	adds	r0, #1
 8006908:	d037      	beq.n	800697a <_malloc_r+0xe6>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	442b      	add	r3, r5
 800690e:	6023      	str	r3, [r4, #0]
 8006910:	f8d8 3000 	ldr.w	r3, [r8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d038      	beq.n	800698a <_malloc_r+0xf6>
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	42a2      	cmp	r2, r4
 800691c:	d12b      	bne.n	8006976 <_malloc_r+0xe2>
 800691e:	2200      	movs	r2, #0
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	e00f      	b.n	8006944 <_malloc_r+0xb0>
 8006924:	6822      	ldr	r2, [r4, #0]
 8006926:	1b52      	subs	r2, r2, r5
 8006928:	d41f      	bmi.n	800696a <_malloc_r+0xd6>
 800692a:	2a0b      	cmp	r2, #11
 800692c:	d917      	bls.n	800695e <_malloc_r+0xca>
 800692e:	1961      	adds	r1, r4, r5
 8006930:	42a3      	cmp	r3, r4
 8006932:	6025      	str	r5, [r4, #0]
 8006934:	bf18      	it	ne
 8006936:	6059      	strne	r1, [r3, #4]
 8006938:	6863      	ldr	r3, [r4, #4]
 800693a:	bf08      	it	eq
 800693c:	f8c8 1000 	streq.w	r1, [r8]
 8006940:	5162      	str	r2, [r4, r5]
 8006942:	604b      	str	r3, [r1, #4]
 8006944:	4638      	mov	r0, r7
 8006946:	f104 060b 	add.w	r6, r4, #11
 800694a:	f000 f829 	bl	80069a0 <__malloc_unlock>
 800694e:	f026 0607 	bic.w	r6, r6, #7
 8006952:	1d23      	adds	r3, r4, #4
 8006954:	1af2      	subs	r2, r6, r3
 8006956:	d0ae      	beq.n	80068b6 <_malloc_r+0x22>
 8006958:	1b9b      	subs	r3, r3, r6
 800695a:	50a3      	str	r3, [r4, r2]
 800695c:	e7ab      	b.n	80068b6 <_malloc_r+0x22>
 800695e:	42a3      	cmp	r3, r4
 8006960:	6862      	ldr	r2, [r4, #4]
 8006962:	d1dd      	bne.n	8006920 <_malloc_r+0x8c>
 8006964:	f8c8 2000 	str.w	r2, [r8]
 8006968:	e7ec      	b.n	8006944 <_malloc_r+0xb0>
 800696a:	4623      	mov	r3, r4
 800696c:	6864      	ldr	r4, [r4, #4]
 800696e:	e7ac      	b.n	80068ca <_malloc_r+0x36>
 8006970:	4634      	mov	r4, r6
 8006972:	6876      	ldr	r6, [r6, #4]
 8006974:	e7b4      	b.n	80068e0 <_malloc_r+0x4c>
 8006976:	4613      	mov	r3, r2
 8006978:	e7cc      	b.n	8006914 <_malloc_r+0x80>
 800697a:	230c      	movs	r3, #12
 800697c:	603b      	str	r3, [r7, #0]
 800697e:	4638      	mov	r0, r7
 8006980:	f000 f80e 	bl	80069a0 <__malloc_unlock>
 8006984:	e797      	b.n	80068b6 <_malloc_r+0x22>
 8006986:	6025      	str	r5, [r4, #0]
 8006988:	e7dc      	b.n	8006944 <_malloc_r+0xb0>
 800698a:	605b      	str	r3, [r3, #4]
 800698c:	deff      	udf	#255	; 0xff
 800698e:	bf00      	nop
 8006990:	2000042c 	.word	0x2000042c

08006994 <__malloc_lock>:
 8006994:	4801      	ldr	r0, [pc, #4]	; (800699c <__malloc_lock+0x8>)
 8006996:	f7ff bee8 	b.w	800676a <__retarget_lock_acquire_recursive>
 800699a:	bf00      	nop
 800699c:	20000428 	.word	0x20000428

080069a0 <__malloc_unlock>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__malloc_unlock+0x8>)
 80069a2:	f7ff bee3 	b.w	800676c <__retarget_lock_release_recursive>
 80069a6:	bf00      	nop
 80069a8:	20000428 	.word	0x20000428

080069ac <__sflush_r>:
 80069ac:	898a      	ldrh	r2, [r1, #12]
 80069ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b2:	4605      	mov	r5, r0
 80069b4:	0710      	lsls	r0, r2, #28
 80069b6:	460c      	mov	r4, r1
 80069b8:	d458      	bmi.n	8006a6c <__sflush_r+0xc0>
 80069ba:	684b      	ldr	r3, [r1, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dc05      	bgt.n	80069cc <__sflush_r+0x20>
 80069c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dc02      	bgt.n	80069cc <__sflush_r+0x20>
 80069c6:	2000      	movs	r0, #0
 80069c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	d0f9      	beq.n	80069c6 <__sflush_r+0x1a>
 80069d2:	2300      	movs	r3, #0
 80069d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069d8:	682f      	ldr	r7, [r5, #0]
 80069da:	6a21      	ldr	r1, [r4, #32]
 80069dc:	602b      	str	r3, [r5, #0]
 80069de:	d032      	beq.n	8006a46 <__sflush_r+0x9a>
 80069e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	075a      	lsls	r2, r3, #29
 80069e6:	d505      	bpl.n	80069f4 <__sflush_r+0x48>
 80069e8:	6863      	ldr	r3, [r4, #4]
 80069ea:	1ac0      	subs	r0, r0, r3
 80069ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069ee:	b10b      	cbz	r3, 80069f4 <__sflush_r+0x48>
 80069f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069f2:	1ac0      	subs	r0, r0, r3
 80069f4:	2300      	movs	r3, #0
 80069f6:	4602      	mov	r2, r0
 80069f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069fa:	6a21      	ldr	r1, [r4, #32]
 80069fc:	4628      	mov	r0, r5
 80069fe:	47b0      	blx	r6
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	d106      	bne.n	8006a14 <__sflush_r+0x68>
 8006a06:	6829      	ldr	r1, [r5, #0]
 8006a08:	291d      	cmp	r1, #29
 8006a0a:	d82b      	bhi.n	8006a64 <__sflush_r+0xb8>
 8006a0c:	4a29      	ldr	r2, [pc, #164]	; (8006ab4 <__sflush_r+0x108>)
 8006a0e:	410a      	asrs	r2, r1
 8006a10:	07d6      	lsls	r6, r2, #31
 8006a12:	d427      	bmi.n	8006a64 <__sflush_r+0xb8>
 8006a14:	2200      	movs	r2, #0
 8006a16:	6062      	str	r2, [r4, #4]
 8006a18:	04d9      	lsls	r1, r3, #19
 8006a1a:	6922      	ldr	r2, [r4, #16]
 8006a1c:	6022      	str	r2, [r4, #0]
 8006a1e:	d504      	bpl.n	8006a2a <__sflush_r+0x7e>
 8006a20:	1c42      	adds	r2, r0, #1
 8006a22:	d101      	bne.n	8006a28 <__sflush_r+0x7c>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b903      	cbnz	r3, 8006a2a <__sflush_r+0x7e>
 8006a28:	6560      	str	r0, [r4, #84]	; 0x54
 8006a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a2c:	602f      	str	r7, [r5, #0]
 8006a2e:	2900      	cmp	r1, #0
 8006a30:	d0c9      	beq.n	80069c6 <__sflush_r+0x1a>
 8006a32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a36:	4299      	cmp	r1, r3
 8006a38:	d002      	beq.n	8006a40 <__sflush_r+0x94>
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f7ff feb6 	bl	80067ac <_free_r>
 8006a40:	2000      	movs	r0, #0
 8006a42:	6360      	str	r0, [r4, #52]	; 0x34
 8006a44:	e7c0      	b.n	80069c8 <__sflush_r+0x1c>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4628      	mov	r0, r5
 8006a4a:	47b0      	blx	r6
 8006a4c:	1c41      	adds	r1, r0, #1
 8006a4e:	d1c8      	bne.n	80069e2 <__sflush_r+0x36>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0c5      	beq.n	80069e2 <__sflush_r+0x36>
 8006a56:	2b1d      	cmp	r3, #29
 8006a58:	d001      	beq.n	8006a5e <__sflush_r+0xb2>
 8006a5a:	2b16      	cmp	r3, #22
 8006a5c:	d101      	bne.n	8006a62 <__sflush_r+0xb6>
 8006a5e:	602f      	str	r7, [r5, #0]
 8006a60:	e7b1      	b.n	80069c6 <__sflush_r+0x1a>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a68:	81a3      	strh	r3, [r4, #12]
 8006a6a:	e7ad      	b.n	80069c8 <__sflush_r+0x1c>
 8006a6c:	690f      	ldr	r7, [r1, #16]
 8006a6e:	2f00      	cmp	r7, #0
 8006a70:	d0a9      	beq.n	80069c6 <__sflush_r+0x1a>
 8006a72:	0793      	lsls	r3, r2, #30
 8006a74:	680e      	ldr	r6, [r1, #0]
 8006a76:	bf08      	it	eq
 8006a78:	694b      	ldreq	r3, [r1, #20]
 8006a7a:	600f      	str	r7, [r1, #0]
 8006a7c:	bf18      	it	ne
 8006a7e:	2300      	movne	r3, #0
 8006a80:	eba6 0807 	sub.w	r8, r6, r7
 8006a84:	608b      	str	r3, [r1, #8]
 8006a86:	f1b8 0f00 	cmp.w	r8, #0
 8006a8a:	dd9c      	ble.n	80069c6 <__sflush_r+0x1a>
 8006a8c:	6a21      	ldr	r1, [r4, #32]
 8006a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a90:	4643      	mov	r3, r8
 8006a92:	463a      	mov	r2, r7
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b0      	blx	r6
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	dc06      	bgt.n	8006aaa <__sflush_r+0xfe>
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa8:	e78e      	b.n	80069c8 <__sflush_r+0x1c>
 8006aaa:	4407      	add	r7, r0
 8006aac:	eba8 0800 	sub.w	r8, r8, r0
 8006ab0:	e7e9      	b.n	8006a86 <__sflush_r+0xda>
 8006ab2:	bf00      	nop
 8006ab4:	dfbffffe 	.word	0xdfbffffe

08006ab8 <_fflush_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	690b      	ldr	r3, [r1, #16]
 8006abc:	4605      	mov	r5, r0
 8006abe:	460c      	mov	r4, r1
 8006ac0:	b913      	cbnz	r3, 8006ac8 <_fflush_r+0x10>
 8006ac2:	2500      	movs	r5, #0
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	b118      	cbz	r0, 8006ad2 <_fflush_r+0x1a>
 8006aca:	6a03      	ldr	r3, [r0, #32]
 8006acc:	b90b      	cbnz	r3, 8006ad2 <_fflush_r+0x1a>
 8006ace:	f7ff fd2d 	bl	800652c <__sinit>
 8006ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0f3      	beq.n	8006ac2 <_fflush_r+0xa>
 8006ada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006adc:	07d0      	lsls	r0, r2, #31
 8006ade:	d404      	bmi.n	8006aea <_fflush_r+0x32>
 8006ae0:	0599      	lsls	r1, r3, #22
 8006ae2:	d402      	bmi.n	8006aea <_fflush_r+0x32>
 8006ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ae6:	f7ff fe40 	bl	800676a <__retarget_lock_acquire_recursive>
 8006aea:	4628      	mov	r0, r5
 8006aec:	4621      	mov	r1, r4
 8006aee:	f7ff ff5d 	bl	80069ac <__sflush_r>
 8006af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006af4:	07da      	lsls	r2, r3, #31
 8006af6:	4605      	mov	r5, r0
 8006af8:	d4e4      	bmi.n	8006ac4 <_fflush_r+0xc>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	059b      	lsls	r3, r3, #22
 8006afe:	d4e1      	bmi.n	8006ac4 <_fflush_r+0xc>
 8006b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b02:	f7ff fe33 	bl	800676c <__retarget_lock_release_recursive>
 8006b06:	e7dd      	b.n	8006ac4 <_fflush_r+0xc>

08006b08 <fiprintf>:
 8006b08:	b40e      	push	{r1, r2, r3}
 8006b0a:	b503      	push	{r0, r1, lr}
 8006b0c:	4601      	mov	r1, r0
 8006b0e:	ab03      	add	r3, sp, #12
 8006b10:	4805      	ldr	r0, [pc, #20]	; (8006b28 <fiprintf+0x20>)
 8006b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b16:	6800      	ldr	r0, [r0, #0]
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	f000 f847 	bl	8006bac <_vfiprintf_r>
 8006b1e:	b002      	add	sp, #8
 8006b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b24:	b003      	add	sp, #12
 8006b26:	4770      	bx	lr
 8006b28:	20000068 	.word	0x20000068

08006b2c <_sbrk_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4d06      	ldr	r5, [pc, #24]	; (8006b48 <_sbrk_r+0x1c>)
 8006b30:	2300      	movs	r3, #0
 8006b32:	4604      	mov	r4, r0
 8006b34:	4608      	mov	r0, r1
 8006b36:	602b      	str	r3, [r5, #0]
 8006b38:	f7fa fbf0 	bl	800131c <_sbrk>
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	d102      	bne.n	8006b46 <_sbrk_r+0x1a>
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	b103      	cbz	r3, 8006b46 <_sbrk_r+0x1a>
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	bd38      	pop	{r3, r4, r5, pc}
 8006b48:	20000424 	.word	0x20000424

08006b4c <abort>:
 8006b4c:	b508      	push	{r3, lr}
 8006b4e:	2006      	movs	r0, #6
 8006b50:	f000 fb94 	bl	800727c <raise>
 8006b54:	2001      	movs	r0, #1
 8006b56:	f7fa fb69 	bl	800122c <_exit>

08006b5a <__sfputc_r>:
 8006b5a:	6893      	ldr	r3, [r2, #8]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	b410      	push	{r4}
 8006b62:	6093      	str	r3, [r2, #8]
 8006b64:	da08      	bge.n	8006b78 <__sfputc_r+0x1e>
 8006b66:	6994      	ldr	r4, [r2, #24]
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	db01      	blt.n	8006b70 <__sfputc_r+0x16>
 8006b6c:	290a      	cmp	r1, #10
 8006b6e:	d103      	bne.n	8006b78 <__sfputc_r+0x1e>
 8006b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b74:	f000 bac4 	b.w	8007100 <__swbuf_r>
 8006b78:	6813      	ldr	r3, [r2, #0]
 8006b7a:	1c58      	adds	r0, r3, #1
 8006b7c:	6010      	str	r0, [r2, #0]
 8006b7e:	7019      	strb	r1, [r3, #0]
 8006b80:	4608      	mov	r0, r1
 8006b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <__sfputs_r>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	460f      	mov	r7, r1
 8006b8e:	4614      	mov	r4, r2
 8006b90:	18d5      	adds	r5, r2, r3
 8006b92:	42ac      	cmp	r4, r5
 8006b94:	d101      	bne.n	8006b9a <__sfputs_r+0x12>
 8006b96:	2000      	movs	r0, #0
 8006b98:	e007      	b.n	8006baa <__sfputs_r+0x22>
 8006b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9e:	463a      	mov	r2, r7
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7ff ffda 	bl	8006b5a <__sfputc_r>
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	d1f3      	bne.n	8006b92 <__sfputs_r+0xa>
 8006baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006bac <_vfiprintf_r>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	b09d      	sub	sp, #116	; 0x74
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	4698      	mov	r8, r3
 8006bb8:	4606      	mov	r6, r0
 8006bba:	b118      	cbz	r0, 8006bc4 <_vfiprintf_r+0x18>
 8006bbc:	6a03      	ldr	r3, [r0, #32]
 8006bbe:	b90b      	cbnz	r3, 8006bc4 <_vfiprintf_r+0x18>
 8006bc0:	f7ff fcb4 	bl	800652c <__sinit>
 8006bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bc6:	07d9      	lsls	r1, r3, #31
 8006bc8:	d405      	bmi.n	8006bd6 <_vfiprintf_r+0x2a>
 8006bca:	89ab      	ldrh	r3, [r5, #12]
 8006bcc:	059a      	lsls	r2, r3, #22
 8006bce:	d402      	bmi.n	8006bd6 <_vfiprintf_r+0x2a>
 8006bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bd2:	f7ff fdca 	bl	800676a <__retarget_lock_acquire_recursive>
 8006bd6:	89ab      	ldrh	r3, [r5, #12]
 8006bd8:	071b      	lsls	r3, r3, #28
 8006bda:	d501      	bpl.n	8006be0 <_vfiprintf_r+0x34>
 8006bdc:	692b      	ldr	r3, [r5, #16]
 8006bde:	b99b      	cbnz	r3, 8006c08 <_vfiprintf_r+0x5c>
 8006be0:	4629      	mov	r1, r5
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 faca 	bl	800717c <__swsetup_r>
 8006be8:	b170      	cbz	r0, 8006c08 <_vfiprintf_r+0x5c>
 8006bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bec:	07dc      	lsls	r4, r3, #31
 8006bee:	d504      	bpl.n	8006bfa <_vfiprintf_r+0x4e>
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	b01d      	add	sp, #116	; 0x74
 8006bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfa:	89ab      	ldrh	r3, [r5, #12]
 8006bfc:	0598      	lsls	r0, r3, #22
 8006bfe:	d4f7      	bmi.n	8006bf0 <_vfiprintf_r+0x44>
 8006c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c02:	f7ff fdb3 	bl	800676c <__retarget_lock_release_recursive>
 8006c06:	e7f3      	b.n	8006bf0 <_vfiprintf_r+0x44>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c0c:	2320      	movs	r3, #32
 8006c0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c16:	2330      	movs	r3, #48	; 0x30
 8006c18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006dcc <_vfiprintf_r+0x220>
 8006c1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c20:	f04f 0901 	mov.w	r9, #1
 8006c24:	4623      	mov	r3, r4
 8006c26:	469a      	mov	sl, r3
 8006c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c2c:	b10a      	cbz	r2, 8006c32 <_vfiprintf_r+0x86>
 8006c2e:	2a25      	cmp	r2, #37	; 0x25
 8006c30:	d1f9      	bne.n	8006c26 <_vfiprintf_r+0x7a>
 8006c32:	ebba 0b04 	subs.w	fp, sl, r4
 8006c36:	d00b      	beq.n	8006c50 <_vfiprintf_r+0xa4>
 8006c38:	465b      	mov	r3, fp
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f7ff ffa2 	bl	8006b88 <__sfputs_r>
 8006c44:	3001      	adds	r0, #1
 8006c46:	f000 80a9 	beq.w	8006d9c <_vfiprintf_r+0x1f0>
 8006c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c4c:	445a      	add	r2, fp
 8006c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8006c50:	f89a 3000 	ldrb.w	r3, [sl]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 80a1 	beq.w	8006d9c <_vfiprintf_r+0x1f0>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c64:	f10a 0a01 	add.w	sl, sl, #1
 8006c68:	9304      	str	r3, [sp, #16]
 8006c6a:	9307      	str	r3, [sp, #28]
 8006c6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c70:	931a      	str	r3, [sp, #104]	; 0x68
 8006c72:	4654      	mov	r4, sl
 8006c74:	2205      	movs	r2, #5
 8006c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c7a:	4854      	ldr	r0, [pc, #336]	; (8006dcc <_vfiprintf_r+0x220>)
 8006c7c:	f7f9 fad0 	bl	8000220 <memchr>
 8006c80:	9a04      	ldr	r2, [sp, #16]
 8006c82:	b9d8      	cbnz	r0, 8006cbc <_vfiprintf_r+0x110>
 8006c84:	06d1      	lsls	r1, r2, #27
 8006c86:	bf44      	itt	mi
 8006c88:	2320      	movmi	r3, #32
 8006c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c8e:	0713      	lsls	r3, r2, #28
 8006c90:	bf44      	itt	mi
 8006c92:	232b      	movmi	r3, #43	; 0x2b
 8006c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c98:	f89a 3000 	ldrb.w	r3, [sl]
 8006c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9e:	d015      	beq.n	8006ccc <_vfiprintf_r+0x120>
 8006ca0:	9a07      	ldr	r2, [sp, #28]
 8006ca2:	4654      	mov	r4, sl
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	f04f 0c0a 	mov.w	ip, #10
 8006caa:	4621      	mov	r1, r4
 8006cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cb0:	3b30      	subs	r3, #48	; 0x30
 8006cb2:	2b09      	cmp	r3, #9
 8006cb4:	d94d      	bls.n	8006d52 <_vfiprintf_r+0x1a6>
 8006cb6:	b1b0      	cbz	r0, 8006ce6 <_vfiprintf_r+0x13a>
 8006cb8:	9207      	str	r2, [sp, #28]
 8006cba:	e014      	b.n	8006ce6 <_vfiprintf_r+0x13a>
 8006cbc:	eba0 0308 	sub.w	r3, r0, r8
 8006cc0:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	9304      	str	r3, [sp, #16]
 8006cc8:	46a2      	mov	sl, r4
 8006cca:	e7d2      	b.n	8006c72 <_vfiprintf_r+0xc6>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	1d19      	adds	r1, r3, #4
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	9103      	str	r1, [sp, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	bfbb      	ittet	lt
 8006cd8:	425b      	neglt	r3, r3
 8006cda:	f042 0202 	orrlt.w	r2, r2, #2
 8006cde:	9307      	strge	r3, [sp, #28]
 8006ce0:	9307      	strlt	r3, [sp, #28]
 8006ce2:	bfb8      	it	lt
 8006ce4:	9204      	strlt	r2, [sp, #16]
 8006ce6:	7823      	ldrb	r3, [r4, #0]
 8006ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8006cea:	d10c      	bne.n	8006d06 <_vfiprintf_r+0x15a>
 8006cec:	7863      	ldrb	r3, [r4, #1]
 8006cee:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf0:	d134      	bne.n	8006d5c <_vfiprintf_r+0x1b0>
 8006cf2:	9b03      	ldr	r3, [sp, #12]
 8006cf4:	1d1a      	adds	r2, r3, #4
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	9203      	str	r2, [sp, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bfb8      	it	lt
 8006cfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d02:	3402      	adds	r4, #2
 8006d04:	9305      	str	r3, [sp, #20]
 8006d06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006ddc <_vfiprintf_r+0x230>
 8006d0a:	7821      	ldrb	r1, [r4, #0]
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	4650      	mov	r0, sl
 8006d10:	f7f9 fa86 	bl	8000220 <memchr>
 8006d14:	b138      	cbz	r0, 8006d26 <_vfiprintf_r+0x17a>
 8006d16:	9b04      	ldr	r3, [sp, #16]
 8006d18:	eba0 000a 	sub.w	r0, r0, sl
 8006d1c:	2240      	movs	r2, #64	; 0x40
 8006d1e:	4082      	lsls	r2, r0
 8006d20:	4313      	orrs	r3, r2
 8006d22:	3401      	adds	r4, #1
 8006d24:	9304      	str	r3, [sp, #16]
 8006d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d2a:	4829      	ldr	r0, [pc, #164]	; (8006dd0 <_vfiprintf_r+0x224>)
 8006d2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d30:	2206      	movs	r2, #6
 8006d32:	f7f9 fa75 	bl	8000220 <memchr>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d03f      	beq.n	8006dba <_vfiprintf_r+0x20e>
 8006d3a:	4b26      	ldr	r3, [pc, #152]	; (8006dd4 <_vfiprintf_r+0x228>)
 8006d3c:	bb1b      	cbnz	r3, 8006d86 <_vfiprintf_r+0x1da>
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	3307      	adds	r3, #7
 8006d42:	f023 0307 	bic.w	r3, r3, #7
 8006d46:	3308      	adds	r3, #8
 8006d48:	9303      	str	r3, [sp, #12]
 8006d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4c:	443b      	add	r3, r7
 8006d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d50:	e768      	b.n	8006c24 <_vfiprintf_r+0x78>
 8006d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d56:	460c      	mov	r4, r1
 8006d58:	2001      	movs	r0, #1
 8006d5a:	e7a6      	b.n	8006caa <_vfiprintf_r+0xfe>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	3401      	adds	r4, #1
 8006d60:	9305      	str	r3, [sp, #20]
 8006d62:	4619      	mov	r1, r3
 8006d64:	f04f 0c0a 	mov.w	ip, #10
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d6e:	3a30      	subs	r2, #48	; 0x30
 8006d70:	2a09      	cmp	r2, #9
 8006d72:	d903      	bls.n	8006d7c <_vfiprintf_r+0x1d0>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0c6      	beq.n	8006d06 <_vfiprintf_r+0x15a>
 8006d78:	9105      	str	r1, [sp, #20]
 8006d7a:	e7c4      	b.n	8006d06 <_vfiprintf_r+0x15a>
 8006d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d80:	4604      	mov	r4, r0
 8006d82:	2301      	movs	r3, #1
 8006d84:	e7f0      	b.n	8006d68 <_vfiprintf_r+0x1bc>
 8006d86:	ab03      	add	r3, sp, #12
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	462a      	mov	r2, r5
 8006d8c:	4b12      	ldr	r3, [pc, #72]	; (8006dd8 <_vfiprintf_r+0x22c>)
 8006d8e:	a904      	add	r1, sp, #16
 8006d90:	4630      	mov	r0, r6
 8006d92:	f3af 8000 	nop.w
 8006d96:	4607      	mov	r7, r0
 8006d98:	1c78      	adds	r0, r7, #1
 8006d9a:	d1d6      	bne.n	8006d4a <_vfiprintf_r+0x19e>
 8006d9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d9e:	07d9      	lsls	r1, r3, #31
 8006da0:	d405      	bmi.n	8006dae <_vfiprintf_r+0x202>
 8006da2:	89ab      	ldrh	r3, [r5, #12]
 8006da4:	059a      	lsls	r2, r3, #22
 8006da6:	d402      	bmi.n	8006dae <_vfiprintf_r+0x202>
 8006da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006daa:	f7ff fcdf 	bl	800676c <__retarget_lock_release_recursive>
 8006dae:	89ab      	ldrh	r3, [r5, #12]
 8006db0:	065b      	lsls	r3, r3, #25
 8006db2:	f53f af1d 	bmi.w	8006bf0 <_vfiprintf_r+0x44>
 8006db6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006db8:	e71c      	b.n	8006bf4 <_vfiprintf_r+0x48>
 8006dba:	ab03      	add	r3, sp, #12
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	462a      	mov	r2, r5
 8006dc0:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <_vfiprintf_r+0x22c>)
 8006dc2:	a904      	add	r1, sp, #16
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f000 f879 	bl	8006ebc <_printf_i>
 8006dca:	e7e4      	b.n	8006d96 <_vfiprintf_r+0x1ea>
 8006dcc:	080074cf 	.word	0x080074cf
 8006dd0:	080074d9 	.word	0x080074d9
 8006dd4:	00000000 	.word	0x00000000
 8006dd8:	08006b89 	.word	0x08006b89
 8006ddc:	080074d5 	.word	0x080074d5

08006de0 <_printf_common>:
 8006de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de4:	4616      	mov	r6, r2
 8006de6:	4699      	mov	r9, r3
 8006de8:	688a      	ldr	r2, [r1, #8]
 8006dea:	690b      	ldr	r3, [r1, #16]
 8006dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006df0:	4293      	cmp	r3, r2
 8006df2:	bfb8      	it	lt
 8006df4:	4613      	movlt	r3, r2
 8006df6:	6033      	str	r3, [r6, #0]
 8006df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	460c      	mov	r4, r1
 8006e00:	b10a      	cbz	r2, 8006e06 <_printf_common+0x26>
 8006e02:	3301      	adds	r3, #1
 8006e04:	6033      	str	r3, [r6, #0]
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	0699      	lsls	r1, r3, #26
 8006e0a:	bf42      	ittt	mi
 8006e0c:	6833      	ldrmi	r3, [r6, #0]
 8006e0e:	3302      	addmi	r3, #2
 8006e10:	6033      	strmi	r3, [r6, #0]
 8006e12:	6825      	ldr	r5, [r4, #0]
 8006e14:	f015 0506 	ands.w	r5, r5, #6
 8006e18:	d106      	bne.n	8006e28 <_printf_common+0x48>
 8006e1a:	f104 0a19 	add.w	sl, r4, #25
 8006e1e:	68e3      	ldr	r3, [r4, #12]
 8006e20:	6832      	ldr	r2, [r6, #0]
 8006e22:	1a9b      	subs	r3, r3, r2
 8006e24:	42ab      	cmp	r3, r5
 8006e26:	dc26      	bgt.n	8006e76 <_printf_common+0x96>
 8006e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e2c:	1e13      	subs	r3, r2, #0
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	bf18      	it	ne
 8006e32:	2301      	movne	r3, #1
 8006e34:	0692      	lsls	r2, r2, #26
 8006e36:	d42b      	bmi.n	8006e90 <_printf_common+0xb0>
 8006e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	4638      	mov	r0, r7
 8006e40:	47c0      	blx	r8
 8006e42:	3001      	adds	r0, #1
 8006e44:	d01e      	beq.n	8006e84 <_printf_common+0xa4>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	6922      	ldr	r2, [r4, #16]
 8006e4a:	f003 0306 	and.w	r3, r3, #6
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	bf02      	ittt	eq
 8006e52:	68e5      	ldreq	r5, [r4, #12]
 8006e54:	6833      	ldreq	r3, [r6, #0]
 8006e56:	1aed      	subeq	r5, r5, r3
 8006e58:	68a3      	ldr	r3, [r4, #8]
 8006e5a:	bf0c      	ite	eq
 8006e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e60:	2500      	movne	r5, #0
 8006e62:	4293      	cmp	r3, r2
 8006e64:	bfc4      	itt	gt
 8006e66:	1a9b      	subgt	r3, r3, r2
 8006e68:	18ed      	addgt	r5, r5, r3
 8006e6a:	2600      	movs	r6, #0
 8006e6c:	341a      	adds	r4, #26
 8006e6e:	42b5      	cmp	r5, r6
 8006e70:	d11a      	bne.n	8006ea8 <_printf_common+0xc8>
 8006e72:	2000      	movs	r0, #0
 8006e74:	e008      	b.n	8006e88 <_printf_common+0xa8>
 8006e76:	2301      	movs	r3, #1
 8006e78:	4652      	mov	r2, sl
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	47c0      	blx	r8
 8006e80:	3001      	adds	r0, #1
 8006e82:	d103      	bne.n	8006e8c <_printf_common+0xac>
 8006e84:	f04f 30ff 	mov.w	r0, #4294967295
 8006e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8c:	3501      	adds	r5, #1
 8006e8e:	e7c6      	b.n	8006e1e <_printf_common+0x3e>
 8006e90:	18e1      	adds	r1, r4, r3
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	2030      	movs	r0, #48	; 0x30
 8006e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e9a:	4422      	add	r2, r4
 8006e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ea4:	3302      	adds	r3, #2
 8006ea6:	e7c7      	b.n	8006e38 <_printf_common+0x58>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	4622      	mov	r2, r4
 8006eac:	4649      	mov	r1, r9
 8006eae:	4638      	mov	r0, r7
 8006eb0:	47c0      	blx	r8
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d0e6      	beq.n	8006e84 <_printf_common+0xa4>
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	e7d9      	b.n	8006e6e <_printf_common+0x8e>
	...

08006ebc <_printf_i>:
 8006ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec0:	7e0f      	ldrb	r7, [r1, #24]
 8006ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ec4:	2f78      	cmp	r7, #120	; 0x78
 8006ec6:	4691      	mov	r9, r2
 8006ec8:	4680      	mov	r8, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	469a      	mov	sl, r3
 8006ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ed2:	d807      	bhi.n	8006ee4 <_printf_i+0x28>
 8006ed4:	2f62      	cmp	r7, #98	; 0x62
 8006ed6:	d80a      	bhi.n	8006eee <_printf_i+0x32>
 8006ed8:	2f00      	cmp	r7, #0
 8006eda:	f000 80d4 	beq.w	8007086 <_printf_i+0x1ca>
 8006ede:	2f58      	cmp	r7, #88	; 0x58
 8006ee0:	f000 80c0 	beq.w	8007064 <_printf_i+0x1a8>
 8006ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006eec:	e03a      	b.n	8006f64 <_printf_i+0xa8>
 8006eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ef2:	2b15      	cmp	r3, #21
 8006ef4:	d8f6      	bhi.n	8006ee4 <_printf_i+0x28>
 8006ef6:	a101      	add	r1, pc, #4	; (adr r1, 8006efc <_printf_i+0x40>)
 8006ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006efc:	08006f55 	.word	0x08006f55
 8006f00:	08006f69 	.word	0x08006f69
 8006f04:	08006ee5 	.word	0x08006ee5
 8006f08:	08006ee5 	.word	0x08006ee5
 8006f0c:	08006ee5 	.word	0x08006ee5
 8006f10:	08006ee5 	.word	0x08006ee5
 8006f14:	08006f69 	.word	0x08006f69
 8006f18:	08006ee5 	.word	0x08006ee5
 8006f1c:	08006ee5 	.word	0x08006ee5
 8006f20:	08006ee5 	.word	0x08006ee5
 8006f24:	08006ee5 	.word	0x08006ee5
 8006f28:	0800706d 	.word	0x0800706d
 8006f2c:	08006f95 	.word	0x08006f95
 8006f30:	08007027 	.word	0x08007027
 8006f34:	08006ee5 	.word	0x08006ee5
 8006f38:	08006ee5 	.word	0x08006ee5
 8006f3c:	0800708f 	.word	0x0800708f
 8006f40:	08006ee5 	.word	0x08006ee5
 8006f44:	08006f95 	.word	0x08006f95
 8006f48:	08006ee5 	.word	0x08006ee5
 8006f4c:	08006ee5 	.word	0x08006ee5
 8006f50:	0800702f 	.word	0x0800702f
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	1d1a      	adds	r2, r3, #4
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	602a      	str	r2, [r5, #0]
 8006f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f64:	2301      	movs	r3, #1
 8006f66:	e09f      	b.n	80070a8 <_printf_i+0x1ec>
 8006f68:	6820      	ldr	r0, [r4, #0]
 8006f6a:	682b      	ldr	r3, [r5, #0]
 8006f6c:	0607      	lsls	r7, r0, #24
 8006f6e:	f103 0104 	add.w	r1, r3, #4
 8006f72:	6029      	str	r1, [r5, #0]
 8006f74:	d501      	bpl.n	8006f7a <_printf_i+0xbe>
 8006f76:	681e      	ldr	r6, [r3, #0]
 8006f78:	e003      	b.n	8006f82 <_printf_i+0xc6>
 8006f7a:	0646      	lsls	r6, r0, #25
 8006f7c:	d5fb      	bpl.n	8006f76 <_printf_i+0xba>
 8006f7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f82:	2e00      	cmp	r6, #0
 8006f84:	da03      	bge.n	8006f8e <_printf_i+0xd2>
 8006f86:	232d      	movs	r3, #45	; 0x2d
 8006f88:	4276      	negs	r6, r6
 8006f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f8e:	485a      	ldr	r0, [pc, #360]	; (80070f8 <_printf_i+0x23c>)
 8006f90:	230a      	movs	r3, #10
 8006f92:	e012      	b.n	8006fba <_printf_i+0xfe>
 8006f94:	682b      	ldr	r3, [r5, #0]
 8006f96:	6820      	ldr	r0, [r4, #0]
 8006f98:	1d19      	adds	r1, r3, #4
 8006f9a:	6029      	str	r1, [r5, #0]
 8006f9c:	0605      	lsls	r5, r0, #24
 8006f9e:	d501      	bpl.n	8006fa4 <_printf_i+0xe8>
 8006fa0:	681e      	ldr	r6, [r3, #0]
 8006fa2:	e002      	b.n	8006faa <_printf_i+0xee>
 8006fa4:	0641      	lsls	r1, r0, #25
 8006fa6:	d5fb      	bpl.n	8006fa0 <_printf_i+0xe4>
 8006fa8:	881e      	ldrh	r6, [r3, #0]
 8006faa:	4853      	ldr	r0, [pc, #332]	; (80070f8 <_printf_i+0x23c>)
 8006fac:	2f6f      	cmp	r7, #111	; 0x6f
 8006fae:	bf0c      	ite	eq
 8006fb0:	2308      	moveq	r3, #8
 8006fb2:	230a      	movne	r3, #10
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fba:	6865      	ldr	r5, [r4, #4]
 8006fbc:	60a5      	str	r5, [r4, #8]
 8006fbe:	2d00      	cmp	r5, #0
 8006fc0:	bfa2      	ittt	ge
 8006fc2:	6821      	ldrge	r1, [r4, #0]
 8006fc4:	f021 0104 	bicge.w	r1, r1, #4
 8006fc8:	6021      	strge	r1, [r4, #0]
 8006fca:	b90e      	cbnz	r6, 8006fd0 <_printf_i+0x114>
 8006fcc:	2d00      	cmp	r5, #0
 8006fce:	d04b      	beq.n	8007068 <_printf_i+0x1ac>
 8006fd0:	4615      	mov	r5, r2
 8006fd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fd6:	fb03 6711 	mls	r7, r3, r1, r6
 8006fda:	5dc7      	ldrb	r7, [r0, r7]
 8006fdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fe0:	4637      	mov	r7, r6
 8006fe2:	42bb      	cmp	r3, r7
 8006fe4:	460e      	mov	r6, r1
 8006fe6:	d9f4      	bls.n	8006fd2 <_printf_i+0x116>
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d10b      	bne.n	8007004 <_printf_i+0x148>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	07de      	lsls	r6, r3, #31
 8006ff0:	d508      	bpl.n	8007004 <_printf_i+0x148>
 8006ff2:	6923      	ldr	r3, [r4, #16]
 8006ff4:	6861      	ldr	r1, [r4, #4]
 8006ff6:	4299      	cmp	r1, r3
 8006ff8:	bfde      	ittt	le
 8006ffa:	2330      	movle	r3, #48	; 0x30
 8006ffc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007000:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007004:	1b52      	subs	r2, r2, r5
 8007006:	6122      	str	r2, [r4, #16]
 8007008:	f8cd a000 	str.w	sl, [sp]
 800700c:	464b      	mov	r3, r9
 800700e:	aa03      	add	r2, sp, #12
 8007010:	4621      	mov	r1, r4
 8007012:	4640      	mov	r0, r8
 8007014:	f7ff fee4 	bl	8006de0 <_printf_common>
 8007018:	3001      	adds	r0, #1
 800701a:	d14a      	bne.n	80070b2 <_printf_i+0x1f6>
 800701c:	f04f 30ff 	mov.w	r0, #4294967295
 8007020:	b004      	add	sp, #16
 8007022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	f043 0320 	orr.w	r3, r3, #32
 800702c:	6023      	str	r3, [r4, #0]
 800702e:	4833      	ldr	r0, [pc, #204]	; (80070fc <_printf_i+0x240>)
 8007030:	2778      	movs	r7, #120	; 0x78
 8007032:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	6829      	ldr	r1, [r5, #0]
 800703a:	061f      	lsls	r7, r3, #24
 800703c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007040:	d402      	bmi.n	8007048 <_printf_i+0x18c>
 8007042:	065f      	lsls	r7, r3, #25
 8007044:	bf48      	it	mi
 8007046:	b2b6      	uxthmi	r6, r6
 8007048:	07df      	lsls	r7, r3, #31
 800704a:	bf48      	it	mi
 800704c:	f043 0320 	orrmi.w	r3, r3, #32
 8007050:	6029      	str	r1, [r5, #0]
 8007052:	bf48      	it	mi
 8007054:	6023      	strmi	r3, [r4, #0]
 8007056:	b91e      	cbnz	r6, 8007060 <_printf_i+0x1a4>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	f023 0320 	bic.w	r3, r3, #32
 800705e:	6023      	str	r3, [r4, #0]
 8007060:	2310      	movs	r3, #16
 8007062:	e7a7      	b.n	8006fb4 <_printf_i+0xf8>
 8007064:	4824      	ldr	r0, [pc, #144]	; (80070f8 <_printf_i+0x23c>)
 8007066:	e7e4      	b.n	8007032 <_printf_i+0x176>
 8007068:	4615      	mov	r5, r2
 800706a:	e7bd      	b.n	8006fe8 <_printf_i+0x12c>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	6826      	ldr	r6, [r4, #0]
 8007070:	6961      	ldr	r1, [r4, #20]
 8007072:	1d18      	adds	r0, r3, #4
 8007074:	6028      	str	r0, [r5, #0]
 8007076:	0635      	lsls	r5, r6, #24
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	d501      	bpl.n	8007080 <_printf_i+0x1c4>
 800707c:	6019      	str	r1, [r3, #0]
 800707e:	e002      	b.n	8007086 <_printf_i+0x1ca>
 8007080:	0670      	lsls	r0, r6, #25
 8007082:	d5fb      	bpl.n	800707c <_printf_i+0x1c0>
 8007084:	8019      	strh	r1, [r3, #0]
 8007086:	2300      	movs	r3, #0
 8007088:	6123      	str	r3, [r4, #16]
 800708a:	4615      	mov	r5, r2
 800708c:	e7bc      	b.n	8007008 <_printf_i+0x14c>
 800708e:	682b      	ldr	r3, [r5, #0]
 8007090:	1d1a      	adds	r2, r3, #4
 8007092:	602a      	str	r2, [r5, #0]
 8007094:	681d      	ldr	r5, [r3, #0]
 8007096:	6862      	ldr	r2, [r4, #4]
 8007098:	2100      	movs	r1, #0
 800709a:	4628      	mov	r0, r5
 800709c:	f7f9 f8c0 	bl	8000220 <memchr>
 80070a0:	b108      	cbz	r0, 80070a6 <_printf_i+0x1ea>
 80070a2:	1b40      	subs	r0, r0, r5
 80070a4:	6060      	str	r0, [r4, #4]
 80070a6:	6863      	ldr	r3, [r4, #4]
 80070a8:	6123      	str	r3, [r4, #16]
 80070aa:	2300      	movs	r3, #0
 80070ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b0:	e7aa      	b.n	8007008 <_printf_i+0x14c>
 80070b2:	6923      	ldr	r3, [r4, #16]
 80070b4:	462a      	mov	r2, r5
 80070b6:	4649      	mov	r1, r9
 80070b8:	4640      	mov	r0, r8
 80070ba:	47d0      	blx	sl
 80070bc:	3001      	adds	r0, #1
 80070be:	d0ad      	beq.n	800701c <_printf_i+0x160>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	079b      	lsls	r3, r3, #30
 80070c4:	d413      	bmi.n	80070ee <_printf_i+0x232>
 80070c6:	68e0      	ldr	r0, [r4, #12]
 80070c8:	9b03      	ldr	r3, [sp, #12]
 80070ca:	4298      	cmp	r0, r3
 80070cc:	bfb8      	it	lt
 80070ce:	4618      	movlt	r0, r3
 80070d0:	e7a6      	b.n	8007020 <_printf_i+0x164>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4632      	mov	r2, r6
 80070d6:	4649      	mov	r1, r9
 80070d8:	4640      	mov	r0, r8
 80070da:	47d0      	blx	sl
 80070dc:	3001      	adds	r0, #1
 80070de:	d09d      	beq.n	800701c <_printf_i+0x160>
 80070e0:	3501      	adds	r5, #1
 80070e2:	68e3      	ldr	r3, [r4, #12]
 80070e4:	9903      	ldr	r1, [sp, #12]
 80070e6:	1a5b      	subs	r3, r3, r1
 80070e8:	42ab      	cmp	r3, r5
 80070ea:	dcf2      	bgt.n	80070d2 <_printf_i+0x216>
 80070ec:	e7eb      	b.n	80070c6 <_printf_i+0x20a>
 80070ee:	2500      	movs	r5, #0
 80070f0:	f104 0619 	add.w	r6, r4, #25
 80070f4:	e7f5      	b.n	80070e2 <_printf_i+0x226>
 80070f6:	bf00      	nop
 80070f8:	080074e0 	.word	0x080074e0
 80070fc:	080074f1 	.word	0x080074f1

08007100 <__swbuf_r>:
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	460e      	mov	r6, r1
 8007104:	4614      	mov	r4, r2
 8007106:	4605      	mov	r5, r0
 8007108:	b118      	cbz	r0, 8007112 <__swbuf_r+0x12>
 800710a:	6a03      	ldr	r3, [r0, #32]
 800710c:	b90b      	cbnz	r3, 8007112 <__swbuf_r+0x12>
 800710e:	f7ff fa0d 	bl	800652c <__sinit>
 8007112:	69a3      	ldr	r3, [r4, #24]
 8007114:	60a3      	str	r3, [r4, #8]
 8007116:	89a3      	ldrh	r3, [r4, #12]
 8007118:	071a      	lsls	r2, r3, #28
 800711a:	d525      	bpl.n	8007168 <__swbuf_r+0x68>
 800711c:	6923      	ldr	r3, [r4, #16]
 800711e:	b31b      	cbz	r3, 8007168 <__swbuf_r+0x68>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	6922      	ldr	r2, [r4, #16]
 8007124:	1a98      	subs	r0, r3, r2
 8007126:	6963      	ldr	r3, [r4, #20]
 8007128:	b2f6      	uxtb	r6, r6
 800712a:	4283      	cmp	r3, r0
 800712c:	4637      	mov	r7, r6
 800712e:	dc04      	bgt.n	800713a <__swbuf_r+0x3a>
 8007130:	4621      	mov	r1, r4
 8007132:	4628      	mov	r0, r5
 8007134:	f7ff fcc0 	bl	8006ab8 <_fflush_r>
 8007138:	b9e0      	cbnz	r0, 8007174 <__swbuf_r+0x74>
 800713a:	68a3      	ldr	r3, [r4, #8]
 800713c:	3b01      	subs	r3, #1
 800713e:	60a3      	str	r3, [r4, #8]
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	6022      	str	r2, [r4, #0]
 8007146:	701e      	strb	r6, [r3, #0]
 8007148:	6962      	ldr	r2, [r4, #20]
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	429a      	cmp	r2, r3
 800714e:	d004      	beq.n	800715a <__swbuf_r+0x5a>
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	07db      	lsls	r3, r3, #31
 8007154:	d506      	bpl.n	8007164 <__swbuf_r+0x64>
 8007156:	2e0a      	cmp	r6, #10
 8007158:	d104      	bne.n	8007164 <__swbuf_r+0x64>
 800715a:	4621      	mov	r1, r4
 800715c:	4628      	mov	r0, r5
 800715e:	f7ff fcab 	bl	8006ab8 <_fflush_r>
 8007162:	b938      	cbnz	r0, 8007174 <__swbuf_r+0x74>
 8007164:	4638      	mov	r0, r7
 8007166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007168:	4621      	mov	r1, r4
 800716a:	4628      	mov	r0, r5
 800716c:	f000 f806 	bl	800717c <__swsetup_r>
 8007170:	2800      	cmp	r0, #0
 8007172:	d0d5      	beq.n	8007120 <__swbuf_r+0x20>
 8007174:	f04f 37ff 	mov.w	r7, #4294967295
 8007178:	e7f4      	b.n	8007164 <__swbuf_r+0x64>
	...

0800717c <__swsetup_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4b2a      	ldr	r3, [pc, #168]	; (8007228 <__swsetup_r+0xac>)
 8007180:	4605      	mov	r5, r0
 8007182:	6818      	ldr	r0, [r3, #0]
 8007184:	460c      	mov	r4, r1
 8007186:	b118      	cbz	r0, 8007190 <__swsetup_r+0x14>
 8007188:	6a03      	ldr	r3, [r0, #32]
 800718a:	b90b      	cbnz	r3, 8007190 <__swsetup_r+0x14>
 800718c:	f7ff f9ce 	bl	800652c <__sinit>
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007196:	0718      	lsls	r0, r3, #28
 8007198:	d422      	bmi.n	80071e0 <__swsetup_r+0x64>
 800719a:	06d9      	lsls	r1, r3, #27
 800719c:	d407      	bmi.n	80071ae <__swsetup_r+0x32>
 800719e:	2309      	movs	r3, #9
 80071a0:	602b      	str	r3, [r5, #0]
 80071a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071a6:	81a3      	strh	r3, [r4, #12]
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ac:	e034      	b.n	8007218 <__swsetup_r+0x9c>
 80071ae:	0758      	lsls	r0, r3, #29
 80071b0:	d512      	bpl.n	80071d8 <__swsetup_r+0x5c>
 80071b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071b4:	b141      	cbz	r1, 80071c8 <__swsetup_r+0x4c>
 80071b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071ba:	4299      	cmp	r1, r3
 80071bc:	d002      	beq.n	80071c4 <__swsetup_r+0x48>
 80071be:	4628      	mov	r0, r5
 80071c0:	f7ff faf4 	bl	80067ac <_free_r>
 80071c4:	2300      	movs	r3, #0
 80071c6:	6363      	str	r3, [r4, #52]	; 0x34
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071ce:	81a3      	strh	r3, [r4, #12]
 80071d0:	2300      	movs	r3, #0
 80071d2:	6063      	str	r3, [r4, #4]
 80071d4:	6923      	ldr	r3, [r4, #16]
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	f043 0308 	orr.w	r3, r3, #8
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	6923      	ldr	r3, [r4, #16]
 80071e2:	b94b      	cbnz	r3, 80071f8 <__swsetup_r+0x7c>
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ee:	d003      	beq.n	80071f8 <__swsetup_r+0x7c>
 80071f0:	4621      	mov	r1, r4
 80071f2:	4628      	mov	r0, r5
 80071f4:	f000 f884 	bl	8007300 <__smakebuf_r>
 80071f8:	89a0      	ldrh	r0, [r4, #12]
 80071fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071fe:	f010 0301 	ands.w	r3, r0, #1
 8007202:	d00a      	beq.n	800721a <__swsetup_r+0x9e>
 8007204:	2300      	movs	r3, #0
 8007206:	60a3      	str	r3, [r4, #8]
 8007208:	6963      	ldr	r3, [r4, #20]
 800720a:	425b      	negs	r3, r3
 800720c:	61a3      	str	r3, [r4, #24]
 800720e:	6923      	ldr	r3, [r4, #16]
 8007210:	b943      	cbnz	r3, 8007224 <__swsetup_r+0xa8>
 8007212:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007216:	d1c4      	bne.n	80071a2 <__swsetup_r+0x26>
 8007218:	bd38      	pop	{r3, r4, r5, pc}
 800721a:	0781      	lsls	r1, r0, #30
 800721c:	bf58      	it	pl
 800721e:	6963      	ldrpl	r3, [r4, #20]
 8007220:	60a3      	str	r3, [r4, #8]
 8007222:	e7f4      	b.n	800720e <__swsetup_r+0x92>
 8007224:	2000      	movs	r0, #0
 8007226:	e7f7      	b.n	8007218 <__swsetup_r+0x9c>
 8007228:	20000068 	.word	0x20000068

0800722c <_raise_r>:
 800722c:	291f      	cmp	r1, #31
 800722e:	b538      	push	{r3, r4, r5, lr}
 8007230:	4604      	mov	r4, r0
 8007232:	460d      	mov	r5, r1
 8007234:	d904      	bls.n	8007240 <_raise_r+0x14>
 8007236:	2316      	movs	r3, #22
 8007238:	6003      	str	r3, [r0, #0]
 800723a:	f04f 30ff 	mov.w	r0, #4294967295
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007242:	b112      	cbz	r2, 800724a <_raise_r+0x1e>
 8007244:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007248:	b94b      	cbnz	r3, 800725e <_raise_r+0x32>
 800724a:	4620      	mov	r0, r4
 800724c:	f000 f830 	bl	80072b0 <_getpid_r>
 8007250:	462a      	mov	r2, r5
 8007252:	4601      	mov	r1, r0
 8007254:	4620      	mov	r0, r4
 8007256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800725a:	f000 b817 	b.w	800728c <_kill_r>
 800725e:	2b01      	cmp	r3, #1
 8007260:	d00a      	beq.n	8007278 <_raise_r+0x4c>
 8007262:	1c59      	adds	r1, r3, #1
 8007264:	d103      	bne.n	800726e <_raise_r+0x42>
 8007266:	2316      	movs	r3, #22
 8007268:	6003      	str	r3, [r0, #0]
 800726a:	2001      	movs	r0, #1
 800726c:	e7e7      	b.n	800723e <_raise_r+0x12>
 800726e:	2400      	movs	r4, #0
 8007270:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007274:	4628      	mov	r0, r5
 8007276:	4798      	blx	r3
 8007278:	2000      	movs	r0, #0
 800727a:	e7e0      	b.n	800723e <_raise_r+0x12>

0800727c <raise>:
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <raise+0xc>)
 800727e:	4601      	mov	r1, r0
 8007280:	6818      	ldr	r0, [r3, #0]
 8007282:	f7ff bfd3 	b.w	800722c <_raise_r>
 8007286:	bf00      	nop
 8007288:	20000068 	.word	0x20000068

0800728c <_kill_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d07      	ldr	r5, [pc, #28]	; (80072ac <_kill_r+0x20>)
 8007290:	2300      	movs	r3, #0
 8007292:	4604      	mov	r4, r0
 8007294:	4608      	mov	r0, r1
 8007296:	4611      	mov	r1, r2
 8007298:	602b      	str	r3, [r5, #0]
 800729a:	f7f9 ffb7 	bl	800120c <_kill>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	d102      	bne.n	80072a8 <_kill_r+0x1c>
 80072a2:	682b      	ldr	r3, [r5, #0]
 80072a4:	b103      	cbz	r3, 80072a8 <_kill_r+0x1c>
 80072a6:	6023      	str	r3, [r4, #0]
 80072a8:	bd38      	pop	{r3, r4, r5, pc}
 80072aa:	bf00      	nop
 80072ac:	20000424 	.word	0x20000424

080072b0 <_getpid_r>:
 80072b0:	f7f9 bfa4 	b.w	80011fc <_getpid>

080072b4 <__swhatbuf_r>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	460c      	mov	r4, r1
 80072b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072bc:	2900      	cmp	r1, #0
 80072be:	b096      	sub	sp, #88	; 0x58
 80072c0:	4615      	mov	r5, r2
 80072c2:	461e      	mov	r6, r3
 80072c4:	da0d      	bge.n	80072e2 <__swhatbuf_r+0x2e>
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80072cc:	f04f 0100 	mov.w	r1, #0
 80072d0:	bf0c      	ite	eq
 80072d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80072d6:	2340      	movne	r3, #64	; 0x40
 80072d8:	2000      	movs	r0, #0
 80072da:	6031      	str	r1, [r6, #0]
 80072dc:	602b      	str	r3, [r5, #0]
 80072de:	b016      	add	sp, #88	; 0x58
 80072e0:	bd70      	pop	{r4, r5, r6, pc}
 80072e2:	466a      	mov	r2, sp
 80072e4:	f000 f848 	bl	8007378 <_fstat_r>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	dbec      	blt.n	80072c6 <__swhatbuf_r+0x12>
 80072ec:	9901      	ldr	r1, [sp, #4]
 80072ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80072f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80072f6:	4259      	negs	r1, r3
 80072f8:	4159      	adcs	r1, r3
 80072fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072fe:	e7eb      	b.n	80072d8 <__swhatbuf_r+0x24>

08007300 <__smakebuf_r>:
 8007300:	898b      	ldrh	r3, [r1, #12]
 8007302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007304:	079d      	lsls	r5, r3, #30
 8007306:	4606      	mov	r6, r0
 8007308:	460c      	mov	r4, r1
 800730a:	d507      	bpl.n	800731c <__smakebuf_r+0x1c>
 800730c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	6123      	str	r3, [r4, #16]
 8007314:	2301      	movs	r3, #1
 8007316:	6163      	str	r3, [r4, #20]
 8007318:	b002      	add	sp, #8
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	ab01      	add	r3, sp, #4
 800731e:	466a      	mov	r2, sp
 8007320:	f7ff ffc8 	bl	80072b4 <__swhatbuf_r>
 8007324:	9900      	ldr	r1, [sp, #0]
 8007326:	4605      	mov	r5, r0
 8007328:	4630      	mov	r0, r6
 800732a:	f7ff fab3 	bl	8006894 <_malloc_r>
 800732e:	b948      	cbnz	r0, 8007344 <__smakebuf_r+0x44>
 8007330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007334:	059a      	lsls	r2, r3, #22
 8007336:	d4ef      	bmi.n	8007318 <__smakebuf_r+0x18>
 8007338:	f023 0303 	bic.w	r3, r3, #3
 800733c:	f043 0302 	orr.w	r3, r3, #2
 8007340:	81a3      	strh	r3, [r4, #12]
 8007342:	e7e3      	b.n	800730c <__smakebuf_r+0xc>
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	6020      	str	r0, [r4, #0]
 8007348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734c:	81a3      	strh	r3, [r4, #12]
 800734e:	9b00      	ldr	r3, [sp, #0]
 8007350:	6163      	str	r3, [r4, #20]
 8007352:	9b01      	ldr	r3, [sp, #4]
 8007354:	6120      	str	r0, [r4, #16]
 8007356:	b15b      	cbz	r3, 8007370 <__smakebuf_r+0x70>
 8007358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800735c:	4630      	mov	r0, r6
 800735e:	f000 f81d 	bl	800739c <_isatty_r>
 8007362:	b128      	cbz	r0, 8007370 <__smakebuf_r+0x70>
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	f023 0303 	bic.w	r3, r3, #3
 800736a:	f043 0301 	orr.w	r3, r3, #1
 800736e:	81a3      	strh	r3, [r4, #12]
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	431d      	orrs	r5, r3
 8007374:	81a5      	strh	r5, [r4, #12]
 8007376:	e7cf      	b.n	8007318 <__smakebuf_r+0x18>

08007378 <_fstat_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4d07      	ldr	r5, [pc, #28]	; (8007398 <_fstat_r+0x20>)
 800737c:	2300      	movs	r3, #0
 800737e:	4604      	mov	r4, r0
 8007380:	4608      	mov	r0, r1
 8007382:	4611      	mov	r1, r2
 8007384:	602b      	str	r3, [r5, #0]
 8007386:	f7f9 ffa0 	bl	80012ca <_fstat>
 800738a:	1c43      	adds	r3, r0, #1
 800738c:	d102      	bne.n	8007394 <_fstat_r+0x1c>
 800738e:	682b      	ldr	r3, [r5, #0]
 8007390:	b103      	cbz	r3, 8007394 <_fstat_r+0x1c>
 8007392:	6023      	str	r3, [r4, #0]
 8007394:	bd38      	pop	{r3, r4, r5, pc}
 8007396:	bf00      	nop
 8007398:	20000424 	.word	0x20000424

0800739c <_isatty_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4d06      	ldr	r5, [pc, #24]	; (80073b8 <_isatty_r+0x1c>)
 80073a0:	2300      	movs	r3, #0
 80073a2:	4604      	mov	r4, r0
 80073a4:	4608      	mov	r0, r1
 80073a6:	602b      	str	r3, [r5, #0]
 80073a8:	f7f9 ff9f 	bl	80012ea <_isatty>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d102      	bne.n	80073b6 <_isatty_r+0x1a>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	b103      	cbz	r3, 80073b6 <_isatty_r+0x1a>
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	20000424 	.word	0x20000424

080073bc <_gettimeofday>:
 80073bc:	4b02      	ldr	r3, [pc, #8]	; (80073c8 <_gettimeofday+0xc>)
 80073be:	2258      	movs	r2, #88	; 0x58
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295
 80073c6:	4770      	bx	lr
 80073c8:	20000424 	.word	0x20000424

080073cc <_init>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr

080073d8 <_fini>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr
