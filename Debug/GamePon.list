
GamePon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071fc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080073dc  080073dc  000173dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074fc  080074fc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007504  08007504  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800750c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000006c  08007578  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08007578  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132a8  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002807  00000000  00000000  00033387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00035b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c82  00000000  00000000  00036ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b70  00000000  00000000  0003782a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147a6  00000000  00000000  0005e39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f06f2  00000000  00000000  00072b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c24  00000000  00000000  00163234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00167e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080073c4 	.word	0x080073c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080073c4 	.word	0x080073c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 ff7b 	bl	80014ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f826 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f96a 	bl	80008a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005cc:	f000 f936 	bl	800083c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d0:	f000 f8ac 	bl	800072c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80005d4:	f000 f86a 	bl	80006ac <MX_I2C1_Init>
  MX_SPI3_Init();
 80005d8:	f000 f8f2 	bl	80007c0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  SPITxRx_Setup();
 80005dc:	f000 fa30 	bl	8000a40 <SPITxRx_Setup>
  Round =1;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <main+0x50>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  EEPROMReadExample(eepromDataReadBack, 4);
 80005e6:	2104      	movs	r1, #4
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <main+0x54>)
 80005ea:	f000 fa0d 	bl	8000a08 <EEPROMReadExample>
	  HAL_Delay(100);
 80005ee:	2064      	movs	r0, #100	; 0x64
 80005f0:	f000 ffd4 	bl	800159c <HAL_Delay>
	  EEPROMWriteExample();
 80005f4:	f000 f9e4 	bl	80009c0 <EEPROMWriteExample>

	  SPITxRx_readIO();
 80005f8:	f000 fa38 	bl	8000a6c <SPITxRx_readIO>

	  Switch();
 80005fc:	f000 fa88 	bl	8000b10 <Switch>
	  StateGame();
 8000600:	f000 fba4 	bl	8000d4c <StateGame>
	  LED();
 8000604:	f000 fc12 	bl	8000e2c <LED>
  {
 8000608:	e7ed      	b.n	80005e6 <main+0x2a>
 800060a:	bf00      	nop
 800060c:	200002ec 	.word	0x200002ec
 8000610:	20000298 	.word	0x20000298

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2238      	movs	r2, #56	; 0x38
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f006 f82b 	bl	800667e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000636:	2000      	movs	r0, #0
 8000638:	f003 fb18 	bl	8003c6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2340      	movs	r3, #64	; 0x40
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000652:	2304      	movs	r3, #4
 8000654:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000656:	2355      	movs	r3, #85	; 0x55
 8000658:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fbb2 	bl	8003dd4 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000676:	f000 fc0b 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2303      	movs	r3, #3
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2104      	movs	r1, #4
 8000692:	4618      	mov	r0, r3
 8000694:	f003 feb0 	bl	80043f8 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800069e:	f000 fbf7 	bl	8000e90 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_I2C1_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <MX_I2C1_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_I2C1_Init+0x74>)
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <MX_I2C1_Init+0x7c>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_I2C1_Init+0x74>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_I2C1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <MX_I2C1_Init+0x74>)
 80006e8:	f001 fc8d 	bl	8002006 <HAL_I2C_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006f2:	f000 fbcd 	bl	8000e90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <MX_I2C1_Init+0x74>)
 80006fa:	f003 fa1f 	bl	8003b3c <HAL_I2CEx_ConfigAnalogFilter>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000704:	f000 fbc4 	bl	8000e90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_I2C1_Init+0x74>)
 800070c:	f003 fa61 	bl	8003bd2 <HAL_I2CEx_ConfigDigitalFilter>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000716:	f000 fbbb 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000088 	.word	0x20000088
 8000724:	40005400 	.word	0x40005400
 8000728:	30a0a7fb 	.word	0x30a0a7fb

0800072c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000732:	4a22      	ldr	r2, [pc, #136]	; (80007bc <MX_LPUART1_UART_Init+0x90>)
 8000734:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800076e:	4812      	ldr	r0, [pc, #72]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	f004 ffd4 	bl	800571c <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 fb89 	bl	8000e90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000782:	f005 fd6f 	bl	8006264 <HAL_UARTEx_SetTxFifoThreshold>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800078c:	f000 fb80 	bl	8000e90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000790:	2100      	movs	r1, #0
 8000792:	4809      	ldr	r0, [pc, #36]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	f005 fda4 	bl	80062e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800079e:	f000 fb77 	bl	8000e90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 80007a4:	f005 fd25 	bl	80061f2 <HAL_UARTEx_DisableFifoMode>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007ae:	f000 fb6f 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000019c 	.word	0x2000019c
 80007bc:	40008000 	.word	0x40008000

080007c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <MX_SPI3_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_SPI3_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_SPI3_Init+0x74>)
 80007cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_SPI3_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_SPI3_Init+0x74>)
 80007da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_SPI3_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_SPI3_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_SPI3_Init+0x74>)
 80007ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_SPI3_Init+0x74>)
 80007f6:	2238      	movs	r2, #56	; 0x38
 80007f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_SPI3_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_SPI3_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_SPI3_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_SPI3_Init+0x74>)
 800080e:	2207      	movs	r2, #7
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_SPI3_Init+0x74>)
 800081a:	2208      	movs	r2, #8
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_SPI3_Init+0x74>)
 8000820:	f004 fa54 	bl	8004ccc <HAL_SPI_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 fb31 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000230 	.word	0x20000230
 8000838:	40003c00 	.word	0x40003c00

0800083c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_DMA_Init+0x60>)
 8000844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <MX_DMA_Init+0x60>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6493      	str	r3, [r2, #72]	; 0x48
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_DMA_Init+0x60>)
 8000850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_DMA_Init+0x60>)
 800085c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <MX_DMA_Init+0x60>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6493      	str	r3, [r2, #72]	; 0x48
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_DMA_Init+0x60>)
 8000868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	200b      	movs	r0, #11
 8000878:	f000 ff8d 	bl	8001796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800087c:	200b      	movs	r0, #11
 800087e:	f000 ffa4 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	200c      	movs	r0, #12
 8000888:	f000 ff85 	bl	8001796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800088c:	200c      	movs	r0, #12
 800088e:	f000 ff9c 	bl	80017ca <HAL_NVIC_EnableIRQ>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b3f      	ldr	r3, [pc, #252]	; (80009b4 <MX_GPIO_Init+0x114>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a3e      	ldr	r2, [pc, #248]	; (80009b4 <MX_GPIO_Init+0x114>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b3c      	ldr	r3, [pc, #240]	; (80009b4 <MX_GPIO_Init+0x114>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <MX_GPIO_Init+0x114>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a38      	ldr	r2, [pc, #224]	; (80009b4 <MX_GPIO_Init+0x114>)
 80008d4:	f043 0320 	orr.w	r3, r3, #32
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b36      	ldr	r3, [pc, #216]	; (80009b4 <MX_GPIO_Init+0x114>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0320 	and.w	r3, r3, #32
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <MX_GPIO_Init+0x114>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a32      	ldr	r2, [pc, #200]	; (80009b4 <MX_GPIO_Init+0x114>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <MX_GPIO_Init+0x114>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fe:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_GPIO_Init+0x114>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a2c      	ldr	r2, [pc, #176]	; (80009b4 <MX_GPIO_Init+0x114>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <MX_GPIO_Init+0x114>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <MX_GPIO_Init+0x114>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <MX_GPIO_Init+0x114>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <MX_GPIO_Init+0x114>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f001 fb2b 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2104      	movs	r1, #4
 800093e:	481e      	ldr	r0, [pc, #120]	; (80009b8 <MX_GPIO_Init+0x118>)
 8000940:	f001 fb26 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4818      	ldr	r0, [pc, #96]	; (80009bc <MX_GPIO_Init+0x11c>)
 800095c:	f001 f97e 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000960:	2320      	movs	r3, #32
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f001 f96f 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097e:	2304      	movs	r3, #4
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <MX_GPIO_Init+0x118>)
 8000996:	f001 f961 	bl	8001c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2028      	movs	r0, #40	; 0x28
 80009a0:	f000 fef9 	bl	8001796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009a4:	2028      	movs	r0, #40	; 0x28
 80009a6:	f000 ff10 	bl	80017ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000c00 	.word	0x48000c00
 80009bc:	48000800 	.word	0x48000800

080009c0 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */
void EEPROMWriteExample() {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <EEPROMWriteExample+0x3c>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d012      	beq.n	80009f4 <EEPROMWriteExample+0x34>
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <EEPROMWriteExample+0x40>)
 80009d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b20      	cmp	r3, #32
 80009d8:	d10c      	bne.n	80009f4 <EEPROMWriteExample+0x34>
		static uint8_t data[4] = { 0x50, 0x4F, 0x4E, 0x31 };
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 4);
 80009da:	2304      	movs	r3, #4
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <EEPROMWriteExample+0x44>)
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2302      	movs	r3, #2
 80009e4:	222c      	movs	r2, #44	; 0x2c
 80009e6:	21a0      	movs	r1, #160	; 0xa0
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <EEPROMWriteExample+0x40>)
 80009ea:	f001 fba7 	bl	800213c <HAL_I2C_Mem_Write_IT>
		eepromExampleWriteFlag = 0;
 80009ee:	4b03      	ldr	r3, [pc, #12]	; (80009fc <EEPROMWriteExample+0x3c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
	}
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000294 	.word	0x20000294
 8000a00:	20000088 	.word	0x20000088
 8000a04:	20000000 	.word	0x20000000

08000a08 <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	807b      	strh	r3, [r7, #2]
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000a14:	887b      	ldrh	r3, [r7, #2]
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	222c      	movs	r2, #44	; 0x2c
 8000a20:	21a0      	movs	r1, #160	; 0xa0
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <EEPROMReadExample+0x30>)
 8000a24:	f001 fc14 	bl	8002250 <HAL_I2C_Mem_Read_IT>
		eepromExampleReadFlag = 0;
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <EEPROMReadExample+0x34>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
	}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000088 	.word	0x20000088
 8000a3c:	20000295 	.word	0x20000295

08000a40 <SPITxRx_Setup>:


void SPITxRx_Setup() {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
//CS pulse
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a44:	2200      	movs	r2, #0
 8000a46:	2104      	movs	r1, #4
 8000a48:	4807      	ldr	r0, [pc, #28]	; (8000a68 <SPITxRx_Setup+0x28>)
 8000a4a:	f001 faa1 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f000 fda4 	bl	800159c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000a54:	2201      	movs	r2, #1
 8000a56:	2104      	movs	r1, #4
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <SPITxRx_Setup+0x28>)
 8000a5a:	f001 fa99 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f000 fd9c 	bl	800159c <HAL_Delay>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	48000c00 	.word	0x48000c00

08000a6c <SPITxRx_readIO>:
void SPITxRx_readIO() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) {
 8000a70:	2104      	movs	r1, #4
 8000a72:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <SPITxRx_readIO+0x54>)
 8000a74:	f001 fa74 	bl	8001f60 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d01e      	beq.n	8000abc <SPITxRx_readIO+0x50>
		if (StateRT == 0){
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <SPITxRx_readIO+0x58>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10e      	bne.n	8000aa4 <SPITxRx_readIO+0x38>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a86:	2200      	movs	r2, #0
 8000a88:	2104      	movs	r1, #4
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <SPITxRx_readIO+0x54>)
 8000a8c:	f001 fa80 	bl	8001f90 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001; //what to do receive or transmit (1 == receive)
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <SPITxRx_readIO+0x5c>)
 8000a92:	2241      	movs	r2, #65	; 0x41
 8000a94:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12; //address
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <SPITxRx_readIO+0x5c>)
 8000a98:	2212      	movs	r2, #18
 8000a9a:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <SPITxRx_readIO+0x5c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	709a      	strb	r2, [r3, #2]
 8000aa2:	e005      	b.n	8000ab0 <SPITxRx_readIO+0x44>
		}
		else if (StateRT == 1){
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <SPITxRx_readIO+0x58>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d101      	bne.n	8000ab0 <SPITxRx_readIO+0x44>
			LED();
 8000aac:	f000 f9be 	bl	8000e2c <LED>
		}
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	4a06      	ldr	r2, [pc, #24]	; (8000acc <SPITxRx_readIO+0x60>)
 8000ab4:	4904      	ldr	r1, [pc, #16]	; (8000ac8 <SPITxRx_readIO+0x5c>)
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <SPITxRx_readIO+0x64>)
 8000ab8:	f004 f9b4 	bl	8004e24 <HAL_SPI_TransmitReceive_IT>
	}
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	48000c00 	.word	0x48000c00
 8000ac4:	200002f0 	.word	0x200002f0
 8000ac8:	200002a8 	.word	0x200002a8
 8000acc:	2000029c 	.word	0x2000029c
 8000ad0:	20000230 	.word	0x20000230

08000ad4 <HAL_SPI_TxRxCpltCallback>:
	SPITx[1] = 0x01;//IODIRB
	SPITx[2] = 0b00000000;
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	StateRT+=1;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000ae4:	6013      	str	r3, [r2, #0]
		if (StateRT>1)
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	dd02      	ble.n	8000af4 <HAL_SPI_TxRxCpltCallback+0x20>
		{
			StateRT = 0;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
		}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000af4:	2201      	movs	r2, #1
 8000af6:	2104      	movs	r1, #4
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <HAL_SPI_TxRxCpltCallback+0x38>)
 8000afa:	f001 fa49 	bl	8001f90 <HAL_GPIO_WritePin>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200002f0 	.word	0x200002f0
 8000b0c:	48000c00 	.word	0x48000c00

08000b10 <Switch>:


void Switch()
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	//Random Number
	RandomNum1_1 = rand() % 10;
 8000b14:	f005 fc70 	bl	80063f8 <rand>
 8000b18:	4601      	mov	r1, r0
 8000b1a:	4b7e      	ldr	r3, [pc, #504]	; (8000d14 <Switch+0x204>)
 8000b1c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b20:	109a      	asrs	r2, r3, #2
 8000b22:	17cb      	asrs	r3, r1, #31
 8000b24:	1ad2      	subs	r2, r2, r3
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	1aca      	subs	r2, r1, r3
 8000b30:	4b79      	ldr	r3, [pc, #484]	; (8000d18 <Switch+0x208>)
 8000b32:	601a      	str	r2, [r3, #0]
	RandomNum2_1 = rand() % 10;
 8000b34:	f005 fc60 	bl	80063f8 <rand>
 8000b38:	4601      	mov	r1, r0
 8000b3a:	4b76      	ldr	r3, [pc, #472]	; (8000d14 <Switch+0x204>)
 8000b3c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b40:	109a      	asrs	r2, r3, #2
 8000b42:	17cb      	asrs	r3, r1, #31
 8000b44:	1ad2      	subs	r2, r2, r3
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	1aca      	subs	r2, r1, r3
 8000b50:	4b72      	ldr	r3, [pc, #456]	; (8000d1c <Switch+0x20c>)
 8000b52:	601a      	str	r2, [r3, #0]
	RandomNum1_2 = rand() % 10;
 8000b54:	f005 fc50 	bl	80063f8 <rand>
 8000b58:	4601      	mov	r1, r0
 8000b5a:	4b6e      	ldr	r3, [pc, #440]	; (8000d14 <Switch+0x204>)
 8000b5c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b60:	109a      	asrs	r2, r3, #2
 8000b62:	17cb      	asrs	r3, r1, #31
 8000b64:	1ad2      	subs	r2, r2, r3
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	1aca      	subs	r2, r1, r3
 8000b70:	4b6b      	ldr	r3, [pc, #428]	; (8000d20 <Switch+0x210>)
 8000b72:	601a      	str	r2, [r3, #0]
	RandomNum2_2 = rand() % 10;
 8000b74:	f005 fc40 	bl	80063f8 <rand>
 8000b78:	4601      	mov	r1, r0
 8000b7a:	4b66      	ldr	r3, [pc, #408]	; (8000d14 <Switch+0x204>)
 8000b7c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b80:	109a      	asrs	r2, r3, #2
 8000b82:	17cb      	asrs	r3, r1, #31
 8000b84:	1ad2      	subs	r2, r2, r3
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	1aca      	subs	r2, r1, r3
 8000b90:	4b64      	ldr	r3, [pc, #400]	; (8000d24 <Switch+0x214>)
 8000b92:	601a      	str	r2, [r3, #0]
	RandomNum1_3 = rand() % 10;
 8000b94:	f005 fc30 	bl	80063f8 <rand>
 8000b98:	4601      	mov	r1, r0
 8000b9a:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <Switch+0x204>)
 8000b9c:	fb83 2301 	smull	r2, r3, r3, r1
 8000ba0:	109a      	asrs	r2, r3, #2
 8000ba2:	17cb      	asrs	r3, r1, #31
 8000ba4:	1ad2      	subs	r2, r2, r3
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	1aca      	subs	r2, r1, r3
 8000bb0:	4b5d      	ldr	r3, [pc, #372]	; (8000d28 <Switch+0x218>)
 8000bb2:	601a      	str	r2, [r3, #0]
	RandomNum2_3 = rand() % 10;
 8000bb4:	f005 fc20 	bl	80063f8 <rand>
 8000bb8:	4601      	mov	r1, r0
 8000bba:	4b56      	ldr	r3, [pc, #344]	; (8000d14 <Switch+0x204>)
 8000bbc:	fb83 2301 	smull	r2, r3, r3, r1
 8000bc0:	109a      	asrs	r2, r3, #2
 8000bc2:	17cb      	asrs	r3, r1, #31
 8000bc4:	1ad2      	subs	r2, r2, r3
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	1aca      	subs	r2, r1, r3
 8000bd0:	4b56      	ldr	r3, [pc, #344]	; (8000d2c <Switch+0x21c>)
 8000bd2:	601a      	str	r2, [r3, #0]

	if (SPIRx[2] == 15){
 8000bd4:	4b56      	ldr	r3, [pc, #344]	; (8000d30 <Switch+0x220>)
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	d102      	bne.n	8000be2 <Switch+0xd2>
		click = 0;
 8000bdc:	4b55      	ldr	r3, [pc, #340]	; (8000d34 <Switch+0x224>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
	}
    if (click == 0)
 8000be2:	4b54      	ldr	r3, [pc, #336]	; (8000d34 <Switch+0x224>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8091 	bne.w	8000d0e <Switch+0x1fe>
    {
        if (SPIRx[2] == 7) // Button 1 pressed (0000 0001) P1 hit
 8000bec:	4b50      	ldr	r3, [pc, #320]	; (8000d30 <Switch+0x220>)
 8000bee:	789b      	ldrb	r3, [r3, #2]
 8000bf0:	2b07      	cmp	r3, #7
 8000bf2:	d139      	bne.n	8000c68 <Switch+0x158>
        {
        	if (Round == 1){
 8000bf4:	4b50      	ldr	r3, [pc, #320]	; (8000d38 <Switch+0x228>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d10f      	bne.n	8000c1c <Switch+0x10c>
        		click = 1;
 8000bfc:	4b4d      	ldr	r3, [pc, #308]	; (8000d34 <Switch+0x224>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
        		ScorePlayer1 += RandomNum1_1; // Random the number
 8000c02:	4b4e      	ldr	r3, [pc, #312]	; (8000d3c <Switch+0x22c>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <Switch+0x208>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a4b      	ldr	r2, [pc, #300]	; (8000d3c <Switch+0x22c>)
 8000c0e:	6013      	str	r3, [r2, #0]
        		Round += 1;
 8000c10:	4b49      	ldr	r3, [pc, #292]	; (8000d38 <Switch+0x228>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3301      	adds	r3, #1
 8000c16:	4a48      	ldr	r2, [pc, #288]	; (8000d38 <Switch+0x228>)
 8000c18:	6013      	str	r3, [r2, #0]
        {
            click = 1;
            P2Finish = 1;
        }
    }
}
 8000c1a:	e078      	b.n	8000d0e <Switch+0x1fe>
        	else if (Round == 2){
 8000c1c:	4b46      	ldr	r3, [pc, #280]	; (8000d38 <Switch+0x228>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d10f      	bne.n	8000c44 <Switch+0x134>
				click = 1;
 8000c24:	4b43      	ldr	r3, [pc, #268]	; (8000d34 <Switch+0x224>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
				ScorePlayer1 += RandomNum1_2; // Random the number
 8000c2a:	4b44      	ldr	r3, [pc, #272]	; (8000d3c <Switch+0x22c>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <Switch+0x210>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a41      	ldr	r2, [pc, #260]	; (8000d3c <Switch+0x22c>)
 8000c36:	6013      	str	r3, [r2, #0]
				Round += 1;
 8000c38:	4b3f      	ldr	r3, [pc, #252]	; (8000d38 <Switch+0x228>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a3e      	ldr	r2, [pc, #248]	; (8000d38 <Switch+0x228>)
 8000c40:	6013      	str	r3, [r2, #0]
}
 8000c42:	e064      	b.n	8000d0e <Switch+0x1fe>
        	else if (Round == 3){
 8000c44:	4b3c      	ldr	r3, [pc, #240]	; (8000d38 <Switch+0x228>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d160      	bne.n	8000d0e <Switch+0x1fe>
				click = 1;
 8000c4c:	4b39      	ldr	r3, [pc, #228]	; (8000d34 <Switch+0x224>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
				ScorePlayer1 += RandomNum1_3; // Random the number
 8000c52:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <Switch+0x22c>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <Switch+0x218>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a37      	ldr	r2, [pc, #220]	; (8000d3c <Switch+0x22c>)
 8000c5e:	6013      	str	r3, [r2, #0]
				Round = 1;
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <Switch+0x228>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	601a      	str	r2, [r3, #0]
}
 8000c66:	e052      	b.n	8000d0e <Switch+0x1fe>
        else if (SPIRx[2] == 11) // Button 2 pressed (0000 0010) P1 stand
 8000c68:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <Switch+0x220>)
 8000c6a:	789b      	ldrb	r3, [r3, #2]
 8000c6c:	2b0b      	cmp	r3, #11
 8000c6e:	d106      	bne.n	8000c7e <Switch+0x16e>
            click = 1;
 8000c70:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <Switch+0x224>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
            P1Finish = 1;
 8000c76:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <Switch+0x230>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
}
 8000c7c:	e047      	b.n	8000d0e <Switch+0x1fe>
        else if (SPIRx[2] == 13) // Button 3 pressed (0000 0100) P2 hit
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <Switch+0x220>)
 8000c80:	789b      	ldrb	r3, [r3, #2]
 8000c82:	2b0d      	cmp	r3, #13
 8000c84:	d139      	bne.n	8000cfa <Switch+0x1ea>
			if (Round == 1) {
 8000c86:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <Switch+0x228>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d10f      	bne.n	8000cae <Switch+0x19e>
				click = 1;
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <Switch+0x224>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
				ScorePlayer2 += RandomNum2_1; // Random the number
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <Switch+0x234>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <Switch+0x20c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a29      	ldr	r2, [pc, #164]	; (8000d44 <Switch+0x234>)
 8000ca0:	6013      	str	r3, [r2, #0]
				Round += 1;
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <Switch+0x228>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a23      	ldr	r2, [pc, #140]	; (8000d38 <Switch+0x228>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	e02f      	b.n	8000d0e <Switch+0x1fe>
			} else if (Round == 2) {
 8000cae:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <Switch+0x228>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d10f      	bne.n	8000cd6 <Switch+0x1c6>
				click = 1;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <Switch+0x224>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]
				ScorePlayer2 += RandomNum2_2; // Random the number
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <Switch+0x234>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <Switch+0x214>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a1f      	ldr	r2, [pc, #124]	; (8000d44 <Switch+0x234>)
 8000cc8:	6013      	str	r3, [r2, #0]
				Round += 1;
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <Switch+0x228>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <Switch+0x228>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	e01b      	b.n	8000d0e <Switch+0x1fe>
			} else if (Round == 3) {
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <Switch+0x228>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d117      	bne.n	8000d0e <Switch+0x1fe>
				click = 1;
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <Switch+0x224>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]
				ScorePlayer2 += RandomNum2_3; // Random the number
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <Switch+0x234>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <Switch+0x21c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <Switch+0x234>)
 8000cf0:	6013      	str	r3, [r2, #0]
				Round = 1;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <Switch+0x228>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
}
 8000cf8:	e009      	b.n	8000d0e <Switch+0x1fe>
        else if (SPIRx[2] == 14) // Button 4 pressed (0000 1000) P2 stand
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <Switch+0x220>)
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	2b0e      	cmp	r3, #14
 8000d00:	d105      	bne.n	8000d0e <Switch+0x1fe>
            click = 1;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <Switch+0x224>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
            P2Finish = 1;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <Switch+0x238>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	66666667 	.word	0x66666667
 8000d18:	200002d4 	.word	0x200002d4
 8000d1c:	200002d8 	.word	0x200002d8
 8000d20:	200002dc 	.word	0x200002dc
 8000d24:	200002e0 	.word	0x200002e0
 8000d28:	200002e4 	.word	0x200002e4
 8000d2c:	200002e8 	.word	0x200002e8
 8000d30:	2000029c 	.word	0x2000029c
 8000d34:	200002d0 	.word	0x200002d0
 8000d38:	200002ec 	.word	0x200002ec
 8000d3c:	200002c0 	.word	0x200002c0
 8000d40:	200002c8 	.word	0x200002c8
 8000d44:	200002c4 	.word	0x200002c4
 8000d48:	200002cc 	.word	0x200002cc

08000d4c <StateGame>:


void StateGame(){
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
	if (P1Finish == 1 && P2Finish == 1){
 8000d50:	4b2f      	ldr	r3, [pc, #188]	; (8000e10 <StateGame+0xc4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d155      	bne.n	8000e04 <StateGame+0xb8>
 8000d58:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <StateGame+0xc8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d151      	bne.n	8000e04 <StateGame+0xb8>
		TotalScorePlayer1 = ScorePlayer1 ;
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <StateGame+0xcc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a2d      	ldr	r2, [pc, #180]	; (8000e1c <StateGame+0xd0>)
 8000d66:	6013      	str	r3, [r2, #0]
		TotalScorePlayer2 = ScorePlayer2 ;
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <StateGame+0xd4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a2d      	ldr	r2, [pc, #180]	; (8000e24 <StateGame+0xd8>)
 8000d6e:	6013      	str	r3, [r2, #0]
		if (TotalScorePlayer1 == TotalScorePlayer2) {
 8000d70:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <StateGame+0xd0>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <StateGame+0xd8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d103      	bne.n	8000d84 <StateGame+0x38>
	       State = 3; //Tie
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <StateGame+0xdc>)
 8000d7e:	2203      	movs	r2, #3
 8000d80:	601a      	str	r2, [r3, #0]
		else if (TotalScorePlayer1 >21 && TotalScorePlayer1 <= 21  ) {
			State = 2; //Player1Win
				}

	}
}
 8000d82:	e03f      	b.n	8000e04 <StateGame+0xb8>
		else if (TotalScorePlayer1 > 21 && TotalScorePlayer2 > 21) {
 8000d84:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <StateGame+0xd0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b15      	cmp	r3, #21
 8000d8a:	dd07      	ble.n	8000d9c <StateGame+0x50>
 8000d8c:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <StateGame+0xd8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b15      	cmp	r3, #21
 8000d92:	dd03      	ble.n	8000d9c <StateGame+0x50>
	       State = 3; //Tie
 8000d94:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <StateGame+0xdc>)
 8000d96:	2203      	movs	r2, #3
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e033      	b.n	8000e04 <StateGame+0xb8>
		else if (TotalScorePlayer1 > TotalScorePlayer2 && TotalScorePlayer1 <= 21) {
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <StateGame+0xd0>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <StateGame+0xd8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dd07      	ble.n	8000db8 <StateGame+0x6c>
 8000da8:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <StateGame+0xd0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b15      	cmp	r3, #21
 8000dae:	dc03      	bgt.n	8000db8 <StateGame+0x6c>
	       State = 1; //Player1Win
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <StateGame+0xdc>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e025      	b.n	8000e04 <StateGame+0xb8>
		else if (TotalScorePlayer2 > TotalScorePlayer1 && TotalScorePlayer2 <= 21) {
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <StateGame+0xd8>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <StateGame+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dd07      	ble.n	8000dd4 <StateGame+0x88>
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <StateGame+0xd8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b15      	cmp	r3, #21
 8000dca:	dc03      	bgt.n	8000dd4 <StateGame+0x88>
	       State = 2; //Player2Win
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <StateGame+0xdc>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e017      	b.n	8000e04 <StateGame+0xb8>
		else if (TotalScorePlayer2 >21 && TotalScorePlayer2 <= 21  ) {
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <StateGame+0xd8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b15      	cmp	r3, #21
 8000dda:	dd07      	ble.n	8000dec <StateGame+0xa0>
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <StateGame+0xd8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b15      	cmp	r3, #21
 8000de2:	dc03      	bgt.n	8000dec <StateGame+0xa0>
			State = 1; //Player1Win
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <StateGame+0xdc>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e00b      	b.n	8000e04 <StateGame+0xb8>
		else if (TotalScorePlayer1 >21 && TotalScorePlayer1 <= 21  ) {
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <StateGame+0xd0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b15      	cmp	r3, #21
 8000df2:	dd07      	ble.n	8000e04 <StateGame+0xb8>
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <StateGame+0xd0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b15      	cmp	r3, #21
 8000dfa:	dc03      	bgt.n	8000e04 <StateGame+0xb8>
			State = 2; //Player1Win
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <StateGame+0xdc>)
 8000dfe:	2202      	movs	r2, #2
 8000e00:	601a      	str	r2, [r3, #0]
}
 8000e02:	e7ff      	b.n	8000e04 <StateGame+0xb8>
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200002c8 	.word	0x200002c8
 8000e14:	200002cc 	.word	0x200002cc
 8000e18:	200002c0 	.word	0x200002c0
 8000e1c:	200002b8 	.word	0x200002b8
 8000e20:	200002c4 	.word	0x200002c4
 8000e24:	200002bc 	.word	0x200002bc
 8000e28:	200002b4 	.word	0x200002b4

08000e2c <LED>:

void LED() {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2104      	movs	r1, #4
 8000e34:	4813      	ldr	r0, [pc, #76]	; (8000e84 <LED+0x58>)
 8000e36:	f001 f8ab 	bl	8001f90 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000; // write
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <LED+0x5c>)
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x01; // OLATB
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <LED+0x5c>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	705a      	strb	r2, [r3, #1]
		if (State == 3) { //tie
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <LED+0x60>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d102      	bne.n	8000e54 <LED+0x28>
			SPITx[2] = 0b11101111; // LED ON 4
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <LED+0x5c>)
 8000e50:	22ef      	movs	r2, #239	; 0xef
 8000e52:	709a      	strb	r2, [r3, #2]
		}
		if (State == 1) { // p1 win
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <LED+0x60>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d102      	bne.n	8000e62 <LED+0x36>
				SPITx[2] = 0b10111111; // LED ON 2
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <LED+0x5c>)
 8000e5e:	22bf      	movs	r2, #191	; 0xbf
 8000e60:	709a      	strb	r2, [r3, #2]
		}
		if (State == 2) { //p2 win
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <LED+0x60>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d102      	bne.n	8000e70 <LED+0x44>
				SPITx[2] = 0b11011111; // LED ON 3
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <LED+0x5c>)
 8000e6c:	22df      	movs	r2, #223	; 0xdf
 8000e6e:	709a      	strb	r2, [r3, #2]
		}
		if (State == 0) { //playing
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <LED+0x60>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <LED+0x52>
			SPITx[2] = 0b01111111; // LED ON 1
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <LED+0x5c>)
 8000e7a:	227f      	movs	r2, #127	; 0x7f
 8000e7c:	709a      	strb	r2, [r3, #2]
		}
	}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	48000c00 	.word	0x48000c00
 8000e88:	200002a8 	.word	0x200002a8
 8000e8c:	200002b4 	.word	0x200002b4

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <Error_Handler+0x8>
	...

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6613      	str	r3, [r2, #96]	; 0x60
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_MspInit+0x44>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ed2:	f002 ff6f 	bl	8003db4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0a0      	sub	sp, #128	; 0x80
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efc:	f107 0318 	add.w	r3, r7, #24
 8000f00:	2254      	movs	r2, #84	; 0x54
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f005 fbba 	bl	800667e <memset>
  if(hi2c->Instance==I2C1)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a5f      	ldr	r2, [pc, #380]	; (800108c <HAL_I2C_MspInit+0x1a8>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	f040 80b6 	bne.w	8001082 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f16:	2340      	movs	r3, #64	; 0x40
 8000f18:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1e:	f107 0318 	add.w	r3, r7, #24
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fc84 	bl	8004830 <HAL_RCCEx_PeriphCLKConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f2e:	f7ff ffaf 	bl	8000e90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b57      	ldr	r3, [pc, #348]	; (8001090 <HAL_I2C_MspInit+0x1ac>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a56      	ldr	r2, [pc, #344]	; (8001090 <HAL_I2C_MspInit+0x1ac>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b54      	ldr	r3, [pc, #336]	; (8001090 <HAL_I2C_MspInit+0x1ac>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b51      	ldr	r3, [pc, #324]	; (8001090 <HAL_I2C_MspInit+0x1ac>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a50      	ldr	r2, [pc, #320]	; (8001090 <HAL_I2C_MspInit+0x1ac>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b4e      	ldr	r3, [pc, #312]	; (8001090 <HAL_I2C_MspInit+0x1ac>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f66:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f68:	2312      	movs	r3, #18
 8000f6a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f74:	2304      	movs	r3, #4
 8000f76:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f82:	f000 fe6b 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8a:	2312      	movs	r3, #18
 8000f8c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f96:	2304      	movs	r3, #4
 8000f98:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	483c      	ldr	r0, [pc, #240]	; (8001094 <HAL_I2C_MspInit+0x1b0>)
 8000fa2:	f000 fe5b 	bl	8001c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <HAL_I2C_MspInit+0x1ac>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	4a39      	ldr	r2, [pc, #228]	; (8001090 <HAL_I2C_MspInit+0x1ac>)
 8000fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb2:	4b37      	ldr	r3, [pc, #220]	; (8001090 <HAL_I2C_MspInit+0x1ac>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <HAL_I2C_MspInit+0x1b4>)
 8000fc0:	4a36      	ldr	r2, [pc, #216]	; (800109c <HAL_I2C_MspInit+0x1b8>)
 8000fc2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000fc4:	4b34      	ldr	r3, [pc, #208]	; (8001098 <HAL_I2C_MspInit+0x1b4>)
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fca:	4b33      	ldr	r3, [pc, #204]	; (8001098 <HAL_I2C_MspInit+0x1b4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd0:	4b31      	ldr	r3, [pc, #196]	; (8001098 <HAL_I2C_MspInit+0x1b4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd6:	4b30      	ldr	r3, [pc, #192]	; (8001098 <HAL_I2C_MspInit+0x1b4>)
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <HAL_I2C_MspInit+0x1b4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <HAL_I2C_MspInit+0x1b4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <HAL_I2C_MspInit+0x1b4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <HAL_I2C_MspInit+0x1b4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000ff4:	4828      	ldr	r0, [pc, #160]	; (8001098 <HAL_I2C_MspInit+0x1b4>)
 8000ff6:	f000 fc03 	bl	8001800 <HAL_DMA_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001000:	f7ff ff46 	bl	8000e90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a24      	ldr	r2, [pc, #144]	; (8001098 <HAL_I2C_MspInit+0x1b4>)
 8001008:	63da      	str	r2, [r3, #60]	; 0x3c
 800100a:	4a23      	ldr	r2, [pc, #140]	; (8001098 <HAL_I2C_MspInit+0x1b4>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8001010:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <HAL_I2C_MspInit+0x1bc>)
 8001012:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <HAL_I2C_MspInit+0x1c0>)
 8001014:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <HAL_I2C_MspInit+0x1bc>)
 8001018:	2211      	movs	r2, #17
 800101a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_I2C_MspInit+0x1bc>)
 800101e:	2210      	movs	r2, #16
 8001020:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <HAL_I2C_MspInit+0x1bc>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_I2C_MspInit+0x1bc>)
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_I2C_MspInit+0x1bc>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <HAL_I2C_MspInit+0x1bc>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_I2C_MspInit+0x1bc>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <HAL_I2C_MspInit+0x1bc>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001046:	4816      	ldr	r0, [pc, #88]	; (80010a0 <HAL_I2C_MspInit+0x1bc>)
 8001048:	f000 fbda 	bl	8001800 <HAL_DMA_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001052:	f7ff ff1d 	bl	8000e90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <HAL_I2C_MspInit+0x1bc>)
 800105a:	639a      	str	r2, [r3, #56]	; 0x38
 800105c:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <HAL_I2C_MspInit+0x1bc>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	201f      	movs	r0, #31
 8001068:	f000 fb95 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800106c:	201f      	movs	r0, #31
 800106e:	f000 fbac 	bl	80017ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2020      	movs	r0, #32
 8001078:	f000 fb8d 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800107c:	2020      	movs	r0, #32
 800107e:	f000 fba4 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3780      	adds	r7, #128	; 0x80
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40005400 	.word	0x40005400
 8001090:	40021000 	.word	0x40021000
 8001094:	48000400 	.word	0x48000400
 8001098:	200000dc 	.word	0x200000dc
 800109c:	40020008 	.word	0x40020008
 80010a0:	2000013c 	.word	0x2000013c
 80010a4:	4002001c 	.word	0x4002001c

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b09e      	sub	sp, #120	; 0x78
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2254      	movs	r2, #84	; 0x54
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 fad8 	bl	800667e <memset>
  if(huart->Instance==LPUART1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <HAL_UART_MspInit+0xa8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d136      	bne.n	8001146 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80010d8:	2320      	movs	r3, #32
 80010da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fba3 	bl	8004830 <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010f0:	f7ff fece 	bl	8000e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_UART_MspInit+0xac>)
 80010f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f8:	4a16      	ldr	r2, [pc, #88]	; (8001154 <HAL_UART_MspInit+0xac>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_UART_MspInit+0xac>)
 8001102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_UART_MspInit+0xac>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_UART_MspInit+0xac>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_UART_MspInit+0xac>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001124:	230c      	movs	r3, #12
 8001126:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001134:	230c      	movs	r3, #12
 8001136:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f000 fd8b 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001146:	bf00      	nop
 8001148:	3778      	adds	r7, #120	; 0x78
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40008000 	.word	0x40008000
 8001154:	40021000 	.word	0x40021000

08001158 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <HAL_SPI_MspInit+0x8c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d130      	bne.n	80011dc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_SPI_MspInit+0x90>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_SPI_MspInit+0x90>)
 8001180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001184:	6593      	str	r3, [r2, #88]	; 0x58
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_SPI_MspInit+0x90>)
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_SPI_MspInit+0x90>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <HAL_SPI_MspInit+0x90>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_SPI_MspInit+0x90>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011bc:	2306      	movs	r3, #6
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <HAL_SPI_MspInit+0x94>)
 80011c8:	f000 fd48 	bl	8001c5c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2033      	movs	r0, #51	; 0x33
 80011d2:	f000 fae0 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80011d6:	2033      	movs	r0, #51	; 0x33
 80011d8:	f000 faf7 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40003c00 	.word	0x40003c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	48000800 	.word	0x48000800

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f000 f990 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <DMA1_Channel1_IRQHandler+0x10>)
 800124a:	f000 fbe8 	bl	8001a1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200000dc 	.word	0x200000dc

08001258 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <DMA1_Channel2_IRQHandler+0x10>)
 800125e:	f000 fbde 	bl	8001a1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000013c 	.word	0x2000013c

0800126c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <I2C1_EV_IRQHandler+0x10>)
 8001272:	f001 f873 	bl	800235c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000088 	.word	0x20000088

08001280 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <I2C1_ER_IRQHandler+0x10>)
 8001286:	f001 f883 	bl	8002390 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000088 	.word	0x20000088

08001294 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001298:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800129c:	f000 fe90 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <SPI3_IRQHandler+0x10>)
 80012aa:	f003 fe69 	bl	8004f80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000230 	.word	0x20000230

080012b8 <_getpid>:
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	2301      	movs	r3, #1
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_kill>:
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	f005 fa23 	bl	800671c <__errno>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2216      	movs	r2, #22
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_exit>:
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ffe7 	bl	80012c8 <_kill>
 80012fa:	e7fe      	b.n	80012fa <_exit+0x12>

080012fc <_read>:
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e00a      	b.n	8001324 <_read+0x28>
 800130e:	f3af 8000 	nop.w
 8001312:	4601      	mov	r1, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf0      	blt.n	800130e <_read+0x12>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_write>:
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e009      	b.n	800135c <_write+0x26>
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f3af 8000 	nop.w
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbf1      	blt.n	8001348 <_write+0x12>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_close>:
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_fstat>:
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	2300      	movs	r3, #0
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_isatty>:
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	2301      	movs	r3, #1
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_lseek>:
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	2300      	movs	r3, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <_sbrk>:
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
 8001408:	f005 f988 	bl	800671c <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20020000 	.word	0x20020000
 8001438:	00000400 	.word	0x00000400
 800143c:	200002f4 	.word	0x200002f4
 8001440:	20000448 	.word	0x20000448

08001444 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <LoopForever+0x2>)
 800146a:	4685      	mov	sp, r0
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <LoopForever+0x6>)
 8001472:	490d      	ldr	r1, [pc, #52]	; (80014a8 <LoopForever+0xa>)
 8001474:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <LoopForever+0xe>)
 8001476:	2300      	movs	r3, #0
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:
 800147a:	58d4      	ldr	r4, [r2, r3]
 800147c:	50c4      	str	r4, [r0, r3]
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:
 8001480:	18c4      	adds	r4, r0, r3
 8001482:	428c      	cmp	r4, r1
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <LoopForever+0x12>)
 8001488:	4c0a      	ldr	r4, [pc, #40]	; (80014b4 <LoopForever+0x16>)
 800148a:	2300      	movs	r3, #0
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:
 8001492:	42a2      	cmp	r2, r4
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>
 8001496:	f005 f947 	bl	8006728 <__libc_init_array>
 800149a:	f7ff f88f 	bl	80005bc <main>

0800149e <LoopForever>:
 800149e:	e7fe      	b.n	800149e <LoopForever>
 80014a0:	20020000 	.word	0x20020000
 80014a4:	20000000 	.word	0x20000000
 80014a8:	2000006c 	.word	0x2000006c
 80014ac:	0800750c 	.word	0x0800750c
 80014b0:	2000006c 	.word	0x2000006c
 80014b4:	20000448 	.word	0x20000448

080014b8 <ADC1_2_IRQHandler>:
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>

080014ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 f95b 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f80e 	bl	80014ec <HAL_InitTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	e001      	b.n	80014e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014dc:	f7ff fcde 	bl	8000e9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e0:	79fb      	ldrb	r3, [r7, #7]

}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_InitTick+0x68>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d022      	beq.n	8001546 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_InitTick+0x6c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_InitTick+0x68>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800150c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f966 	bl	80017e6 <HAL_SYSTICK_Config>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10f      	bne.n	8001540 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	d809      	bhi.n	800153a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001526:	2200      	movs	r2, #0
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
 800152e:	f000 f932 	bl	8001796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_InitTick+0x70>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e007      	b.n	800154a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e004      	b.n	800154a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e001      	b.n	800154a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000000c 	.word	0x2000000c
 8001558:	20000004 	.word	0x20000004
 800155c:	20000008 	.word	0x20000008

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x1c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x20>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4413      	add	r3, r2
 800156e:	4a03      	ldr	r2, [pc, #12]	; (800157c <HAL_IncTick+0x1c>)
 8001570:	6013      	str	r3, [r2, #0]
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	200002f8 	.word	0x200002f8
 8001580:	2000000c 	.word	0x2000000c

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200002f8 	.word	0x200002f8

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d004      	beq.n	80015c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_Delay+0x40>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c0:	bf00      	nop
 80015c2:	f7ff ffdf 	bl	8001584 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d8f7      	bhi.n	80015c2 <HAL_Delay+0x26>
  {
  }
}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000000c 	.word	0x2000000c

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff8e 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff29 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff40 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff90 	bl	80016d4 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5f 	bl	8001680 <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff33 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa4 	bl	800173c <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e08d      	b.n	800192e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_DMA_Init+0x138>)
 800181a:	429a      	cmp	r2, r3
 800181c:	d80f      	bhi.n	800183e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b45      	ldr	r3, [pc, #276]	; (800193c <HAL_DMA_Init+0x13c>)
 8001826:	4413      	add	r3, r2
 8001828:	4a45      	ldr	r2, [pc, #276]	; (8001940 <HAL_DMA_Init+0x140>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	009a      	lsls	r2, r3, #2
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a42      	ldr	r2, [pc, #264]	; (8001944 <HAL_DMA_Init+0x144>)
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
 800183c:	e00e      	b.n	800185c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	4b40      	ldr	r3, [pc, #256]	; (8001948 <HAL_DMA_Init+0x148>)
 8001846:	4413      	add	r3, r2
 8001848:	4a3d      	ldr	r2, [pc, #244]	; (8001940 <HAL_DMA_Init+0x140>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	009a      	lsls	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a3c      	ldr	r2, [pc, #240]	; (800194c <HAL_DMA_Init+0x14c>)
 800185a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001876:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f972 	bl	8001b98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018bc:	d102      	bne.n	80018c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d010      	beq.n	8001904 <HAL_DMA_Init+0x104>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d80c      	bhi.n	8001904 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f992 	bl	8001c14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	e008      	b.n	8001916 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40020407 	.word	0x40020407
 800193c:	bffdfff8 	.word	0xbffdfff8
 8001940:	cccccccd 	.word	0xcccccccd
 8001944:	40020000 	.word	0x40020000
 8001948:	bffdfbf8 	.word	0xbffdfbf8
 800194c:	40020400 	.word	0x40020400

08001950 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d00d      	beq.n	8001984 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2204      	movs	r2, #4
 800196c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	e047      	b.n	8001a14 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 020e 	bic.w	r2, r2, #14
 8001992:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	2101      	movs	r1, #1
 80019c2:	fa01 f202 	lsl.w	r2, r1, r2
 80019c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00c      	beq.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4798      	blx	r3
    }
  }
  return status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	2204      	movs	r2, #4
 8001a40:	409a      	lsls	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d026      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x7a>
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d021      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d107      	bne.n	8001a72 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0204 	bic.w	r2, r2, #4
 8001a70:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f003 021f 	and.w	r2, r3, #31
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2104      	movs	r1, #4
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d071      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a96:	e06c      	b.n	8001b72 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d02e      	beq.n	8001b0a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d029      	beq.n	8001b0a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10b      	bne.n	8001adc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 020a 	bic.w	r2, r2, #10
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	2102      	movs	r1, #2
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d038      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b08:	e033      	b.n	8001b72 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2208      	movs	r2, #8
 8001b14:	409a      	lsls	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d02a      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d025      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 020e 	bic.w	r2, r2, #14
 8001b36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
}
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b8a:	b2db      	uxtb	r3, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d802      	bhi.n	8001bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e001      	b.n	8001bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bb4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	3b08      	subs	r3, #8
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	009a      	lsls	r2, r3, #2
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001be2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2201      	movs	r2, #1
 8001bec:	409a      	lsls	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40020407 	.word	0x40020407
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020820 	.word	0x40020820
 8001c0c:	cccccccd 	.word	0xcccccccd
 8001c10:	40020880 	.word	0x40020880

08001c14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c36:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2201      	movs	r2, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	1000823f 	.word	0x1000823f
 8001c58:	40020940 	.word	0x40020940

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c6a:	e15a      	b.n	8001f22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 814c 	beq.w	8001f1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d005      	beq.n	8001c9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d130      	bne.n	8001cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	f003 0201 	and.w	r2, r3, #1
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d017      	beq.n	8001d3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d123      	bne.n	8001d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	08da      	lsrs	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3208      	adds	r2, #8
 8001d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	6939      	ldr	r1, [r7, #16]
 8001d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0203 	and.w	r2, r3, #3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80a6 	beq.w	8001f1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd0:	4b5b      	ldr	r3, [pc, #364]	; (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd4:	4a5a      	ldr	r2, [pc, #360]	; (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6613      	str	r3, [r2, #96]	; 0x60
 8001ddc:	4b58      	ldr	r3, [pc, #352]	; (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de8:	4a56      	ldr	r2, [pc, #344]	; (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e12:	d01f      	beq.n	8001e54 <HAL_GPIO_Init+0x1f8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a4c      	ldr	r2, [pc, #304]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d019      	beq.n	8001e50 <HAL_GPIO_Init+0x1f4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a4b      	ldr	r2, [pc, #300]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <HAL_GPIO_Init+0x1f0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a4a      	ldr	r2, [pc, #296]	; (8001f50 <HAL_GPIO_Init+0x2f4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00d      	beq.n	8001e48 <HAL_GPIO_Init+0x1ec>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a49      	ldr	r2, [pc, #292]	; (8001f54 <HAL_GPIO_Init+0x2f8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d007      	beq.n	8001e44 <HAL_GPIO_Init+0x1e8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a48      	ldr	r2, [pc, #288]	; (8001f58 <HAL_GPIO_Init+0x2fc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_GPIO_Init+0x1e4>
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	e00a      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e40:	2306      	movs	r3, #6
 8001e42:	e008      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e44:	2304      	movs	r3, #4
 8001e46:	e006      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e004      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e002      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e54:	2300      	movs	r3, #0
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	f002 0203 	and.w	r2, r2, #3
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	4093      	lsls	r3, r2
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e66:	4937      	ldr	r1, [pc, #220]	; (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e98:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ec2:	4a26      	ldr	r2, [pc, #152]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ec8:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eec:	4a1b      	ldr	r2, [pc, #108]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f47f ae9d 	bne.w	8001c6c <HAL_GPIO_Init+0x10>
  }
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40010000 	.word	0x40010000
 8001f48:	48000400 	.word	0x48000400
 8001f4c:	48000800 	.word	0x48000800
 8001f50:	48000c00 	.word	0x48000c00
 8001f54:	48001000 	.word	0x48001000
 8001f58:	48001400 	.word	0x48001400
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e001      	b.n	8001f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fac:	e002      	b.n	8001fb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f806 	bl	8001ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e08d      	b.n	8002134 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d106      	bne.n	8002032 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7fe ff59 	bl	8000ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2224      	movs	r2, #36	; 0x24
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0201 	bic.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002056:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002066:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	e006      	b.n	800208e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800208c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d108      	bne.n	80020a8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	e007      	b.n	80020b8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69d9      	ldr	r1, [r3, #28]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1a      	ldr	r2, [r3, #32]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	4608      	mov	r0, r1
 8002146:	4611      	mov	r1, r2
 8002148:	461a      	mov	r2, r3
 800214a:	4603      	mov	r3, r0
 800214c:	817b      	strh	r3, [r7, #10]
 800214e:	460b      	mov	r3, r1
 8002150:	813b      	strh	r3, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b20      	cmp	r3, #32
 8002160:	d16a      	bne.n	8002238 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_I2C_Mem_Write_IT+0x32>
 8002168:	8bbb      	ldrh	r3, [r7, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e05f      	b.n	800223a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002188:	d101      	bne.n	800218e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	e055      	b.n	800223a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_I2C_Mem_Write_IT+0x60>
 8002198:	2302      	movs	r3, #2
 800219a:	e04e      	b.n	800223a <HAL_I2C_Mem_Write_IT+0xfe>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2221      	movs	r2, #33	; 0x21
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8bba      	ldrh	r2, [r7, #28]
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <HAL_I2C_Mem_Write_IT+0x108>)
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <HAL_I2C_Mem_Write_IT+0x10c>)
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80021d8:	897a      	ldrh	r2, [r7, #10]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d109      	bne.n	80021f8 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021e4:	893b      	ldrh	r3, [r7, #8]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295
 80021f4:	651a      	str	r2, [r3, #80]	; 0x50
 80021f6:	e00b      	b.n	8002210 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021f8:	893b      	ldrh	r3, [r7, #8]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002206:	893b      	ldrh	r3, [r7, #8]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	8979      	ldrh	r1, [r7, #10]
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_I2C_Mem_Write_IT+0x110>)
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f001 fb78 	bl	8003914 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800222c:	2101      	movs	r1, #1
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f001 fba2 	bl	8003978 <I2C_Enable_IRQ>

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	ffff0000 	.word	0xffff0000
 8002248:	08002519 	.word	0x08002519
 800224c:	80002000 	.word	0x80002000

08002250 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	4608      	mov	r0, r1
 800225a:	4611      	mov	r1, r2
 800225c:	461a      	mov	r2, r3
 800225e:	4603      	mov	r3, r0
 8002260:	817b      	strh	r3, [r7, #10]
 8002262:	460b      	mov	r3, r1
 8002264:	813b      	strh	r3, [r7, #8]
 8002266:	4613      	mov	r3, r2
 8002268:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b20      	cmp	r3, #32
 8002274:	d166      	bne.n	8002344 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_I2C_Mem_Read_IT+0x32>
 800227c:	8bbb      	ldrh	r3, [r7, #28]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e05b      	b.n	8002346 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800229c:	d101      	bne.n	80022a2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	e051      	b.n	8002346 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_I2C_Mem_Read_IT+0x60>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e04a      	b.n	8002346 <HAL_I2C_Mem_Read_IT+0xf6>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2222      	movs	r2, #34	; 0x22
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2240      	movs	r2, #64	; 0x40
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8bba      	ldrh	r2, [r7, #28]
 80022d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_I2C_Mem_Read_IT+0x100>)
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <HAL_I2C_Mem_Read_IT+0x104>)
 80022e4:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80022e6:	897a      	ldrh	r2, [r7, #10]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d109      	bne.n	8002306 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022f2:	893b      	ldrh	r3, [r7, #8]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002302:	651a      	str	r2, [r3, #80]	; 0x50
 8002304:	e00b      	b.n	800231e <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002306:	893b      	ldrh	r3, [r7, #8]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	b29b      	uxth	r3, r3
 800230c:	b2da      	uxtb	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002314:	893b      	ldrh	r3, [r7, #8]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	8979      	ldrh	r1, [r7, #10]
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_I2C_Mem_Read_IT+0x108>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2300      	movs	r3, #0
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f001 faf2 	bl	8003914 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002338:	2101      	movs	r1, #1
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f001 fb1c 	bl	8003978 <I2C_Enable_IRQ>

    return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e000      	b.n	8002346 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002344:	2302      	movs	r3, #2
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	ffff0000 	.word	0xffff0000
 8002354:	08002519 	.word	0x08002519
 8002358:	80002000 	.word	0x80002000

0800235c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
  }
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00f      	beq.n	80023d2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00f      	beq.n	80023fc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f043 0208 	orr.w	r2, r3, #8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00f      	beq.n	8002426 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	f043 0202 	orr.w	r2, r3, #2
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002424:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 030b 	and.w	r3, r3, #11
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002436:	68f9      	ldr	r1, [r7, #12]
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f001 f911 	bl	8003660 <I2C_ITError>
  }
}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	70fb      	strb	r3, [r7, #3]
 80024a2:	4613      	mov	r3, r2
 80024a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002524:	4b8d      	ldr	r3, [pc, #564]	; (800275c <I2C_Mem_ISR_IT+0x244>)
 8002526:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <I2C_Mem_ISR_IT+0x22>
 8002536:	2302      	movs	r3, #2
 8002538:	e10c      	b.n	8002754 <I2C_Mem_ISR_IT+0x23c>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d012      	beq.n	8002572 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2210      	movs	r2, #16
 800255c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f043 0204 	orr.w	r2, r3, #4
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f001 f98f 	bl	800388e <I2C_Flush_TXDR>
 8002570:	e0dd      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d022      	beq.n	80025c2 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01d      	beq.n	80025c2 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f023 0304 	bic.w	r3, r3, #4
 800258c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025c0:	e0b5      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d02c      	beq.n	8002626 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d027      	beq.n	8002626 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d118      	bne.n	8002612 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002610:	e08d      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800261a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f04f 32ff 	mov.w	r2, #4294967295
 8002622:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002624:	e083      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262c:	2b00      	cmp	r3, #0
 800262e:	d03c      	beq.n	80026aa <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002636:	2b00      	cmp	r3, #0
 8002638:	d037      	beq.n	80026aa <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d02c      	beq.n	800269e <I2C_Mem_ISR_IT+0x186>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d128      	bne.n	800269e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2bff      	cmp	r3, #255	; 0xff
 8002654:	d910      	bls.n	8002678 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	22ff      	movs	r2, #255	; 0xff
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002660:	b299      	uxth	r1, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002666:	b2da      	uxtb	r2, r3
 8002668:	2300      	movs	r3, #0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f001 f94f 	bl	8003914 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002676:	e017      	b.n	80026a8 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002686:	b299      	uxth	r1, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	b2da      	uxtb	r2, r3
 800268e:	2300      	movs	r3, #0
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f001 f93c 	bl	8003914 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800269c:	e004      	b.n	80026a8 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800269e:	2140      	movs	r1, #64	; 0x40
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 ffdd 	bl	8003660 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026a6:	e042      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
 80026a8:	e041      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d03c      	beq.n	800272e <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d037      	beq.n	800272e <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026be:	2101      	movs	r1, #1
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f001 f9dd 	bl	8003a80 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80026c6:	2102      	movs	r1, #2
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f001 f955 	bl	8003978 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b22      	cmp	r3, #34	; 0x22
 80026d8:	d101      	bne.n	80026de <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <I2C_Mem_ISR_IT+0x248>)
 80026dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2bff      	cmp	r3, #255	; 0xff
 80026e6:	d910      	bls.n	800270a <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	22ff      	movs	r2, #255	; 0xff
 80026ec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f2:	b299      	uxth	r1, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f001 f906 	bl	8003914 <I2C_TransferConfig>
 8002708:	e011      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	b299      	uxth	r1, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	b2da      	uxtb	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f001 f8f3 	bl	8003914 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002742:	6939      	ldr	r1, [r7, #16]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fd0b 	bl	8003160 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	80002000 	.word	0x80002000
 8002760:	80002400 	.word	0x80002400

08002764 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <I2C_Slave_ISR_IT+0x24>
 8002784:	2302      	movs	r3, #2
 8002786:	e0e2      	b.n	800294e <I2C_Slave_ISR_IT+0x1ea>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80027a4:	6939      	ldr	r1, [r7, #16]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fda2 	bl	80032f0 <I2C_ITSlaveCplt>
 80027ac:	e0ca      	b.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d04b      	beq.n	8002850 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d046      	beq.n	8002850 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d128      	bne.n	800281e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b28      	cmp	r3, #40	; 0x28
 80027d6:	d108      	bne.n	80027ea <I2C_Slave_ISR_IT+0x86>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027de:	d104      	bne.n	80027ea <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80027e0:	6939      	ldr	r1, [r7, #16]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fee8 	bl	80035b8 <I2C_ITListenCplt>
 80027e8:	e031      	b.n	800284e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b29      	cmp	r3, #41	; 0x29
 80027f4:	d10e      	bne.n	8002814 <I2C_Slave_ISR_IT+0xb0>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027fc:	d00a      	beq.n	8002814 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2210      	movs	r2, #16
 8002804:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f001 f841 	bl	800388e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fc4b 	bl	80030a8 <I2C_ITSlaveSeqCplt>
 8002812:	e01c      	b.n	800284e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2210      	movs	r2, #16
 800281a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800281c:	e08f      	b.n	800293e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2210      	movs	r2, #16
 8002824:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f043 0204 	orr.w	r2, r3, #4
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <I2C_Slave_ISR_IT+0xdc>
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800283e:	d17e      	bne.n	800293e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	4619      	mov	r1, r3
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 ff0a 	bl	8003660 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800284c:	e077      	b.n	800293e <I2C_Slave_ISR_IT+0x1da>
 800284e:	e076      	b.n	800293e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d02f      	beq.n	80028ba <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002860:	2b00      	cmp	r3, #0
 8002862:	d02a      	beq.n	80028ba <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d018      	beq.n	80028a0 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d14b      	bne.n	8002942 <I2C_Slave_ISR_IT+0x1de>
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b0:	d047      	beq.n	8002942 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fbf8 	bl	80030a8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80028b8:	e043      	b.n	8002942 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d009      	beq.n	80028d8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d004      	beq.n	80028d8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80028ce:	6939      	ldr	r1, [r7, #16]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fb28 	bl	8002f26 <I2C_ITAddrCplt>
 80028d6:	e035      	b.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d030      	beq.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02b      	beq.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d018      	beq.n	8002928 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	781a      	ldrb	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28
 8002926:	e00d      	b.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800292e:	d002      	beq.n	8002936 <I2C_Slave_ISR_IT+0x1d2>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fbb6 	bl	80030a8 <I2C_ITSlaveSeqCplt>
 800293c:	e002      	b.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002942:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b088      	sub	sp, #32
 800295a:	af02      	add	r7, sp, #8
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <I2C_Master_ISR_DMA+0x1a>
 800296c:	2302      	movs	r3, #2
 800296e:	e0d9      	b.n	8002b24 <I2C_Master_ISR_DMA+0x1ce>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	d016      	beq.n	80029b0 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002988:	2b00      	cmp	r3, #0
 800298a:	d011      	beq.n	80029b0 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2210      	movs	r2, #16
 8002992:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	f043 0204 	orr.w	r2, r3, #4
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80029a0:	2120      	movs	r1, #32
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 ffe8 	bl	8003978 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 ff70 	bl	800388e <I2C_Flush_TXDR>
 80029ae:	e0b4      	b.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d071      	beq.n	8002a9e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d06c      	beq.n	8002a9e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d04e      	beq.n	8002a7c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ea:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2bff      	cmp	r3, #255	; 0xff
 80029f4:	d906      	bls.n	8002a04 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	22ff      	movs	r2, #255	; 0xff
 80029fa:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80029fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e010      	b.n	8002a26 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a16:	d003      	beq.n	8002a20 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e002      	b.n	8002a26 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a24:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	8a79      	ldrh	r1, [r7, #18]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 ff6d 	bl	8003914 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b22      	cmp	r3, #34	; 0x22
 8002a56:	d108      	bne.n	8002a6a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a66:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a68:	e057      	b.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a78:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a7a:	e04e      	b.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a8a:	d003      	beq.n	8002a94 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 face 	bl	800302e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002a92:	e042      	b.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fde2 	bl	8003660 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002a9c:	e03d      	b.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d028      	beq.n	8002afa <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d023      	beq.n	8002afa <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d119      	bne.n	8002af0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002aca:	d025      	beq.n	8002b18 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ad4:	d108      	bne.n	8002ae8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002ae6:	e017      	b.n	8002b18 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 faa0 	bl	800302e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002aee:	e013      	b.n	8002b18 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002af0:	2140      	movs	r1, #64	; 0x40
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fdb4 	bl	8003660 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002af8:	e00e      	b.n	8002b18 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fb25 	bl	8003160 <I2C_ITMasterCplt>
 8002b16:	e000      	b.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002b18:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002b38:	4b8d      	ldr	r3, [pc, #564]	; (8002d70 <I2C_Mem_ISR_DMA+0x244>)
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <I2C_Mem_ISR_DMA+0x1e>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e10e      	b.n	8002d68 <I2C_Mem_ISR_DMA+0x23c>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d016      	beq.n	8002b8a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d011      	beq.n	8002b8a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f043 0204 	orr.w	r2, r3, #4
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002b7a:	2120      	movs	r1, #32
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fefb 	bl	8003978 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fe83 	bl	800388e <I2C_Flush_TXDR>
 8002b88:	e0e9      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00e      	beq.n	8002bb2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f04f 32ff 	mov.w	r2, #4294967295
 8002bae:	651a      	str	r2, [r3, #80]	; 0x50
 8002bb0:	e0d5      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05f      	beq.n	8002c7c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d05a      	beq.n	8002c7c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 ff59 	bl	8003a80 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002bce:	2110      	movs	r1, #16
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fed1 	bl	8003978 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d048      	beq.n	8002c72 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2bff      	cmp	r3, #255	; 0xff
 8002be8:	d910      	bls.n	8002c0c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	22ff      	movs	r2, #255	; 0xff
 8002bee:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf4:	b299      	uxth	r1, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fe85 	bl	8003914 <I2C_TransferConfig>
 8002c0a:	e011      	b.n	8002c30 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	b299      	uxth	r1, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	2300      	movs	r3, #0
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 fe72 	bl	8003914 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b22      	cmp	r3, #34	; 0x22
 8002c4c:	d108      	bne.n	8002c60 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c5c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c5e:	e07e      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c6e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c70:	e075      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c72:	2140      	movs	r1, #64	; 0x40
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fcf3 	bl	8003660 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002c7a:	e070      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d05d      	beq.n	8002d42 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d058      	beq.n	8002d42 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c90:	2101      	movs	r1, #1
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fef4 	bl	8003a80 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002c98:	2110      	movs	r1, #16
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fe6c 	bl	8003978 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b22      	cmp	r3, #34	; 0x22
 8002caa:	d101      	bne.n	8002cb0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002cac:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <I2C_Mem_ISR_DMA+0x248>)
 8002cae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2bff      	cmp	r3, #255	; 0xff
 8002cb8:	d910      	bls.n	8002cdc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	22ff      	movs	r2, #255	; 0xff
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc4:	b299      	uxth	r1, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fe1d 	bl	8003914 <I2C_TransferConfig>
 8002cda:	e011      	b.n	8002d00 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	b299      	uxth	r1, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fe0a 	bl	8003914 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b22      	cmp	r3, #34	; 0x22
 8002d1c:	d108      	bne.n	8002d30 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d2c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d2e:	e016      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d3e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d40:	e00d      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fa01 	bl	8003160 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	80002000 	.word	0x80002000
 8002d74:	80002400 	.word	0x80002400

08002d78 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <I2C_Slave_ISR_DMA+0x24>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e0c0      	b.n	8002f1e <I2C_Slave_ISR_DMA+0x1a6>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fa98 	bl	80032f0 <I2C_ITSlaveCplt>
 8002dc0:	e0a8      	b.n	8002f14 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8095 	beq.w	8002ef8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 808f 	beq.w	8002ef8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d07d      	beq.n	8002eea <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00c      	beq.n	8002e32 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d128      	bne.n	8002e8a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b28      	cmp	r3, #40	; 0x28
 8002e42:	d108      	bne.n	8002e56 <I2C_Slave_ISR_DMA+0xde>
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e4a:	d104      	bne.n	8002e56 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fbb2 	bl	80035b8 <I2C_ITListenCplt>
 8002e54:	e048      	b.n	8002ee8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b29      	cmp	r3, #41	; 0x29
 8002e60:	d10e      	bne.n	8002e80 <I2C_Slave_ISR_DMA+0x108>
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e68:	d00a      	beq.n	8002e80 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2210      	movs	r2, #16
 8002e70:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fd0b 	bl	800388e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f915 	bl	80030a8 <I2C_ITSlaveSeqCplt>
 8002e7e:	e033      	b.n	8002ee8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2210      	movs	r2, #16
 8002e86:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002e88:	e034      	b.n	8002ef4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2210      	movs	r2, #16
 8002e90:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f043 0204 	orr.w	r2, r3, #4
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <I2C_Slave_ISR_DMA+0x13c>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb2:	d11f      	bne.n	8002ef4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	2b21      	cmp	r3, #33	; 0x21
 8002eb8:	d002      	beq.n	8002ec0 <I2C_Slave_ISR_DMA+0x148>
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	2b29      	cmp	r3, #41	; 0x29
 8002ebe:	d103      	bne.n	8002ec8 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2221      	movs	r2, #33	; 0x21
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ec6:	e008      	b.n	8002eda <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b22      	cmp	r3, #34	; 0x22
 8002ecc:	d002      	beq.n	8002ed4 <I2C_Slave_ISR_DMA+0x15c>
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
 8002ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed2:	d102      	bne.n	8002eda <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2222      	movs	r2, #34	; 0x22
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fbbd 	bl	8003660 <I2C_ITError>
      if (treatdmanack == 1U)
 8002ee6:	e005      	b.n	8002ef4 <I2C_Slave_ISR_DMA+0x17c>
 8002ee8:	e004      	b.n	8002ef4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2210      	movs	r2, #16
 8002ef0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ef2:	e00f      	b.n	8002f14 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002ef4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ef6:	e00d      	b.n	8002f14 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f809 	bl	8002f26 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f3c:	2b28      	cmp	r3, #40	; 0x28
 8002f3e:	d16a      	bne.n	8003016 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	0c1b      	lsrs	r3, r3, #16
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f5e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f6c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f7a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d138      	bne.n	8002ff6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002f84:	897b      	ldrh	r3, [r7, #10]
 8002f86:	09db      	lsrs	r3, r3, #7
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	89bb      	ldrh	r3, [r7, #12]
 8002f8c:	4053      	eors	r3, r2
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f003 0306 	and.w	r3, r3, #6
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d11c      	bne.n	8002fd2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002f98:	897b      	ldrh	r3, [r7, #10]
 8002f9a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d13b      	bne.n	8003026 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2208      	movs	r2, #8
 8002fba:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fc4:	89ba      	ldrh	r2, [r7, #12]
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff fa63 	bl	8002496 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fd0:	e029      	b.n	8003026 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002fd2:	893b      	ldrh	r3, [r7, #8]
 8002fd4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fd50 	bl	8003a80 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fe8:	89ba      	ldrh	r2, [r7, #12]
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff fa51 	bl	8002496 <HAL_I2C_AddrCallback>
}
 8002ff4:	e017      	b.n	8003026 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fd40 	bl	8003a80 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003008:	89ba      	ldrh	r2, [r7, #12]
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff fa41 	bl	8002496 <HAL_I2C_AddrCallback>
}
 8003014:	e007      	b.n	8003026 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2208      	movs	r2, #8
 800301c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b21      	cmp	r3, #33	; 0x21
 8003048:	d115      	bne.n	8003076 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2211      	movs	r2, #17
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800305e:	2101      	movs	r1, #1
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fd0d 	bl	8003a80 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff f9e9 	bl	8002446 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003074:	e014      	b.n	80030a0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2212      	movs	r2, #18
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800308a:	2102      	movs	r1, #2
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fcf7 	bl	8003a80 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff f9dd 	bl	800245a <HAL_I2C_MasterRxCpltCallback>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e00c      	b.n	80030f6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b29      	cmp	r3, #41	; 0x29
 8003100:	d112      	bne.n	8003128 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2228      	movs	r2, #40	; 0x28
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2221      	movs	r2, #33	; 0x21
 800310e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003110:	2101      	movs	r1, #1
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fcb4 	bl	8003a80 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff f9a4 	bl	800246e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003126:	e017      	b.n	8003158 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b2a      	cmp	r3, #42	; 0x2a
 8003132:	d111      	bne.n	8003158 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2228      	movs	r2, #40	; 0x28
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2222      	movs	r2, #34	; 0x22
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003142:	2102      	movs	r1, #2
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fc9b 	bl	8003a80 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff f995 	bl	8002482 <HAL_I2C_SlaveRxCpltCallback>
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2220      	movs	r2, #32
 8003174:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b21      	cmp	r3, #33	; 0x21
 8003180:	d107      	bne.n	8003192 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003182:	2101      	movs	r1, #1
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fc7b 	bl	8003a80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2211      	movs	r2, #17
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
 8003190:	e00c      	b.n	80031ac <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b22      	cmp	r3, #34	; 0x22
 800319c:	d106      	bne.n	80031ac <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800319e:	2102      	movs	r1, #2
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fc6d 	bl	8003a80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2212      	movs	r2, #18
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b4c      	ldr	r3, [pc, #304]	; (80032e8 <I2C_ITMasterCplt+0x188>)
 80031b8:	400b      	ands	r3, r1
 80031ba:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a49      	ldr	r2, [pc, #292]	; (80032ec <I2C_ITMasterCplt+0x18c>)
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2210      	movs	r2, #16
 80031d8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f043 0204 	orr.w	r2, r3, #4
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b60      	cmp	r3, #96	; 0x60
 80031f0:	d10a      	bne.n	8003208 <I2C_ITMasterCplt+0xa8>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	b2db      	uxtb	r3, r3
 8003204:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003206:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fb40 	bl	800388e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b60      	cmp	r3, #96	; 0x60
 800321e:	d002      	beq.n	8003226 <I2C_ITMasterCplt+0xc6>
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fa17 	bl	8003660 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003232:	e054      	b.n	80032de <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b21      	cmp	r3, #33	; 0x21
 800323e:	d124      	bne.n	800328a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d10b      	bne.n	8003272 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff f92b 	bl	80024c6 <HAL_I2C_MemTxCpltCallback>
}
 8003270:	e035      	b.n	80032de <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff f8df 	bl	8002446 <HAL_I2C_MasterTxCpltCallback>
}
 8003288:	e029      	b.n	80032de <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b22      	cmp	r3, #34	; 0x22
 8003294:	d123      	bne.n	80032de <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d10b      	bne.n	80032c8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff f90a 	bl	80024da <HAL_I2C_MemRxCpltCallback>
}
 80032c6:	e00a      	b.n	80032de <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff f8be 	bl	800245a <HAL_I2C_MasterRxCpltCallback>
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	fe00e800 	.word	0xfe00e800
 80032ec:	ffff0000 	.word	0xffff0000

080032f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003312:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2220      	movs	r2, #32
 800331a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800331c:	7afb      	ldrb	r3, [r7, #11]
 800331e:	2b21      	cmp	r3, #33	; 0x21
 8003320:	d002      	beq.n	8003328 <I2C_ITSlaveCplt+0x38>
 8003322:	7afb      	ldrb	r3, [r7, #11]
 8003324:	2b29      	cmp	r3, #41	; 0x29
 8003326:	d108      	bne.n	800333a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003328:	f248 0101 	movw	r1, #32769	; 0x8001
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fba7 	bl	8003a80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2221      	movs	r2, #33	; 0x21
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
 8003338:	e019      	b.n	800336e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800333a:	7afb      	ldrb	r3, [r7, #11]
 800333c:	2b22      	cmp	r3, #34	; 0x22
 800333e:	d002      	beq.n	8003346 <I2C_ITSlaveCplt+0x56>
 8003340:	7afb      	ldrb	r3, [r7, #11]
 8003342:	2b2a      	cmp	r3, #42	; 0x2a
 8003344:	d108      	bne.n	8003358 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003346:	f248 0102 	movw	r1, #32770	; 0x8002
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fb98 	bl	8003a80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2222      	movs	r2, #34	; 0x22
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
 8003356:	e00a      	b.n	800336e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003358:	7afb      	ldrb	r3, [r7, #11]
 800335a:	2b28      	cmp	r3, #40	; 0x28
 800335c:	d107      	bne.n	800336e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800335e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fb8c 	bl	8003a80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800337c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b89      	ldr	r3, [pc, #548]	; (80035b0 <I2C_ITSlaveCplt+0x2c0>)
 800338a:	400b      	ands	r3, r1
 800338c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fa7d 	bl	800388e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d013      	beq.n	80033c6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033ac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01f      	beq.n	80033f6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033c4:	e017      	b.n	80033f6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d006      	beq.n	80033f6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 0304 	bic.w	r3, r3, #4
 8003406:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00c      	beq.n	8003442 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	f043 0204 	orr.w	r2, r3, #4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b00      	cmp	r3, #0
 8003460:	d049      	beq.n	80034f6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003468:	2b00      	cmp	r3, #0
 800346a:	d044      	beq.n	80034f6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d128      	bne.n	80034c8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b28      	cmp	r3, #40	; 0x28
 8003480:	d108      	bne.n	8003494 <I2C_ITSlaveCplt+0x1a4>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003488:	d104      	bne.n	8003494 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800348a:	6979      	ldr	r1, [r7, #20]
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f893 	bl	80035b8 <I2C_ITListenCplt>
 8003492:	e030      	b.n	80034f6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b29      	cmp	r3, #41	; 0x29
 800349e:	d10e      	bne.n	80034be <I2C_ITSlaveCplt+0x1ce>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034a6:	d00a      	beq.n	80034be <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2210      	movs	r2, #16
 80034ae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f9ec 	bl	800388e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff fdf6 	bl	80030a8 <I2C_ITSlaveSeqCplt>
 80034bc:	e01b      	b.n	80034f6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2210      	movs	r2, #16
 80034c4:	61da      	str	r2, [r3, #28]
 80034c6:	e016      	b.n	80034f6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2210      	movs	r2, #16
 80034ce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <I2C_ITSlaveCplt+0x1fa>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e8:	d105      	bne.n	80034f6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f8b5 	bl	8003660 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8a4 	bl	8003660 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b28      	cmp	r3, #40	; 0x28
 8003522:	d141      	bne.n	80035a8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003524:	6979      	ldr	r1, [r7, #20]
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f846 	bl	80035b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800352c:	e03c      	b.n	80035a8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003536:	d014      	beq.n	8003562 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff fdb5 	bl	80030a8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <I2C_ITSlaveCplt+0x2c4>)
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe ffa9 	bl	80024b2 <HAL_I2C_ListenCpltCallback>
}
 8003560:	e022      	b.n	80035a8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b22      	cmp	r3, #34	; 0x22
 800356c:	d10e      	bne.n	800358c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fe ff7c 	bl	8002482 <HAL_I2C_SlaveRxCpltCallback>
}
 800358a:	e00d      	b.n	80035a8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fe ff63 	bl	800246e <HAL_I2C_SlaveTxCpltCallback>
}
 80035a8:	bf00      	nop
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	fe00e800 	.word	0xfe00e800
 80035b4:	ffff0000 	.word	0xffff0000

080035b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a25      	ldr	r2, [pc, #148]	; (800365c <I2C_ITListenCplt+0xa4>)
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d022      	beq.n	8003634 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	d012      	beq.n	8003634 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	f043 0204 	orr.w	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003634:	f248 0103 	movw	r1, #32771	; 0x8003
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fa21 	bl	8003a80 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2210      	movs	r2, #16
 8003644:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe ff2f 	bl	80024b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	ffff0000 	.word	0xffff0000

08003660 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003670:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a6d      	ldr	r2, [pc, #436]	; (8003834 <I2C_ITError+0x1d4>)
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	2b28      	cmp	r3, #40	; 0x28
 8003696:	d005      	beq.n	80036a4 <I2C_ITError+0x44>
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	2b29      	cmp	r3, #41	; 0x29
 800369c:	d002      	beq.n	80036a4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	2b2a      	cmp	r3, #42	; 0x2a
 80036a2:	d10b      	bne.n	80036bc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036a4:	2103      	movs	r1, #3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f9ea 	bl	8003a80 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2228      	movs	r2, #40	; 0x28
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a60      	ldr	r2, [pc, #384]	; (8003838 <I2C_ITError+0x1d8>)
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34
 80036ba:	e030      	b.n	800371e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036bc:	f248 0103 	movw	r1, #32771	; 0x8003
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f9dd 	bl	8003a80 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f8e1 	bl	800388e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b60      	cmp	r3, #96	; 0x60
 80036d6:	d01f      	beq.n	8003718 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d114      	bne.n	8003718 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d109      	bne.n	8003710 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2210      	movs	r2, #16
 8003702:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	f043 0204 	orr.w	r2, r3, #4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2220      	movs	r2, #32
 8003716:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	2b00      	cmp	r3, #0
 800372a:	d039      	beq.n	80037a0 <I2C_ITError+0x140>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b11      	cmp	r3, #17
 8003730:	d002      	beq.n	8003738 <I2C_ITError+0xd8>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b21      	cmp	r3, #33	; 0x21
 8003736:	d133      	bne.n	80037a0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003746:	d107      	bne.n	8003758 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003756:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe fa0d 	bl	8001b7c <HAL_DMA_GetState>
 8003762:	4603      	mov	r3, r0
 8003764:	2b01      	cmp	r3, #1
 8003766:	d017      	beq.n	8003798 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	4a33      	ldr	r2, [pc, #204]	; (800383c <I2C_ITError+0x1dc>)
 800376e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe f8e7 	bl	8001950 <HAL_DMA_Abort_IT>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d04d      	beq.n	8003824 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003792:	4610      	mov	r0, r2
 8003794:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003796:	e045      	b.n	8003824 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f851 	bl	8003840 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800379e:	e041      	b.n	8003824 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d039      	beq.n	800381c <I2C_ITError+0x1bc>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b12      	cmp	r3, #18
 80037ac:	d002      	beq.n	80037b4 <I2C_ITError+0x154>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b22      	cmp	r3, #34	; 0x22
 80037b2:	d133      	bne.n	800381c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c2:	d107      	bne.n	80037d4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fe f9cf 	bl	8001b7c <HAL_DMA_GetState>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d017      	beq.n	8003814 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e8:	4a14      	ldr	r2, [pc, #80]	; (800383c <I2C_ITError+0x1dc>)
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe f8a9 	bl	8001950 <HAL_DMA_Abort_IT>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d011      	beq.n	8003828 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800380e:	4610      	mov	r0, r2
 8003810:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003812:	e009      	b.n	8003828 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f813 	bl	8003840 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800381a:	e005      	b.n	8003828 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f80f 	bl	8003840 <I2C_TreatErrorCallback>
  }
}
 8003822:	e002      	b.n	800382a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003824:	bf00      	nop
 8003826:	e000      	b.n	800382a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003828:	bf00      	nop
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	ffff0000 	.word	0xffff0000
 8003838:	08002765 	.word	0x08002765
 800383c:	080038d7 	.word	0x080038d7

08003840 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b60      	cmp	r3, #96	; 0x60
 8003852:	d10e      	bne.n	8003872 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fe fe49 	bl	8002502 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003870:	e009      	b.n	8003886 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7fe fe34 	bl	80024ee <HAL_I2C_ErrorCallback>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d103      	bne.n	80038ac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2200      	movs	r2, #0
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d007      	beq.n	80038ca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	619a      	str	r2, [r3, #24]
  }
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	2200      	movs	r2, #0
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	2200      	movs	r2, #0
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff ff9b 	bl	8003840 <I2C_TreatErrorCallback>
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	817b      	strh	r3, [r7, #10]
 8003922:	4613      	mov	r3, r2
 8003924:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800392c:	7a7b      	ldrb	r3, [r7, #9]
 800392e:	041b      	lsls	r3, r3, #16
 8003930:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003934:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	4313      	orrs	r3, r2
 800393e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003942:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	0d5b      	lsrs	r3, r3, #21
 800394e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003952:	4b08      	ldr	r3, [pc, #32]	; (8003974 <I2C_TransferConfig+0x60>)
 8003954:	430b      	orrs	r3, r1
 8003956:	43db      	mvns	r3, r3
 8003958:	ea02 0103 	and.w	r1, r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	03ff63ff 	.word	0x03ff63ff

08003978 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398c:	4a39      	ldr	r2, [pc, #228]	; (8003a74 <I2C_Enable_IRQ+0xfc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d032      	beq.n	80039f8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003996:	4a38      	ldr	r2, [pc, #224]	; (8003a78 <I2C_Enable_IRQ+0x100>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d02d      	beq.n	80039f8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80039a0:	4a36      	ldr	r2, [pc, #216]	; (8003a7c <I2C_Enable_IRQ+0x104>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d028      	beq.n	80039f8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	da03      	bge.n	80039b6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80039b4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80039c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80039c8:	887b      	ldrh	r3, [r7, #2]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80039d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80039da:	887b      	ldrh	r3, [r7, #2]
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d103      	bne.n	80039e8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80039e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d133      	bne.n	8003a56 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f043 0320 	orr.w	r3, r3, #32
 80039f4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039f6:	e02e      	b.n	8003a56 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	da03      	bge.n	8003a08 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a06:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a08:	887b      	ldrh	r3, [r7, #2]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003a18:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003a2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a2c:	887b      	ldrh	r3, [r7, #2]
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d103      	bne.n	8003a3a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a38:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a3a:	887b      	ldrh	r3, [r7, #2]
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d103      	bne.n	8003a48 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a46:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	2b40      	cmp	r3, #64	; 0x40
 8003a4c:	d103      	bne.n	8003a56 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a54:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	601a      	str	r2, [r3, #0]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	08002957 	.word	0x08002957
 8003a78:	08002d79 	.word	0x08002d79
 8003a7c:	08002b2d 	.word	0x08002b2d

08003a80 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a90:	887b      	ldrh	r3, [r7, #2]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00f      	beq.n	8003aba <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003aa0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003aae:	2b28      	cmp	r3, #40	; 0x28
 8003ab0:	d003      	beq.n	8003aba <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ab8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00f      	beq.n	8003ae4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003aca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ad8:	2b28      	cmp	r3, #40	; 0x28
 8003ada:	d003      	beq.n	8003ae4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ae2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ae4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	da03      	bge.n	8003af4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003af2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003af4:	887b      	ldrh	r3, [r7, #2]
 8003af6:	2b10      	cmp	r3, #16
 8003af8:	d103      	bne.n	8003b02 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b00:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b02:	887b      	ldrh	r3, [r7, #2]
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d103      	bne.n	8003b10 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f043 0320 	orr.w	r3, r3, #32
 8003b0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b10:	887b      	ldrh	r3, [r7, #2]
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d103      	bne.n	8003b1e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	43da      	mvns	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d138      	bne.n	8003bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e032      	b.n	8003bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2224      	movs	r2, #36	; 0x24
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d139      	bne.n	8003c5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e033      	b.n	8003c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2224      	movs	r2, #36	; 0x24
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
  }
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d141      	bne.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c7a:	4b4b      	ldr	r3, [pc, #300]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c86:	d131      	bne.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c88:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8e:	4a46      	ldr	r2, [pc, #280]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c98:	4b43      	ldr	r3, [pc, #268]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ca0:	4a41      	ldr	r2, [pc, #260]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ca8:	4b40      	ldr	r3, [pc, #256]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2232      	movs	r2, #50	; 0x32
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	4a3f      	ldr	r2, [pc, #252]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	0c9b      	lsrs	r3, r3, #18
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cbe:	e002      	b.n	8003cc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc6:	4b38      	ldr	r3, [pc, #224]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd2:	d102      	bne.n	8003cda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f2      	bne.n	8003cc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cda:	4b33      	ldr	r3, [pc, #204]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce6:	d158      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e057      	b.n	8003d9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cec:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf2:	4a2d      	ldr	r2, [pc, #180]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cfc:	e04d      	b.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d04:	d141      	bne.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d06:	4b28      	ldr	r3, [pc, #160]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d12:	d131      	bne.n	8003d78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d14:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1a:	4a23      	ldr	r2, [pc, #140]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d24:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d34:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2232      	movs	r2, #50	; 0x32
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d40:	fba2 2303 	umull	r2, r3, r2, r3
 8003d44:	0c9b      	lsrs	r3, r3, #18
 8003d46:	3301      	adds	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4a:	e002      	b.n	8003d52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5e:	d102      	bne.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f2      	bne.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d112      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e011      	b.n	8003d9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d88:	e007      	b.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d92:	4a05      	ldr	r2, [pc, #20]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40007000 	.word	0x40007000
 8003dac:	20000004 	.word	0x20000004
 8003db0:	431bde83 	.word	0x431bde83

08003db4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc2:	6093      	str	r3, [r2, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40007000 	.word	0x40007000

08003dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e2fe      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d075      	beq.n	8003ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df2:	4b97      	ldr	r3, [pc, #604]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dfc:	4b94      	ldr	r3, [pc, #592]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b0c      	cmp	r3, #12
 8003e0a:	d102      	bne.n	8003e12 <HAL_RCC_OscConfig+0x3e>
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d002      	beq.n	8003e18 <HAL_RCC_OscConfig+0x44>
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e18:	4b8d      	ldr	r3, [pc, #564]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d05b      	beq.n	8003edc <HAL_RCC_OscConfig+0x108>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d157      	bne.n	8003edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e2d9      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d106      	bne.n	8003e48 <HAL_RCC_OscConfig+0x74>
 8003e3a:	4b85      	ldr	r3, [pc, #532]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a84      	ldr	r2, [pc, #528]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e01d      	b.n	8003e84 <HAL_RCC_OscConfig+0xb0>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x98>
 8003e52:	4b7f      	ldr	r3, [pc, #508]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a7e      	ldr	r2, [pc, #504]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b7c      	ldr	r3, [pc, #496]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a7b      	ldr	r2, [pc, #492]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCC_OscConfig+0xb0>
 8003e6c:	4b78      	ldr	r3, [pc, #480]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a77      	ldr	r2, [pc, #476]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b75      	ldr	r3, [pc, #468]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a74      	ldr	r2, [pc, #464]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d013      	beq.n	8003eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fd fb7a 	bl	8001584 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fd fb76 	bl	8001584 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e29e      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea6:	4b6a      	ldr	r3, [pc, #424]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0xc0>
 8003eb2:	e014      	b.n	8003ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fb66 	bl	8001584 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fd fb62 	bl	8001584 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e28a      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ece:	4b60      	ldr	r3, [pc, #384]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0xe8>
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d075      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eea:	4b59      	ldr	r3, [pc, #356]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef4:	4b56      	ldr	r3, [pc, #344]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b0c      	cmp	r3, #12
 8003f02:	d102      	bne.n	8003f0a <HAL_RCC_OscConfig+0x136>
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d002      	beq.n	8003f10 <HAL_RCC_OscConfig+0x13c>
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d11f      	bne.n	8003f50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f10:	4b4f      	ldr	r3, [pc, #316]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_OscConfig+0x154>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e25d      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f28:	4b49      	ldr	r3, [pc, #292]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	061b      	lsls	r3, r3, #24
 8003f36:	4946      	ldr	r1, [pc, #280]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f3c:	4b45      	ldr	r3, [pc, #276]	; (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fd fad3 	bl	80014ec <HAL_InitTick>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d043      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e249      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d023      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f58:	4b3d      	ldr	r3, [pc, #244]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a3c      	ldr	r2, [pc, #240]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fd fb0e 	bl	8001584 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6c:	f7fd fb0a 	bl	8001584 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e232      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7e:	4b34      	ldr	r3, [pc, #208]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	061b      	lsls	r3, r3, #24
 8003f98:	492d      	ldr	r1, [pc, #180]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
 8003f9e:	e01a      	b.n	8003fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2a      	ldr	r2, [pc, #168]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fd faea 	bl	8001584 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb4:	f7fd fae6 	bl	8001584 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e20e      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x1e0>
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d041      	beq.n	8004066 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01c      	beq.n	8004024 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fea:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff0:	4a17      	ldr	r2, [pc, #92]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffa:	f7fd fac3 	bl	8001584 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004002:	f7fd fabf 	bl	8001584 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e1e7      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8004016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0ef      	beq.n	8004002 <HAL_RCC_OscConfig+0x22e>
 8004022:	e020      	b.n	8004066 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8004026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800402a:	4a09      	ldr	r2, [pc, #36]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fd faa6 	bl	8001584 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800403a:	e00d      	b.n	8004058 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403c:	f7fd faa2 	bl	8001584 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d906      	bls.n	8004058 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e1ca      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
 8004054:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004058:	4b8c      	ldr	r3, [pc, #560]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 800405a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1ea      	bne.n	800403c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80a6 	beq.w	80041c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004074:	2300      	movs	r3, #0
 8004076:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004078:	4b84      	ldr	r3, [pc, #528]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_OscConfig+0x2b4>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x2b6>
 8004088:	2300      	movs	r3, #0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	4b7f      	ldr	r3, [pc, #508]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	4a7e      	ldr	r2, [pc, #504]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004098:	6593      	str	r3, [r2, #88]	; 0x58
 800409a:	4b7c      	ldr	r3, [pc, #496]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 800409c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040a6:	2301      	movs	r3, #1
 80040a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040aa:	4b79      	ldr	r3, [pc, #484]	; (8004290 <HAL_RCC_OscConfig+0x4bc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d118      	bne.n	80040e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b6:	4b76      	ldr	r3, [pc, #472]	; (8004290 <HAL_RCC_OscConfig+0x4bc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a75      	ldr	r2, [pc, #468]	; (8004290 <HAL_RCC_OscConfig+0x4bc>)
 80040bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c2:	f7fd fa5f 	bl	8001584 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ca:	f7fd fa5b 	bl	8001584 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e183      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040dc:	4b6c      	ldr	r3, [pc, #432]	; (8004290 <HAL_RCC_OscConfig+0x4bc>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d108      	bne.n	8004102 <HAL_RCC_OscConfig+0x32e>
 80040f0:	4b66      	ldr	r3, [pc, #408]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	4a65      	ldr	r2, [pc, #404]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004100:	e024      	b.n	800414c <HAL_RCC_OscConfig+0x378>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b05      	cmp	r3, #5
 8004108:	d110      	bne.n	800412c <HAL_RCC_OscConfig+0x358>
 800410a:	4b60      	ldr	r3, [pc, #384]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	4a5e      	ldr	r2, [pc, #376]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004112:	f043 0304 	orr.w	r3, r3, #4
 8004116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800411a:	4b5c      	ldr	r3, [pc, #368]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004120:	4a5a      	ldr	r2, [pc, #360]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800412a:	e00f      	b.n	800414c <HAL_RCC_OscConfig+0x378>
 800412c:	4b57      	ldr	r3, [pc, #348]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	4a56      	ldr	r2, [pc, #344]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004142:	4a52      	ldr	r2, [pc, #328]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004144:	f023 0304 	bic.w	r3, r3, #4
 8004148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d016      	beq.n	8004182 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004154:	f7fd fa16 	bl	8001584 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415a:	e00a      	b.n	8004172 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415c:	f7fd fa12 	bl	8001584 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e138      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004172:	4b46      	ldr	r3, [pc, #280]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ed      	beq.n	800415c <HAL_RCC_OscConfig+0x388>
 8004180:	e015      	b.n	80041ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004182:	f7fd f9ff 	bl	8001584 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004188:	e00a      	b.n	80041a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418a:	f7fd f9fb 	bl	8001584 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f241 3288 	movw	r2, #5000	; 0x1388
 8004198:	4293      	cmp	r3, r2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e121      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a0:	4b3a      	ldr	r3, [pc, #232]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1ed      	bne.n	800418a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041ae:	7ffb      	ldrb	r3, [r7, #31]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d105      	bne.n	80041c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b4:	4b35      	ldr	r3, [pc, #212]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 80041b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b8:	4a34      	ldr	r2, [pc, #208]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 80041ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d03c      	beq.n	8004246 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01c      	beq.n	800420e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041d4:	4b2d      	ldr	r3, [pc, #180]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 80041d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041da:	4a2c      	ldr	r2, [pc, #176]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fd f9ce 	bl	8001584 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ec:	f7fd f9ca 	bl	8001584 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e0f2      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041fe:	4b23      	ldr	r3, [pc, #140]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ef      	beq.n	80041ec <HAL_RCC_OscConfig+0x418>
 800420c:	e01b      	b.n	8004246 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800420e:	4b1f      	ldr	r3, [pc, #124]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004214:	4a1d      	ldr	r2, [pc, #116]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fd f9b1 	bl	8001584 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004226:	f7fd f9ad 	bl	8001584 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0d5      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004238:	4b14      	ldr	r3, [pc, #80]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 800423a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ef      	bne.n	8004226 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80c9 	beq.w	80043e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004250:	4b0e      	ldr	r3, [pc, #56]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b0c      	cmp	r3, #12
 800425a:	f000 8083 	beq.w	8004364 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d15e      	bne.n	8004324 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a08      	ldr	r2, [pc, #32]	; (800428c <HAL_RCC_OscConfig+0x4b8>)
 800426c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fd f987 	bl	8001584 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004278:	e00c      	b.n	8004294 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800427a:	f7fd f983 	bl	8001584 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d905      	bls.n	8004294 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e0ab      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
 800428c:	40021000 	.word	0x40021000
 8004290:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004294:	4b55      	ldr	r3, [pc, #340]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1ec      	bne.n	800427a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a0:	4b52      	ldr	r3, [pc, #328]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	4b52      	ldr	r3, [pc, #328]	; (80043f0 <HAL_RCC_OscConfig+0x61c>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6a11      	ldr	r1, [r2, #32]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042b0:	3a01      	subs	r2, #1
 80042b2:	0112      	lsls	r2, r2, #4
 80042b4:	4311      	orrs	r1, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042ba:	0212      	lsls	r2, r2, #8
 80042bc:	4311      	orrs	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042c2:	0852      	lsrs	r2, r2, #1
 80042c4:	3a01      	subs	r2, #1
 80042c6:	0552      	lsls	r2, r2, #21
 80042c8:	4311      	orrs	r1, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042ce:	0852      	lsrs	r2, r2, #1
 80042d0:	3a01      	subs	r2, #1
 80042d2:	0652      	lsls	r2, r2, #25
 80042d4:	4311      	orrs	r1, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042da:	06d2      	lsls	r2, r2, #27
 80042dc:	430a      	orrs	r2, r1
 80042de:	4943      	ldr	r1, [pc, #268]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e4:	4b41      	ldr	r3, [pc, #260]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a40      	ldr	r2, [pc, #256]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 80042ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042f0:	4b3e      	ldr	r3, [pc, #248]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a3d      	ldr	r2, [pc, #244]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 80042f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fd f942 	bl	8001584 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004304:	f7fd f93e 	bl	8001584 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e066      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004316:	4b35      	ldr	r3, [pc, #212]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0x530>
 8004322:	e05e      	b.n	80043e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004324:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a30      	ldr	r2, [pc, #192]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 800432a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800432e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fd f928 	bl	8001584 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004338:	f7fd f924 	bl	8001584 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e04c      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434a:	4b28      	ldr	r3, [pc, #160]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004356:	4b25      	ldr	r3, [pc, #148]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	4924      	ldr	r1, [pc, #144]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 800435c:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <HAL_RCC_OscConfig+0x620>)
 800435e:	4013      	ands	r3, r2
 8004360:	60cb      	str	r3, [r1, #12]
 8004362:	e03e      	b.n	80043e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e039      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004370:	4b1e      	ldr	r3, [pc, #120]	; (80043ec <HAL_RCC_OscConfig+0x618>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f003 0203 	and.w	r2, r3, #3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	429a      	cmp	r2, r3
 8004382:	d12c      	bne.n	80043de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	3b01      	subs	r3, #1
 8004390:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d123      	bne.n	80043de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d11b      	bne.n	80043de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d113      	bne.n	80043de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	3b01      	subs	r3, #1
 80043c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d109      	bne.n	80043de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	3b01      	subs	r3, #1
 80043d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3720      	adds	r7, #32
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000
 80043f0:	019f800c 	.word	0x019f800c
 80043f4:	feeefffc 	.word	0xfeeefffc

080043f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e11e      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004410:	4b91      	ldr	r3, [pc, #580]	; (8004658 <HAL_RCC_ClockConfig+0x260>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d910      	bls.n	8004440 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b8e      	ldr	r3, [pc, #568]	; (8004658 <HAL_RCC_ClockConfig+0x260>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 020f 	bic.w	r2, r3, #15
 8004426:	498c      	ldr	r1, [pc, #560]	; (8004658 <HAL_RCC_ClockConfig+0x260>)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	4313      	orrs	r3, r2
 800442c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b8a      	ldr	r3, [pc, #552]	; (8004658 <HAL_RCC_ClockConfig+0x260>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e106      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d073      	beq.n	8004534 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d129      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004454:	4b81      	ldr	r3, [pc, #516]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0f4      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004464:	f000 f99e 	bl	80047a4 <RCC_GetSysClockFreqFromPLLSource>
 8004468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4a7c      	ldr	r2, [pc, #496]	; (8004660 <HAL_RCC_ClockConfig+0x268>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d93f      	bls.n	80044f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004472:	4b7a      	ldr	r3, [pc, #488]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004486:	2b00      	cmp	r3, #0
 8004488:	d033      	beq.n	80044f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800448e:	2b00      	cmp	r3, #0
 8004490:	d12f      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004492:	4b72      	ldr	r3, [pc, #456]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800449a:	4a70      	ldr	r2, [pc, #448]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 800449c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e024      	b.n	80044f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b0:	4b6a      	ldr	r3, [pc, #424]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0c6      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044c0:	4b66      	ldr	r3, [pc, #408]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0be      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80044d0:	f000 f8ce 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4a61      	ldr	r2, [pc, #388]	; (8004660 <HAL_RCC_ClockConfig+0x268>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d909      	bls.n	80044f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044de:	4b5f      	ldr	r3, [pc, #380]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e6:	4a5d      	ldr	r2, [pc, #372]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044f2:	4b5a      	ldr	r3, [pc, #360]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f023 0203 	bic.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4957      	ldr	r1, [pc, #348]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 8004500:	4313      	orrs	r3, r2
 8004502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004504:	f7fd f83e 	bl	8001584 <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	e00a      	b.n	8004522 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fd f83a 	bl	8001584 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	; 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e095      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	4b4e      	ldr	r3, [pc, #312]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 020c 	and.w	r2, r3, #12
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	429a      	cmp	r2, r3
 8004532:	d1eb      	bne.n	800450c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d023      	beq.n	8004588 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800454c:	4b43      	ldr	r3, [pc, #268]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4a42      	ldr	r2, [pc, #264]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 8004552:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004556:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004564:	4b3d      	ldr	r3, [pc, #244]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800456c:	4a3b      	ldr	r2, [pc, #236]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 800456e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004572:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004574:	4b39      	ldr	r3, [pc, #228]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4936      	ldr	r1, [pc, #216]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
 8004586:	e008      	b.n	800459a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b80      	cmp	r3, #128	; 0x80
 800458c:	d105      	bne.n	800459a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800458e:	4b33      	ldr	r3, [pc, #204]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	4a32      	ldr	r2, [pc, #200]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 8004594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004598:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800459a:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <HAL_RCC_ClockConfig+0x260>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d21d      	bcs.n	80045e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <HAL_RCC_ClockConfig+0x260>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 020f 	bic.w	r2, r3, #15
 80045b0:	4929      	ldr	r1, [pc, #164]	; (8004658 <HAL_RCC_ClockConfig+0x260>)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045b8:	f7fc ffe4 	bl	8001584 <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c0:	f7fc ffe0 	bl	8001584 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e03b      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d6:	4b20      	ldr	r3, [pc, #128]	; (8004658 <HAL_RCC_ClockConfig+0x260>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d1ed      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4917      	ldr	r1, [pc, #92]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800460e:	4b13      	ldr	r3, [pc, #76]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	490f      	ldr	r1, [pc, #60]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004622:	f000 f825 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 8004626:	4602      	mov	r2, r0
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <HAL_RCC_ClockConfig+0x264>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	490c      	ldr	r1, [pc, #48]	; (8004664 <HAL_RCC_ClockConfig+0x26c>)
 8004634:	5ccb      	ldrb	r3, [r1, r3]
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	fa22 f303 	lsr.w	r3, r2, r3
 800463e:	4a0a      	ldr	r2, [pc, #40]	; (8004668 <HAL_RCC_ClockConfig+0x270>)
 8004640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <HAL_RCC_ClockConfig+0x274>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fc ff50 	bl	80014ec <HAL_InitTick>
 800464c:	4603      	mov	r3, r0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40022000 	.word	0x40022000
 800465c:	40021000 	.word	0x40021000
 8004660:	04c4b400 	.word	0x04c4b400
 8004664:	080073dc 	.word	0x080073dc
 8004668:	20000004 	.word	0x20000004
 800466c:	20000008 	.word	0x20000008

08004670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004676:	4b2c      	ldr	r3, [pc, #176]	; (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b04      	cmp	r3, #4
 8004680:	d102      	bne.n	8004688 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004682:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	e047      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004688:	4b27      	ldr	r3, [pc, #156]	; (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 030c 	and.w	r3, r3, #12
 8004690:	2b08      	cmp	r3, #8
 8004692:	d102      	bne.n	800469a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004694:	4b26      	ldr	r3, [pc, #152]	; (8004730 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	e03e      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d136      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046b0:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	3301      	adds	r3, #1
 80046bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d10c      	bne.n	80046de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046c4:	4a1a      	ldr	r2, [pc, #104]	; (8004730 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	4a16      	ldr	r2, [pc, #88]	; (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ce:	68d2      	ldr	r2, [r2, #12]
 80046d0:	0a12      	lsrs	r2, r2, #8
 80046d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	617b      	str	r3, [r7, #20]
      break;
 80046dc:	e00c      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046de:	4a13      	ldr	r2, [pc, #76]	; (800472c <HAL_RCC_GetSysClockFreq+0xbc>)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	4a10      	ldr	r2, [pc, #64]	; (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e8:	68d2      	ldr	r2, [r2, #12]
 80046ea:	0a12      	lsrs	r2, r2, #8
 80046ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]
      break;
 80046f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	0e5b      	lsrs	r3, r3, #25
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	3301      	adds	r3, #1
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	e001      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004718:	693b      	ldr	r3, [r7, #16]
}
 800471a:	4618      	mov	r0, r3
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	00f42400 	.word	0x00f42400
 8004730:	016e3600 	.word	0x016e3600

08004734 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <HAL_RCC_GetHCLKFreq+0x14>)
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000004 	.word	0x20000004

0800474c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004750:	f7ff fff0 	bl	8004734 <HAL_RCC_GetHCLKFreq>
 8004754:	4602      	mov	r2, r0
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	4904      	ldr	r1, [pc, #16]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004762:	5ccb      	ldrb	r3, [r1, r3]
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000
 8004774:	080073ec 	.word	0x080073ec

08004778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800477c:	f7ff ffda 	bl	8004734 <HAL_RCC_GetHCLKFreq>
 8004780:	4602      	mov	r2, r0
 8004782:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	0adb      	lsrs	r3, r3, #11
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	4904      	ldr	r1, [pc, #16]	; (80047a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800478e:	5ccb      	ldrb	r3, [r1, r3]
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004798:	4618      	mov	r0, r3
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	080073ec 	.word	0x080073ec

080047a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047aa:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047b4:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	3301      	adds	r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d10c      	bne.n	80047e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047c8:	4a17      	ldr	r2, [pc, #92]	; (8004828 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	4a14      	ldr	r2, [pc, #80]	; (8004824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047d2:	68d2      	ldr	r2, [r2, #12]
 80047d4:	0a12      	lsrs	r2, r2, #8
 80047d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	617b      	str	r3, [r7, #20]
    break;
 80047e0:	e00c      	b.n	80047fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047e2:	4a12      	ldr	r2, [pc, #72]	; (800482c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	4a0e      	ldr	r2, [pc, #56]	; (8004824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ec:	68d2      	ldr	r2, [r2, #12]
 80047ee:	0a12      	lsrs	r2, r2, #8
 80047f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	617b      	str	r3, [r7, #20]
    break;
 80047fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047fc:	4b09      	ldr	r3, [pc, #36]	; (8004824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	0e5b      	lsrs	r3, r3, #25
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	3301      	adds	r3, #1
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004816:	687b      	ldr	r3, [r7, #4]
}
 8004818:	4618      	mov	r0, r3
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40021000 	.word	0x40021000
 8004828:	016e3600 	.word	0x016e3600
 800482c:	00f42400 	.word	0x00f42400

08004830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004838:	2300      	movs	r3, #0
 800483a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800483c:	2300      	movs	r3, #0
 800483e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8098 	beq.w	800497e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484e:	2300      	movs	r3, #0
 8004850:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004852:	4b43      	ldr	r3, [pc, #268]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10d      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485e:	4b40      	ldr	r3, [pc, #256]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004862:	4a3f      	ldr	r2, [pc, #252]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004868:	6593      	str	r3, [r2, #88]	; 0x58
 800486a:	4b3d      	ldr	r3, [pc, #244]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004876:	2301      	movs	r3, #1
 8004878:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800487a:	4b3a      	ldr	r3, [pc, #232]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a39      	ldr	r2, [pc, #228]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004884:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004886:	f7fc fe7d 	bl	8001584 <HAL_GetTick>
 800488a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800488c:	e009      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488e:	f7fc fe79 	bl	8001584 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d902      	bls.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	74fb      	strb	r3, [r7, #19]
        break;
 80048a0:	e005      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048a2:	4b30      	ldr	r3, [pc, #192]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0ef      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048ae:	7cfb      	ldrb	r3, [r7, #19]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d159      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048b4:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01e      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d019      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048d0:	4b23      	ldr	r3, [pc, #140]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048dc:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e2:	4a1f      	ldr	r2, [pc, #124]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ec:	4b1c      	ldr	r3, [pc, #112]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	4a1b      	ldr	r2, [pc, #108]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048fc:	4a18      	ldr	r2, [pc, #96]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490e:	f7fc fe39 	bl	8001584 <HAL_GetTick>
 8004912:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004914:	e00b      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004916:	f7fc fe35 	bl	8001584 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f241 3288 	movw	r2, #5000	; 0x1388
 8004924:	4293      	cmp	r3, r2
 8004926:	d902      	bls.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	74fb      	strb	r3, [r7, #19]
            break;
 800492c:	e006      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0ec      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004950:	4903      	ldr	r1, [pc, #12]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004958:	e008      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800495a:	7cfb      	ldrb	r3, [r7, #19]
 800495c:	74bb      	strb	r3, [r7, #18]
 800495e:	e005      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	7cfb      	ldrb	r3, [r7, #19]
 800496a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800496c:	7c7b      	ldrb	r3, [r7, #17]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d105      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004972:	4ba7      	ldr	r3, [pc, #668]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004976:	4aa6      	ldr	r2, [pc, #664]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800497c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800498a:	4ba1      	ldr	r3, [pc, #644]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004990:	f023 0203 	bic.w	r2, r3, #3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	499d      	ldr	r1, [pc, #628]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049ac:	4b98      	ldr	r3, [pc, #608]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b2:	f023 020c 	bic.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	4995      	ldr	r1, [pc, #596]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049ce:	4b90      	ldr	r3, [pc, #576]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	498c      	ldr	r1, [pc, #560]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049f0:	4b87      	ldr	r3, [pc, #540]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	4984      	ldr	r1, [pc, #528]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a12:	4b7f      	ldr	r3, [pc, #508]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	497b      	ldr	r1, [pc, #492]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a34:	4b76      	ldr	r3, [pc, #472]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	4973      	ldr	r1, [pc, #460]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a56:	4b6e      	ldr	r3, [pc, #440]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	496a      	ldr	r1, [pc, #424]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a78:	4b65      	ldr	r3, [pc, #404]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	4962      	ldr	r1, [pc, #392]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a9a:	4b5d      	ldr	r3, [pc, #372]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	4959      	ldr	r1, [pc, #356]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004abc:	4b54      	ldr	r3, [pc, #336]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ac2:	f023 0203 	bic.w	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	4951      	ldr	r1, [pc, #324]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ade:	4b4c      	ldr	r3, [pc, #304]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	4948      	ldr	r1, [pc, #288]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d015      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b00:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	4940      	ldr	r1, [pc, #256]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1e:	d105      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b20:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a3a      	ldr	r2, [pc, #232]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d015      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b38:	4b35      	ldr	r3, [pc, #212]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	4932      	ldr	r1, [pc, #200]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b56:	d105      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b58:	4b2d      	ldr	r3, [pc, #180]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a2c      	ldr	r2, [pc, #176]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b62:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b70:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	4924      	ldr	r1, [pc, #144]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b8e:	d105      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b90:	4b1f      	ldr	r3, [pc, #124]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a1e      	ldr	r2, [pc, #120]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b9a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ba8:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	4916      	ldr	r1, [pc, #88]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc6:	d105      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc8:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a10      	ldr	r2, [pc, #64]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d019      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	4908      	ldr	r1, [pc, #32]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfe:	d109      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a02      	ldr	r2, [pc, #8]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]
 8004c0c:	e002      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d015      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c20:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	4926      	ldr	r1, [pc, #152]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c3e:	d105      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c40:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a20      	ldr	r2, [pc, #128]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d015      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c58:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c66:	4918      	ldr	r1, [pc, #96]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c76:	d105      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c78:	4b13      	ldr	r3, [pc, #76]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a12      	ldr	r2, [pc, #72]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c82:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d015      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c90:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9e:	490a      	ldr	r1, [pc, #40]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cae:	d105      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000

08004ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e09d      	b.n	8004e1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d108      	bne.n	8004cf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cee:	d009      	beq.n	8004d04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	61da      	str	r2, [r3, #28]
 8004cf6:	e005      	b.n	8004d04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fc fa1a 	bl	8001158 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d44:	d902      	bls.n	8004d4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e002      	b.n	8004d52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d5a:	d007      	beq.n	8004d6c <HAL_SPI_Init+0xa0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d64:	d002      	beq.n	8004d6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	ea42 0103 	orr.w	r1, r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	f003 0204 	and.w	r2, r3, #4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004de8:	ea42 0103 	orr.w	r1, r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e3c:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e44:	7dbb      	ldrb	r3, [r7, #22]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d00d      	beq.n	8004e66 <HAL_SPI_TransmitReceive_IT+0x42>
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e50:	d106      	bne.n	8004e60 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d102      	bne.n	8004e60 <HAL_SPI_TransmitReceive_IT+0x3c>
 8004e5a:	7dbb      	ldrb	r3, [r7, #22]
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d002      	beq.n	8004e66 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8004e60:	2302      	movs	r3, #2
 8004e62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e64:	e07d      	b.n	8004f62 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_SPI_TransmitReceive_IT+0x54>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_SPI_TransmitReceive_IT+0x54>
 8004e72:	887b      	ldrh	r3, [r7, #2]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e7c:	e071      	b.n	8004f62 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_SPI_TransmitReceive_IT+0x68>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e06b      	b.n	8004f64 <HAL_SPI_TransmitReceive_IT+0x140>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d003      	beq.n	8004ea8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2205      	movs	r2, #5
 8004ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	887a      	ldrh	r2, [r7, #2]
 8004eb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	887a      	ldrh	r2, [r7, #2]
 8004ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	887a      	ldrh	r2, [r7, #2]
 8004eca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	887a      	ldrh	r2, [r7, #2]
 8004ed2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ede:	d906      	bls.n	8004eee <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a23      	ldr	r2, [pc, #140]	; (8004f70 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8004ee4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a22      	ldr	r2, [pc, #136]	; (8004f74 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004eea:	651a      	str	r2, [r3, #80]	; 0x50
 8004eec:	e005      	b.n	8004efa <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a21      	ldr	r2, [pc, #132]	; (8004f78 <HAL_SPI_TransmitReceive_IT+0x154>)
 8004ef2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <HAL_SPI_TransmitReceive_IT+0x158>)
 8004ef8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f02:	d802      	bhi.n	8004f0a <HAL_SPI_TransmitReceive_IT+0xe6>
 8004f04:	887b      	ldrh	r3, [r7, #2]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d908      	bls.n	8004f1c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	e007      	b.n	8004f2c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f2a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d007      	beq.n	8004f4a <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f48:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004f60:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	0800530b 	.word	0x0800530b
 8004f74:	08005371 	.word	0x08005371
 8004f78:	080051bb 	.word	0x080051bb
 8004f7c:	08005279 	.word	0x08005279

08004f80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	4798      	blx	r3
    return;
 8004fbe:	e0ce      	b.n	800515e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <HAL_SPI_IRQHandler+0x5e>
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d004      	beq.n	8004fde <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
    return;
 8004fdc:	e0bf      	b.n	800515e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <HAL_SPI_IRQHandler+0x7e>
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d105      	bne.n	8004ffe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80b0 	beq.w	800515e <HAL_SPI_IRQHandler+0x1de>
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80aa 	beq.w	800515e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d023      	beq.n	800505c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b03      	cmp	r3, #3
 800501e:	d011      	beq.n	8005044 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005024:	f043 0204 	orr.w	r2, r3, #4
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	e00b      	b.n	800505c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005044:	2300      	movs	r3, #0
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	613b      	str	r3, [r7, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	693b      	ldr	r3, [r7, #16]
        return;
 800505a:	e080      	b.n	800515e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d014      	beq.n	8005090 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506a:	f043 0201 	orr.w	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00c      	beq.n	80050b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509e:	f043 0208 	orr.w	r2, r3, #8
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	60bb      	str	r3, [r7, #8]
 80050b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d04f      	beq.n	800515c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <HAL_SPI_IRQHandler+0x168>
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d034      	beq.n	8005152 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0203 	bic.w	r2, r2, #3
 80050f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d011      	beq.n	8005124 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	4a17      	ldr	r2, [pc, #92]	; (8005164 <HAL_SPI_IRQHandler+0x1e4>)
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	4618      	mov	r0, r3
 800510e:	f7fc fc1f 	bl	8001950 <HAL_DMA_Abort_IT>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005128:	2b00      	cmp	r3, #0
 800512a:	d016      	beq.n	800515a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005130:	4a0c      	ldr	r2, [pc, #48]	; (8005164 <HAL_SPI_IRQHandler+0x1e4>)
 8005132:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005138:	4618      	mov	r0, r3
 800513a:	f7fc fc09 	bl	8001950 <HAL_DMA_Abort_IT>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005148:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005150:	e003      	b.n	800515a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f812 	bl	800517c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005158:	e000      	b.n	800515c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800515a:	bf00      	nop
    return;
 800515c:	bf00      	nop
  }
}
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	08005191 	.word	0x08005191

08005168 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7ff ffe5 	bl	800517c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d923      	bls.n	8005216 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	b292      	uxth	r2, r2
 80051da:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	1c9a      	adds	r2, r3, #2
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b02      	subs	r3, #2
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d11f      	bne.n	8005244 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005212:	605a      	str	r2, [r3, #4]
 8005214:	e016      	b.n	8005244 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f103 020c 	add.w	r2, r3, #12
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	7812      	ldrb	r2, [r2, #0]
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10f      	bne.n	8005270 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800525e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa14 	bl	8005698 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b01      	cmp	r3, #1
 8005288:	d912      	bls.n	80052b0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	881a      	ldrh	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	1c9a      	adds	r2, r3, #2
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b02      	subs	r3, #2
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052ae:	e012      	b.n	80052d6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	7812      	ldrb	r2, [r2, #0]
 80052bc:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d110      	bne.n	8005302 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ee:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f9cb 	bl	8005698 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	b292      	uxth	r2, r2
 800531e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	1c9a      	adds	r2, r3, #2
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10f      	bne.n	8005368 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005356:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f998 	bl	8005698 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	881a      	ldrh	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	1c9a      	adds	r2, r3, #2
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d110      	bne.n	80053c8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053b4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f968 	bl	8005698 <SPI_CloseRxTx_ISR>
    }
  }
}
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053e0:	f7fc f8d0 	bl	8001584 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053f0:	f7fc f8c8 	bl	8001584 <HAL_GetTick>
 80053f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053f6:	4b39      	ldr	r3, [pc, #228]	; (80054dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	015b      	lsls	r3, r3, #5
 80053fc:	0d1b      	lsrs	r3, r3, #20
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	fb02 f303 	mul.w	r3, r2, r3
 8005404:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005406:	e054      	b.n	80054b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d050      	beq.n	80054b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005410:	f7fc f8b8 	bl	8001584 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	429a      	cmp	r2, r3
 800541e:	d902      	bls.n	8005426 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d13d      	bne.n	80054a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005434:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800543e:	d111      	bne.n	8005464 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005448:	d004      	beq.n	8005454 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005452:	d107      	bne.n	8005464 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800546c:	d10f      	bne.n	800548e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800548c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e017      	b.n	80054d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4013      	ands	r3, r2
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	bf0c      	ite	eq
 80054c2:	2301      	moveq	r3, #1
 80054c4:	2300      	movne	r3, #0
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d19b      	bne.n	8005408 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000004 	.word	0x20000004

080054e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	; 0x28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054f2:	f7fc f847 	bl	8001584 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	4413      	add	r3, r2
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005502:	f7fc f83f 	bl	8001584 <HAL_GetTick>
 8005506:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	330c      	adds	r3, #12
 800550e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005510:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	00da      	lsls	r2, r3, #3
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	0d1b      	lsrs	r3, r3, #20
 8005520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005528:	e060      	b.n	80055ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005530:	d107      	bne.n	8005542 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005540:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d050      	beq.n	80055ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800554a:	f7fc f81b 	bl	8001584 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005556:	429a      	cmp	r2, r3
 8005558:	d902      	bls.n	8005560 <SPI_WaitFifoStateUntilTimeout+0x80>
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d13d      	bne.n	80055dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800556e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005578:	d111      	bne.n	800559e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005582:	d004      	beq.n	800558e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558c:	d107      	bne.n	800559e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a6:	d10f      	bne.n	80055c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e010      	b.n	80055fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4013      	ands	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d196      	bne.n	800552a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3728      	adds	r7, #40	; 0x28
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000004 	.word	0x20000004

0800560c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f7ff ff5b 	bl	80054e0 <SPI_WaitFifoStateUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005634:	f043 0220 	orr.w	r2, r3, #32
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e027      	b.n	8005690 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2200      	movs	r2, #0
 8005648:	2180      	movs	r1, #128	; 0x80
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff fec0 	bl	80053d0 <SPI_WaitFlagStateUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d007      	beq.n	8005666 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e014      	b.n	8005690 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2200      	movs	r2, #0
 800566e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7ff ff34 	bl	80054e0 <SPI_WaitFifoStateUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e000      	b.n	8005690 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056a0:	f7fb ff70 	bl	8001584 <HAL_GetTick>
 80056a4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0220 	bic.w	r2, r2, #32
 80056b4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	2164      	movs	r1, #100	; 0x64
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff ffa6 	bl	800560c <SPI_EndRxTxTransaction>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ca:	f043 0220 	orr.w	r2, r3, #32
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d115      	bne.n	8005706 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d107      	bne.n	80056f6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff fd3a 	bl	8005168 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80056f4:	e00e      	b.n	8005714 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fb f9e8 	bl	8000ad4 <HAL_SPI_TxRxCpltCallback>
}
 8005704:	e006      	b.n	8005714 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff fd34 	bl	800517c <HAL_SPI_ErrorCallback>
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e042      	b.n	80057b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7fb fcb1 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2224      	movs	r2, #36	; 0x24
 800574a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0201 	bic.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fb24 	bl	8005db4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f825 	bl	80057bc <UART_SetConfig>
 8005772:	4603      	mov	r3, r0
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e01b      	b.n	80057b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800578a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800579a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fba3 	bl	8005ef8 <UART_CheckIdleState>
 80057b2:	4603      	mov	r3, r0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c0:	b08c      	sub	sp, #48	; 0x30
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	431a      	orrs	r2, r3
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	431a      	orrs	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4baa      	ldr	r3, [pc, #680]	; (8005a94 <UART_SetConfig+0x2d8>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a9f      	ldr	r2, [pc, #636]	; (8005a98 <UART_SetConfig+0x2dc>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d004      	beq.n	8005828 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005824:	4313      	orrs	r3, r2
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005832:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800583c:	430b      	orrs	r3, r1
 800583e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	f023 010f 	bic.w	r1, r3, #15
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a90      	ldr	r2, [pc, #576]	; (8005a9c <UART_SetConfig+0x2e0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d125      	bne.n	80058ac <UART_SetConfig+0xf0>
 8005860:	4b8f      	ldr	r3, [pc, #572]	; (8005aa0 <UART_SetConfig+0x2e4>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b03      	cmp	r3, #3
 800586c:	d81a      	bhi.n	80058a4 <UART_SetConfig+0xe8>
 800586e:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <UART_SetConfig+0xb8>)
 8005870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005874:	08005885 	.word	0x08005885
 8005878:	08005895 	.word	0x08005895
 800587c:	0800588d 	.word	0x0800588d
 8005880:	0800589d 	.word	0x0800589d
 8005884:	2301      	movs	r3, #1
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800588a:	e116      	b.n	8005aba <UART_SetConfig+0x2fe>
 800588c:	2302      	movs	r3, #2
 800588e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005892:	e112      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005894:	2304      	movs	r3, #4
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800589a:	e10e      	b.n	8005aba <UART_SetConfig+0x2fe>
 800589c:	2308      	movs	r3, #8
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a2:	e10a      	b.n	8005aba <UART_SetConfig+0x2fe>
 80058a4:	2310      	movs	r3, #16
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058aa:	e106      	b.n	8005aba <UART_SetConfig+0x2fe>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a7c      	ldr	r2, [pc, #496]	; (8005aa4 <UART_SetConfig+0x2e8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d138      	bne.n	8005928 <UART_SetConfig+0x16c>
 80058b6:	4b7a      	ldr	r3, [pc, #488]	; (8005aa0 <UART_SetConfig+0x2e4>)
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058bc:	f003 030c 	and.w	r3, r3, #12
 80058c0:	2b0c      	cmp	r3, #12
 80058c2:	d82d      	bhi.n	8005920 <UART_SetConfig+0x164>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <UART_SetConfig+0x110>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	08005901 	.word	0x08005901
 80058d0:	08005921 	.word	0x08005921
 80058d4:	08005921 	.word	0x08005921
 80058d8:	08005921 	.word	0x08005921
 80058dc:	08005911 	.word	0x08005911
 80058e0:	08005921 	.word	0x08005921
 80058e4:	08005921 	.word	0x08005921
 80058e8:	08005921 	.word	0x08005921
 80058ec:	08005909 	.word	0x08005909
 80058f0:	08005921 	.word	0x08005921
 80058f4:	08005921 	.word	0x08005921
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005919 	.word	0x08005919
 8005900:	2300      	movs	r3, #0
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005906:	e0d8      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005908:	2302      	movs	r3, #2
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590e:	e0d4      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005910:	2304      	movs	r3, #4
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e0d0      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005918:	2308      	movs	r3, #8
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e0cc      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005920:	2310      	movs	r3, #16
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e0c8      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a5e      	ldr	r2, [pc, #376]	; (8005aa8 <UART_SetConfig+0x2ec>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d125      	bne.n	800597e <UART_SetConfig+0x1c2>
 8005932:	4b5b      	ldr	r3, [pc, #364]	; (8005aa0 <UART_SetConfig+0x2e4>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800593c:	2b30      	cmp	r3, #48	; 0x30
 800593e:	d016      	beq.n	800596e <UART_SetConfig+0x1b2>
 8005940:	2b30      	cmp	r3, #48	; 0x30
 8005942:	d818      	bhi.n	8005976 <UART_SetConfig+0x1ba>
 8005944:	2b20      	cmp	r3, #32
 8005946:	d00a      	beq.n	800595e <UART_SetConfig+0x1a2>
 8005948:	2b20      	cmp	r3, #32
 800594a:	d814      	bhi.n	8005976 <UART_SetConfig+0x1ba>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <UART_SetConfig+0x19a>
 8005950:	2b10      	cmp	r3, #16
 8005952:	d008      	beq.n	8005966 <UART_SetConfig+0x1aa>
 8005954:	e00f      	b.n	8005976 <UART_SetConfig+0x1ba>
 8005956:	2300      	movs	r3, #0
 8005958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800595c:	e0ad      	b.n	8005aba <UART_SetConfig+0x2fe>
 800595e:	2302      	movs	r3, #2
 8005960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005964:	e0a9      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005966:	2304      	movs	r3, #4
 8005968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596c:	e0a5      	b.n	8005aba <UART_SetConfig+0x2fe>
 800596e:	2308      	movs	r3, #8
 8005970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005974:	e0a1      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005976:	2310      	movs	r3, #16
 8005978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597c:	e09d      	b.n	8005aba <UART_SetConfig+0x2fe>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a4a      	ldr	r2, [pc, #296]	; (8005aac <UART_SetConfig+0x2f0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d125      	bne.n	80059d4 <UART_SetConfig+0x218>
 8005988:	4b45      	ldr	r3, [pc, #276]	; (8005aa0 <UART_SetConfig+0x2e4>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005992:	2bc0      	cmp	r3, #192	; 0xc0
 8005994:	d016      	beq.n	80059c4 <UART_SetConfig+0x208>
 8005996:	2bc0      	cmp	r3, #192	; 0xc0
 8005998:	d818      	bhi.n	80059cc <UART_SetConfig+0x210>
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d00a      	beq.n	80059b4 <UART_SetConfig+0x1f8>
 800599e:	2b80      	cmp	r3, #128	; 0x80
 80059a0:	d814      	bhi.n	80059cc <UART_SetConfig+0x210>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <UART_SetConfig+0x1f0>
 80059a6:	2b40      	cmp	r3, #64	; 0x40
 80059a8:	d008      	beq.n	80059bc <UART_SetConfig+0x200>
 80059aa:	e00f      	b.n	80059cc <UART_SetConfig+0x210>
 80059ac:	2300      	movs	r3, #0
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b2:	e082      	b.n	8005aba <UART_SetConfig+0x2fe>
 80059b4:	2302      	movs	r3, #2
 80059b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ba:	e07e      	b.n	8005aba <UART_SetConfig+0x2fe>
 80059bc:	2304      	movs	r3, #4
 80059be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c2:	e07a      	b.n	8005aba <UART_SetConfig+0x2fe>
 80059c4:	2308      	movs	r3, #8
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ca:	e076      	b.n	8005aba <UART_SetConfig+0x2fe>
 80059cc:	2310      	movs	r3, #16
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d2:	e072      	b.n	8005aba <UART_SetConfig+0x2fe>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a35      	ldr	r2, [pc, #212]	; (8005ab0 <UART_SetConfig+0x2f4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d12a      	bne.n	8005a34 <UART_SetConfig+0x278>
 80059de:	4b30      	ldr	r3, [pc, #192]	; (8005aa0 <UART_SetConfig+0x2e4>)
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ec:	d01a      	beq.n	8005a24 <UART_SetConfig+0x268>
 80059ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059f2:	d81b      	bhi.n	8005a2c <UART_SetConfig+0x270>
 80059f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f8:	d00c      	beq.n	8005a14 <UART_SetConfig+0x258>
 80059fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fe:	d815      	bhi.n	8005a2c <UART_SetConfig+0x270>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <UART_SetConfig+0x250>
 8005a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a08:	d008      	beq.n	8005a1c <UART_SetConfig+0x260>
 8005a0a:	e00f      	b.n	8005a2c <UART_SetConfig+0x270>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a12:	e052      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a14:	2302      	movs	r3, #2
 8005a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a1a:	e04e      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a22:	e04a      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a24:	2308      	movs	r3, #8
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2a:	e046      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a32:	e042      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <UART_SetConfig+0x2dc>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d13a      	bne.n	8005ab4 <UART_SetConfig+0x2f8>
 8005a3e:	4b18      	ldr	r3, [pc, #96]	; (8005aa0 <UART_SetConfig+0x2e4>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a4c:	d01a      	beq.n	8005a84 <UART_SetConfig+0x2c8>
 8005a4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a52:	d81b      	bhi.n	8005a8c <UART_SetConfig+0x2d0>
 8005a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a58:	d00c      	beq.n	8005a74 <UART_SetConfig+0x2b8>
 8005a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5e:	d815      	bhi.n	8005a8c <UART_SetConfig+0x2d0>
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <UART_SetConfig+0x2b0>
 8005a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a68:	d008      	beq.n	8005a7c <UART_SetConfig+0x2c0>
 8005a6a:	e00f      	b.n	8005a8c <UART_SetConfig+0x2d0>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a72:	e022      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a74:	2302      	movs	r3, #2
 8005a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a7a:	e01e      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a82:	e01a      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a84:	2308      	movs	r3, #8
 8005a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8a:	e016      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a92:	e012      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a94:	cfff69f3 	.word	0xcfff69f3
 8005a98:	40008000 	.word	0x40008000
 8005a9c:	40013800 	.word	0x40013800
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40004400 	.word	0x40004400
 8005aa8:	40004800 	.word	0x40004800
 8005aac:	40004c00 	.word	0x40004c00
 8005ab0:	40005000 	.word	0x40005000
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4aae      	ldr	r2, [pc, #696]	; (8005d78 <UART_SetConfig+0x5bc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	f040 8097 	bne.w	8005bf4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ac6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d823      	bhi.n	8005b16 <UART_SetConfig+0x35a>
 8005ace:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <UART_SetConfig+0x318>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005af9 	.word	0x08005af9
 8005ad8:	08005b17 	.word	0x08005b17
 8005adc:	08005b01 	.word	0x08005b01
 8005ae0:	08005b17 	.word	0x08005b17
 8005ae4:	08005b07 	.word	0x08005b07
 8005ae8:	08005b17 	.word	0x08005b17
 8005aec:	08005b17 	.word	0x08005b17
 8005af0:	08005b17 	.word	0x08005b17
 8005af4:	08005b0f 	.word	0x08005b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af8:	f7fe fe28 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 8005afc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005afe:	e010      	b.n	8005b22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b00:	4b9e      	ldr	r3, [pc, #632]	; (8005d7c <UART_SetConfig+0x5c0>)
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b04:	e00d      	b.n	8005b22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b06:	f7fe fdb3 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 8005b0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b0c:	e009      	b.n	8005b22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b14:	e005      	b.n	8005b22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8130 	beq.w	8005d8a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	4a94      	ldr	r2, [pc, #592]	; (8005d80 <UART_SetConfig+0x5c4>)
 8005b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	4413      	add	r3, r2
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d305      	bcc.n	8005b5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d903      	bls.n	8005b62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b60:	e113      	b.n	8005d8a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	2200      	movs	r2, #0
 8005b66:	60bb      	str	r3, [r7, #8]
 8005b68:	60fa      	str	r2, [r7, #12]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	4a84      	ldr	r2, [pc, #528]	; (8005d80 <UART_SetConfig+0x5c4>)
 8005b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2200      	movs	r2, #0
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b84:	f7fa fb9c 	bl	80002c0 <__aeabi_uldivmod>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4619      	mov	r1, r3
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	020b      	lsls	r3, r1, #8
 8005b9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b9e:	0202      	lsls	r2, r0, #8
 8005ba0:	6979      	ldr	r1, [r7, #20]
 8005ba2:	6849      	ldr	r1, [r1, #4]
 8005ba4:	0849      	lsrs	r1, r1, #1
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	460c      	mov	r4, r1
 8005baa:	4605      	mov	r5, r0
 8005bac:	eb12 0804 	adds.w	r8, r2, r4
 8005bb0:	eb43 0905 	adc.w	r9, r3, r5
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	469a      	mov	sl, r3
 8005bbc:	4693      	mov	fp, r2
 8005bbe:	4652      	mov	r2, sl
 8005bc0:	465b      	mov	r3, fp
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	f7fa fb7b 	bl	80002c0 <__aeabi_uldivmod>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4613      	mov	r3, r2
 8005bd0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bd8:	d308      	bcc.n	8005bec <UART_SetConfig+0x430>
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005be0:	d204      	bcs.n	8005bec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6a3a      	ldr	r2, [r7, #32]
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	e0ce      	b.n	8005d8a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bf2:	e0ca      	b.n	8005d8a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfc:	d166      	bne.n	8005ccc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005bfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d827      	bhi.n	8005c56 <UART_SetConfig+0x49a>
 8005c06:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <UART_SetConfig+0x450>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c39 	.word	0x08005c39
 8005c14:	08005c41 	.word	0x08005c41
 8005c18:	08005c57 	.word	0x08005c57
 8005c1c:	08005c47 	.word	0x08005c47
 8005c20:	08005c57 	.word	0x08005c57
 8005c24:	08005c57 	.word	0x08005c57
 8005c28:	08005c57 	.word	0x08005c57
 8005c2c:	08005c4f 	.word	0x08005c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c30:	f7fe fd8c 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 8005c34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c36:	e014      	b.n	8005c62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c38:	f7fe fd9e 	bl	8004778 <HAL_RCC_GetPCLK2Freq>
 8005c3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c3e:	e010      	b.n	8005c62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c40:	4b4e      	ldr	r3, [pc, #312]	; (8005d7c <UART_SetConfig+0x5c0>)
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c44:	e00d      	b.n	8005c62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c46:	f7fe fd13 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 8005c4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c4c:	e009      	b.n	8005c62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c54:	e005      	b.n	8005c62 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8090 	beq.w	8005d8a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	4a44      	ldr	r2, [pc, #272]	; (8005d80 <UART_SetConfig+0x5c4>)
 8005c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c7c:	005a      	lsls	r2, r3, #1
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	441a      	add	r2, r3
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	2b0f      	cmp	r3, #15
 8005c94:	d916      	bls.n	8005cc4 <UART_SetConfig+0x508>
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c9c:	d212      	bcs.n	8005cc4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f023 030f 	bic.w	r3, r3, #15
 8005ca6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	8bfb      	ldrh	r3, [r7, #30]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	8bfa      	ldrh	r2, [r7, #30]
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	e062      	b.n	8005d8a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cca:	e05e      	b.n	8005d8a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ccc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d828      	bhi.n	8005d26 <UART_SetConfig+0x56a>
 8005cd4:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <UART_SetConfig+0x520>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005d01 	.word	0x08005d01
 8005ce0:	08005d09 	.word	0x08005d09
 8005ce4:	08005d11 	.word	0x08005d11
 8005ce8:	08005d27 	.word	0x08005d27
 8005cec:	08005d17 	.word	0x08005d17
 8005cf0:	08005d27 	.word	0x08005d27
 8005cf4:	08005d27 	.word	0x08005d27
 8005cf8:	08005d27 	.word	0x08005d27
 8005cfc:	08005d1f 	.word	0x08005d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d00:	f7fe fd24 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 8005d04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d06:	e014      	b.n	8005d32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d08:	f7fe fd36 	bl	8004778 <HAL_RCC_GetPCLK2Freq>
 8005d0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d0e:	e010      	b.n	8005d32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d10:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <UART_SetConfig+0x5c0>)
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d14:	e00d      	b.n	8005d32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d16:	f7fe fcab 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 8005d1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d1c:	e009      	b.n	8005d32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d24:	e005      	b.n	8005d32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d30:	bf00      	nop
    }

    if (pclk != 0U)
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d028      	beq.n	8005d8a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	4a10      	ldr	r2, [pc, #64]	; (8005d80 <UART_SetConfig+0x5c4>)
 8005d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d42:	461a      	mov	r2, r3
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	085b      	lsrs	r3, r3, #1
 8005d50:	441a      	add	r2, r3
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	2b0f      	cmp	r3, #15
 8005d60:	d910      	bls.n	8005d84 <UART_SetConfig+0x5c8>
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d68:	d20c      	bcs.n	8005d84 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60da      	str	r2, [r3, #12]
 8005d74:	e009      	b.n	8005d8a <UART_SetConfig+0x5ce>
 8005d76:	bf00      	nop
 8005d78:	40008000 	.word	0x40008000
 8005d7c:	00f42400 	.word	0x00f42400
 8005d80:	080073f4 	.word	0x080073f4
      }
      else
      {
        ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2200      	movs	r2, #0
 8005da4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005da6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3730      	adds	r7, #48	; 0x30
 8005dae:	46bd      	mov	sp, r7
 8005db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01a      	beq.n	8005eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb2:	d10a      	bne.n	8005eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	605a      	str	r2, [r3, #4]
  }
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b098      	sub	sp, #96	; 0x60
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f08:	f7fb fb3c 	bl	8001584 <HAL_GetTick>
 8005f0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d12f      	bne.n	8005f7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f24:	2200      	movs	r2, #0
 8005f26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f88e 	bl	800604c <UART_WaitOnFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d022      	beq.n	8005f7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f54:	647b      	str	r3, [r7, #68]	; 0x44
 8005f56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e6      	bne.n	8005f36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e063      	b.n	8006044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d149      	bne.n	800601e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f92:	2200      	movs	r2, #0
 8005f94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f857 	bl	800604c <UART_WaitOnFlagUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d03c      	beq.n	800601e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e6      	bne.n	8005fa4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff6:	61fa      	str	r2, [r7, #28]
 8005ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	69b9      	ldr	r1, [r7, #24]
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	617b      	str	r3, [r7, #20]
   return(result);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e5      	bne.n	8005fd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e012      	b.n	8006044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3758      	adds	r7, #88	; 0x58
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	4613      	mov	r3, r2
 800605a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605c:	e04f      	b.n	80060fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d04b      	beq.n	80060fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006066:	f7fb fa8d 	bl	8001584 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	429a      	cmp	r2, r3
 8006074:	d302      	bcc.n	800607c <UART_WaitOnFlagUntilTimeout+0x30>
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e04e      	b.n	800611e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d037      	beq.n	80060fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b80      	cmp	r3, #128	; 0x80
 8006092:	d034      	beq.n	80060fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d031      	beq.n	80060fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d110      	bne.n	80060ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2208      	movs	r2, #8
 80060ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f838 	bl	8006126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2208      	movs	r2, #8
 80060ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e029      	b.n	800611e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d8:	d111      	bne.n	80060fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f81e 	bl	8006126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e00f      	b.n	800611e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69da      	ldr	r2, [r3, #28]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4013      	ands	r3, r2
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	429a      	cmp	r2, r3
 800610c:	bf0c      	ite	eq
 800610e:	2301      	moveq	r3, #1
 8006110:	2300      	movne	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	461a      	mov	r2, r3
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	429a      	cmp	r2, r3
 800611a:	d0a0      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006126:	b480      	push	{r7}
 8006128:	b095      	sub	sp, #84	; 0x54
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614c:	643b      	str	r3, [r7, #64]	; 0x40
 800614e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006152:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e6      	bne.n	800612e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	64bb      	str	r3, [r7, #72]	; 0x48
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3308      	adds	r3, #8
 8006182:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006184:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800618a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e3      	bne.n	8006160 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d118      	bne.n	80061d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f023 0310 	bic.w	r3, r3, #16
 80061b4:	647b      	str	r3, [r7, #68]	; 0x44
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	6979      	ldr	r1, [r7, #20]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	613b      	str	r3, [r7, #16]
   return(result);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e6      	bne.n	80061a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80061e6:	bf00      	nop
 80061e8:	3754      	adds	r7, #84	; 0x54
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b085      	sub	sp, #20
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_UARTEx_DisableFifoMode+0x16>
 8006204:	2302      	movs	r3, #2
 8006206:	e027      	b.n	8006258 <HAL_UARTEx_DisableFifoMode+0x66>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2224      	movs	r2, #36	; 0x24
 8006214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006236:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006278:	2302      	movs	r3, #2
 800627a:	e02d      	b.n	80062d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2224      	movs	r2, #36	; 0x24
 8006288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0201 	bic.w	r2, r2, #1
 80062a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f84f 	bl	800635c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e02d      	b.n	8006354 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2224      	movs	r2, #36	; 0x24
 8006304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f811 	bl	800635c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006368:	2b00      	cmp	r3, #0
 800636a:	d108      	bne.n	800637e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800637c:	e031      	b.n	80063e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800637e:	2308      	movs	r3, #8
 8006380:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006382:	2308      	movs	r3, #8
 8006384:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	0e5b      	lsrs	r3, r3, #25
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f003 0307 	and.w	r3, r3, #7
 8006394:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	0f5b      	lsrs	r3, r3, #29
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	7b3a      	ldrb	r2, [r7, #12]
 80063aa:	4911      	ldr	r1, [pc, #68]	; (80063f0 <UARTEx_SetNbDataToProcess+0x94>)
 80063ac:	5c8a      	ldrb	r2, [r1, r2]
 80063ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063b2:	7b3a      	ldrb	r2, [r7, #12]
 80063b4:	490f      	ldr	r1, [pc, #60]	; (80063f4 <UARTEx_SetNbDataToProcess+0x98>)
 80063b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80063bc:	b29a      	uxth	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	7b7a      	ldrb	r2, [r7, #13]
 80063c8:	4909      	ldr	r1, [pc, #36]	; (80063f0 <UARTEx_SetNbDataToProcess+0x94>)
 80063ca:	5c8a      	ldrb	r2, [r1, r2]
 80063cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063d0:	7b7a      	ldrb	r2, [r7, #13]
 80063d2:	4908      	ldr	r1, [pc, #32]	; (80063f4 <UARTEx_SetNbDataToProcess+0x98>)
 80063d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80063da:	b29a      	uxth	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063e2:	bf00      	nop
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	0800740c 	.word	0x0800740c
 80063f4:	08007414 	.word	0x08007414

080063f8 <rand>:
 80063f8:	4b16      	ldr	r3, [pc, #88]	; (8006454 <rand+0x5c>)
 80063fa:	b510      	push	{r4, lr}
 80063fc:	681c      	ldr	r4, [r3, #0]
 80063fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006400:	b9b3      	cbnz	r3, 8006430 <rand+0x38>
 8006402:	2018      	movs	r0, #24
 8006404:	f000 fa22 	bl	800684c <malloc>
 8006408:	4602      	mov	r2, r0
 800640a:	6320      	str	r0, [r4, #48]	; 0x30
 800640c:	b920      	cbnz	r0, 8006418 <rand+0x20>
 800640e:	4b12      	ldr	r3, [pc, #72]	; (8006458 <rand+0x60>)
 8006410:	4812      	ldr	r0, [pc, #72]	; (800645c <rand+0x64>)
 8006412:	2152      	movs	r1, #82	; 0x52
 8006414:	f000 f9b0 	bl	8006778 <__assert_func>
 8006418:	4911      	ldr	r1, [pc, #68]	; (8006460 <rand+0x68>)
 800641a:	4b12      	ldr	r3, [pc, #72]	; (8006464 <rand+0x6c>)
 800641c:	e9c0 1300 	strd	r1, r3, [r0]
 8006420:	4b11      	ldr	r3, [pc, #68]	; (8006468 <rand+0x70>)
 8006422:	6083      	str	r3, [r0, #8]
 8006424:	230b      	movs	r3, #11
 8006426:	8183      	strh	r3, [r0, #12]
 8006428:	2100      	movs	r1, #0
 800642a:	2001      	movs	r0, #1
 800642c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006430:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006432:	480e      	ldr	r0, [pc, #56]	; (800646c <rand+0x74>)
 8006434:	690b      	ldr	r3, [r1, #16]
 8006436:	694c      	ldr	r4, [r1, #20]
 8006438:	4a0d      	ldr	r2, [pc, #52]	; (8006470 <rand+0x78>)
 800643a:	4358      	muls	r0, r3
 800643c:	fb02 0004 	mla	r0, r2, r4, r0
 8006440:	fba3 3202 	umull	r3, r2, r3, r2
 8006444:	3301      	adds	r3, #1
 8006446:	eb40 0002 	adc.w	r0, r0, r2
 800644a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800644e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006452:	bd10      	pop	{r4, pc}
 8006454:	20000068 	.word	0x20000068
 8006458:	0800741c 	.word	0x0800741c
 800645c:	08007433 	.word	0x08007433
 8006460:	abcd330e 	.word	0xabcd330e
 8006464:	e66d1234 	.word	0xe66d1234
 8006468:	0005deec 	.word	0x0005deec
 800646c:	5851f42d 	.word	0x5851f42d
 8006470:	4c957f2d 	.word	0x4c957f2d

08006474 <std>:
 8006474:	2300      	movs	r3, #0
 8006476:	b510      	push	{r4, lr}
 8006478:	4604      	mov	r4, r0
 800647a:	e9c0 3300 	strd	r3, r3, [r0]
 800647e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006482:	6083      	str	r3, [r0, #8]
 8006484:	8181      	strh	r1, [r0, #12]
 8006486:	6643      	str	r3, [r0, #100]	; 0x64
 8006488:	81c2      	strh	r2, [r0, #14]
 800648a:	6183      	str	r3, [r0, #24]
 800648c:	4619      	mov	r1, r3
 800648e:	2208      	movs	r2, #8
 8006490:	305c      	adds	r0, #92	; 0x5c
 8006492:	f000 f8f4 	bl	800667e <memset>
 8006496:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <std+0x58>)
 8006498:	6263      	str	r3, [r4, #36]	; 0x24
 800649a:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <std+0x5c>)
 800649c:	62a3      	str	r3, [r4, #40]	; 0x28
 800649e:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <std+0x60>)
 80064a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064a2:	4b0d      	ldr	r3, [pc, #52]	; (80064d8 <std+0x64>)
 80064a4:	6323      	str	r3, [r4, #48]	; 0x30
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <std+0x68>)
 80064a8:	6224      	str	r4, [r4, #32]
 80064aa:	429c      	cmp	r4, r3
 80064ac:	d006      	beq.n	80064bc <std+0x48>
 80064ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80064b2:	4294      	cmp	r4, r2
 80064b4:	d002      	beq.n	80064bc <std+0x48>
 80064b6:	33d0      	adds	r3, #208	; 0xd0
 80064b8:	429c      	cmp	r4, r3
 80064ba:	d105      	bne.n	80064c8 <std+0x54>
 80064bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c4:	f000 b954 	b.w	8006770 <__retarget_lock_init_recursive>
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	bf00      	nop
 80064cc:	080065f9 	.word	0x080065f9
 80064d0:	0800661b 	.word	0x0800661b
 80064d4:	08006653 	.word	0x08006653
 80064d8:	08006677 	.word	0x08006677
 80064dc:	200002fc 	.word	0x200002fc

080064e0 <stdio_exit_handler>:
 80064e0:	4a02      	ldr	r2, [pc, #8]	; (80064ec <stdio_exit_handler+0xc>)
 80064e2:	4903      	ldr	r1, [pc, #12]	; (80064f0 <stdio_exit_handler+0x10>)
 80064e4:	4803      	ldr	r0, [pc, #12]	; (80064f4 <stdio_exit_handler+0x14>)
 80064e6:	f000 b869 	b.w	80065bc <_fwalk_sglue>
 80064ea:	bf00      	nop
 80064ec:	20000010 	.word	0x20000010
 80064f0:	08006ac1 	.word	0x08006ac1
 80064f4:	2000001c 	.word	0x2000001c

080064f8 <cleanup_stdio>:
 80064f8:	6841      	ldr	r1, [r0, #4]
 80064fa:	4b0c      	ldr	r3, [pc, #48]	; (800652c <cleanup_stdio+0x34>)
 80064fc:	4299      	cmp	r1, r3
 80064fe:	b510      	push	{r4, lr}
 8006500:	4604      	mov	r4, r0
 8006502:	d001      	beq.n	8006508 <cleanup_stdio+0x10>
 8006504:	f000 fadc 	bl	8006ac0 <_fflush_r>
 8006508:	68a1      	ldr	r1, [r4, #8]
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <cleanup_stdio+0x38>)
 800650c:	4299      	cmp	r1, r3
 800650e:	d002      	beq.n	8006516 <cleanup_stdio+0x1e>
 8006510:	4620      	mov	r0, r4
 8006512:	f000 fad5 	bl	8006ac0 <_fflush_r>
 8006516:	68e1      	ldr	r1, [r4, #12]
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <cleanup_stdio+0x3c>)
 800651a:	4299      	cmp	r1, r3
 800651c:	d004      	beq.n	8006528 <cleanup_stdio+0x30>
 800651e:	4620      	mov	r0, r4
 8006520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006524:	f000 bacc 	b.w	8006ac0 <_fflush_r>
 8006528:	bd10      	pop	{r4, pc}
 800652a:	bf00      	nop
 800652c:	200002fc 	.word	0x200002fc
 8006530:	20000364 	.word	0x20000364
 8006534:	200003cc 	.word	0x200003cc

08006538 <global_stdio_init.part.0>:
 8006538:	b510      	push	{r4, lr}
 800653a:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <global_stdio_init.part.0+0x30>)
 800653c:	4c0b      	ldr	r4, [pc, #44]	; (800656c <global_stdio_init.part.0+0x34>)
 800653e:	4a0c      	ldr	r2, [pc, #48]	; (8006570 <global_stdio_init.part.0+0x38>)
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	4620      	mov	r0, r4
 8006544:	2200      	movs	r2, #0
 8006546:	2104      	movs	r1, #4
 8006548:	f7ff ff94 	bl	8006474 <std>
 800654c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006550:	2201      	movs	r2, #1
 8006552:	2109      	movs	r1, #9
 8006554:	f7ff ff8e 	bl	8006474 <std>
 8006558:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800655c:	2202      	movs	r2, #2
 800655e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006562:	2112      	movs	r1, #18
 8006564:	f7ff bf86 	b.w	8006474 <std>
 8006568:	20000434 	.word	0x20000434
 800656c:	200002fc 	.word	0x200002fc
 8006570:	080064e1 	.word	0x080064e1

08006574 <__sfp_lock_acquire>:
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <__sfp_lock_acquire+0x8>)
 8006576:	f000 b8fc 	b.w	8006772 <__retarget_lock_acquire_recursive>
 800657a:	bf00      	nop
 800657c:	2000043d 	.word	0x2000043d

08006580 <__sfp_lock_release>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__sfp_lock_release+0x8>)
 8006582:	f000 b8f7 	b.w	8006774 <__retarget_lock_release_recursive>
 8006586:	bf00      	nop
 8006588:	2000043d 	.word	0x2000043d

0800658c <__sinit>:
 800658c:	b510      	push	{r4, lr}
 800658e:	4604      	mov	r4, r0
 8006590:	f7ff fff0 	bl	8006574 <__sfp_lock_acquire>
 8006594:	6a23      	ldr	r3, [r4, #32]
 8006596:	b11b      	cbz	r3, 80065a0 <__sinit+0x14>
 8006598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659c:	f7ff bff0 	b.w	8006580 <__sfp_lock_release>
 80065a0:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <__sinit+0x28>)
 80065a2:	6223      	str	r3, [r4, #32]
 80065a4:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <__sinit+0x2c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f5      	bne.n	8006598 <__sinit+0xc>
 80065ac:	f7ff ffc4 	bl	8006538 <global_stdio_init.part.0>
 80065b0:	e7f2      	b.n	8006598 <__sinit+0xc>
 80065b2:	bf00      	nop
 80065b4:	080064f9 	.word	0x080064f9
 80065b8:	20000434 	.word	0x20000434

080065bc <_fwalk_sglue>:
 80065bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c0:	4607      	mov	r7, r0
 80065c2:	4688      	mov	r8, r1
 80065c4:	4614      	mov	r4, r2
 80065c6:	2600      	movs	r6, #0
 80065c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065cc:	f1b9 0901 	subs.w	r9, r9, #1
 80065d0:	d505      	bpl.n	80065de <_fwalk_sglue+0x22>
 80065d2:	6824      	ldr	r4, [r4, #0]
 80065d4:	2c00      	cmp	r4, #0
 80065d6:	d1f7      	bne.n	80065c8 <_fwalk_sglue+0xc>
 80065d8:	4630      	mov	r0, r6
 80065da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065de:	89ab      	ldrh	r3, [r5, #12]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d907      	bls.n	80065f4 <_fwalk_sglue+0x38>
 80065e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065e8:	3301      	adds	r3, #1
 80065ea:	d003      	beq.n	80065f4 <_fwalk_sglue+0x38>
 80065ec:	4629      	mov	r1, r5
 80065ee:	4638      	mov	r0, r7
 80065f0:	47c0      	blx	r8
 80065f2:	4306      	orrs	r6, r0
 80065f4:	3568      	adds	r5, #104	; 0x68
 80065f6:	e7e9      	b.n	80065cc <_fwalk_sglue+0x10>

080065f8 <__sread>:
 80065f8:	b510      	push	{r4, lr}
 80065fa:	460c      	mov	r4, r1
 80065fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006600:	f000 f868 	bl	80066d4 <_read_r>
 8006604:	2800      	cmp	r0, #0
 8006606:	bfab      	itete	ge
 8006608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800660a:	89a3      	ldrhlt	r3, [r4, #12]
 800660c:	181b      	addge	r3, r3, r0
 800660e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006612:	bfac      	ite	ge
 8006614:	6563      	strge	r3, [r4, #84]	; 0x54
 8006616:	81a3      	strhlt	r3, [r4, #12]
 8006618:	bd10      	pop	{r4, pc}

0800661a <__swrite>:
 800661a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661e:	461f      	mov	r7, r3
 8006620:	898b      	ldrh	r3, [r1, #12]
 8006622:	05db      	lsls	r3, r3, #23
 8006624:	4605      	mov	r5, r0
 8006626:	460c      	mov	r4, r1
 8006628:	4616      	mov	r6, r2
 800662a:	d505      	bpl.n	8006638 <__swrite+0x1e>
 800662c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006630:	2302      	movs	r3, #2
 8006632:	2200      	movs	r2, #0
 8006634:	f000 f83c 	bl	80066b0 <_lseek_r>
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800663e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	4632      	mov	r2, r6
 8006646:	463b      	mov	r3, r7
 8006648:	4628      	mov	r0, r5
 800664a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800664e:	f000 b853 	b.w	80066f8 <_write_r>

08006652 <__sseek>:
 8006652:	b510      	push	{r4, lr}
 8006654:	460c      	mov	r4, r1
 8006656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665a:	f000 f829 	bl	80066b0 <_lseek_r>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	bf15      	itete	ne
 8006664:	6560      	strne	r0, [r4, #84]	; 0x54
 8006666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800666a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800666e:	81a3      	strheq	r3, [r4, #12]
 8006670:	bf18      	it	ne
 8006672:	81a3      	strhne	r3, [r4, #12]
 8006674:	bd10      	pop	{r4, pc}

08006676 <__sclose>:
 8006676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667a:	f000 b809 	b.w	8006690 <_close_r>

0800667e <memset>:
 800667e:	4402      	add	r2, r0
 8006680:	4603      	mov	r3, r0
 8006682:	4293      	cmp	r3, r2
 8006684:	d100      	bne.n	8006688 <memset+0xa>
 8006686:	4770      	bx	lr
 8006688:	f803 1b01 	strb.w	r1, [r3], #1
 800668c:	e7f9      	b.n	8006682 <memset+0x4>
	...

08006690 <_close_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4d06      	ldr	r5, [pc, #24]	; (80066ac <_close_r+0x1c>)
 8006694:	2300      	movs	r3, #0
 8006696:	4604      	mov	r4, r0
 8006698:	4608      	mov	r0, r1
 800669a:	602b      	str	r3, [r5, #0]
 800669c:	f7fa fe67 	bl	800136e <_close>
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	d102      	bne.n	80066aa <_close_r+0x1a>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	b103      	cbz	r3, 80066aa <_close_r+0x1a>
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	bd38      	pop	{r3, r4, r5, pc}
 80066ac:	20000438 	.word	0x20000438

080066b0 <_lseek_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4d07      	ldr	r5, [pc, #28]	; (80066d0 <_lseek_r+0x20>)
 80066b4:	4604      	mov	r4, r0
 80066b6:	4608      	mov	r0, r1
 80066b8:	4611      	mov	r1, r2
 80066ba:	2200      	movs	r2, #0
 80066bc:	602a      	str	r2, [r5, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	f7fa fe7c 	bl	80013bc <_lseek>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <_lseek_r+0x1e>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	b103      	cbz	r3, 80066ce <_lseek_r+0x1e>
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	20000438 	.word	0x20000438

080066d4 <_read_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d07      	ldr	r5, [pc, #28]	; (80066f4 <_read_r+0x20>)
 80066d8:	4604      	mov	r4, r0
 80066da:	4608      	mov	r0, r1
 80066dc:	4611      	mov	r1, r2
 80066de:	2200      	movs	r2, #0
 80066e0:	602a      	str	r2, [r5, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f7fa fe0a 	bl	80012fc <_read>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_read_r+0x1e>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_read_r+0x1e>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	20000438 	.word	0x20000438

080066f8 <_write_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d07      	ldr	r5, [pc, #28]	; (8006718 <_write_r+0x20>)
 80066fc:	4604      	mov	r4, r0
 80066fe:	4608      	mov	r0, r1
 8006700:	4611      	mov	r1, r2
 8006702:	2200      	movs	r2, #0
 8006704:	602a      	str	r2, [r5, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	f7fa fe15 	bl	8001336 <_write>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_write_r+0x1e>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_write_r+0x1e>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	20000438 	.word	0x20000438

0800671c <__errno>:
 800671c:	4b01      	ldr	r3, [pc, #4]	; (8006724 <__errno+0x8>)
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000068 	.word	0x20000068

08006728 <__libc_init_array>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	4d0d      	ldr	r5, [pc, #52]	; (8006760 <__libc_init_array+0x38>)
 800672c:	4c0d      	ldr	r4, [pc, #52]	; (8006764 <__libc_init_array+0x3c>)
 800672e:	1b64      	subs	r4, r4, r5
 8006730:	10a4      	asrs	r4, r4, #2
 8006732:	2600      	movs	r6, #0
 8006734:	42a6      	cmp	r6, r4
 8006736:	d109      	bne.n	800674c <__libc_init_array+0x24>
 8006738:	4d0b      	ldr	r5, [pc, #44]	; (8006768 <__libc_init_array+0x40>)
 800673a:	4c0c      	ldr	r4, [pc, #48]	; (800676c <__libc_init_array+0x44>)
 800673c:	f000 fe42 	bl	80073c4 <_init>
 8006740:	1b64      	subs	r4, r4, r5
 8006742:	10a4      	asrs	r4, r4, #2
 8006744:	2600      	movs	r6, #0
 8006746:	42a6      	cmp	r6, r4
 8006748:	d105      	bne.n	8006756 <__libc_init_array+0x2e>
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006750:	4798      	blx	r3
 8006752:	3601      	adds	r6, #1
 8006754:	e7ee      	b.n	8006734 <__libc_init_array+0xc>
 8006756:	f855 3b04 	ldr.w	r3, [r5], #4
 800675a:	4798      	blx	r3
 800675c:	3601      	adds	r6, #1
 800675e:	e7f2      	b.n	8006746 <__libc_init_array+0x1e>
 8006760:	08007504 	.word	0x08007504
 8006764:	08007504 	.word	0x08007504
 8006768:	08007504 	.word	0x08007504
 800676c:	08007508 	.word	0x08007508

08006770 <__retarget_lock_init_recursive>:
 8006770:	4770      	bx	lr

08006772 <__retarget_lock_acquire_recursive>:
 8006772:	4770      	bx	lr

08006774 <__retarget_lock_release_recursive>:
 8006774:	4770      	bx	lr
	...

08006778 <__assert_func>:
 8006778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800677a:	4614      	mov	r4, r2
 800677c:	461a      	mov	r2, r3
 800677e:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <__assert_func+0x2c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4605      	mov	r5, r0
 8006784:	68d8      	ldr	r0, [r3, #12]
 8006786:	b14c      	cbz	r4, 800679c <__assert_func+0x24>
 8006788:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <__assert_func+0x30>)
 800678a:	9100      	str	r1, [sp, #0]
 800678c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006790:	4906      	ldr	r1, [pc, #24]	; (80067ac <__assert_func+0x34>)
 8006792:	462b      	mov	r3, r5
 8006794:	f000 f9bc 	bl	8006b10 <fiprintf>
 8006798:	f000 f9dc 	bl	8006b54 <abort>
 800679c:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <__assert_func+0x38>)
 800679e:	461c      	mov	r4, r3
 80067a0:	e7f3      	b.n	800678a <__assert_func+0x12>
 80067a2:	bf00      	nop
 80067a4:	20000068 	.word	0x20000068
 80067a8:	0800748b 	.word	0x0800748b
 80067ac:	08007498 	.word	0x08007498
 80067b0:	080074c6 	.word	0x080074c6

080067b4 <_free_r>:
 80067b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067b6:	2900      	cmp	r1, #0
 80067b8:	d044      	beq.n	8006844 <_free_r+0x90>
 80067ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067be:	9001      	str	r0, [sp, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f1a1 0404 	sub.w	r4, r1, #4
 80067c6:	bfb8      	it	lt
 80067c8:	18e4      	addlt	r4, r4, r3
 80067ca:	f000 f8e7 	bl	800699c <__malloc_lock>
 80067ce:	4a1e      	ldr	r2, [pc, #120]	; (8006848 <_free_r+0x94>)
 80067d0:	9801      	ldr	r0, [sp, #4]
 80067d2:	6813      	ldr	r3, [r2, #0]
 80067d4:	b933      	cbnz	r3, 80067e4 <_free_r+0x30>
 80067d6:	6063      	str	r3, [r4, #4]
 80067d8:	6014      	str	r4, [r2, #0]
 80067da:	b003      	add	sp, #12
 80067dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067e0:	f000 b8e2 	b.w	80069a8 <__malloc_unlock>
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d908      	bls.n	80067fa <_free_r+0x46>
 80067e8:	6825      	ldr	r5, [r4, #0]
 80067ea:	1961      	adds	r1, r4, r5
 80067ec:	428b      	cmp	r3, r1
 80067ee:	bf01      	itttt	eq
 80067f0:	6819      	ldreq	r1, [r3, #0]
 80067f2:	685b      	ldreq	r3, [r3, #4]
 80067f4:	1949      	addeq	r1, r1, r5
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	e7ed      	b.n	80067d6 <_free_r+0x22>
 80067fa:	461a      	mov	r2, r3
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b10b      	cbz	r3, 8006804 <_free_r+0x50>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d9fa      	bls.n	80067fa <_free_r+0x46>
 8006804:	6811      	ldr	r1, [r2, #0]
 8006806:	1855      	adds	r5, r2, r1
 8006808:	42a5      	cmp	r5, r4
 800680a:	d10b      	bne.n	8006824 <_free_r+0x70>
 800680c:	6824      	ldr	r4, [r4, #0]
 800680e:	4421      	add	r1, r4
 8006810:	1854      	adds	r4, r2, r1
 8006812:	42a3      	cmp	r3, r4
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	d1e0      	bne.n	80067da <_free_r+0x26>
 8006818:	681c      	ldr	r4, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	6053      	str	r3, [r2, #4]
 800681e:	440c      	add	r4, r1
 8006820:	6014      	str	r4, [r2, #0]
 8006822:	e7da      	b.n	80067da <_free_r+0x26>
 8006824:	d902      	bls.n	800682c <_free_r+0x78>
 8006826:	230c      	movs	r3, #12
 8006828:	6003      	str	r3, [r0, #0]
 800682a:	e7d6      	b.n	80067da <_free_r+0x26>
 800682c:	6825      	ldr	r5, [r4, #0]
 800682e:	1961      	adds	r1, r4, r5
 8006830:	428b      	cmp	r3, r1
 8006832:	bf04      	itt	eq
 8006834:	6819      	ldreq	r1, [r3, #0]
 8006836:	685b      	ldreq	r3, [r3, #4]
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	bf04      	itt	eq
 800683c:	1949      	addeq	r1, r1, r5
 800683e:	6021      	streq	r1, [r4, #0]
 8006840:	6054      	str	r4, [r2, #4]
 8006842:	e7ca      	b.n	80067da <_free_r+0x26>
 8006844:	b003      	add	sp, #12
 8006846:	bd30      	pop	{r4, r5, pc}
 8006848:	20000440 	.word	0x20000440

0800684c <malloc>:
 800684c:	4b02      	ldr	r3, [pc, #8]	; (8006858 <malloc+0xc>)
 800684e:	4601      	mov	r1, r0
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	f000 b823 	b.w	800689c <_malloc_r>
 8006856:	bf00      	nop
 8006858:	20000068 	.word	0x20000068

0800685c <sbrk_aligned>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	4e0e      	ldr	r6, [pc, #56]	; (8006898 <sbrk_aligned+0x3c>)
 8006860:	460c      	mov	r4, r1
 8006862:	6831      	ldr	r1, [r6, #0]
 8006864:	4605      	mov	r5, r0
 8006866:	b911      	cbnz	r1, 800686e <sbrk_aligned+0x12>
 8006868:	f000 f964 	bl	8006b34 <_sbrk_r>
 800686c:	6030      	str	r0, [r6, #0]
 800686e:	4621      	mov	r1, r4
 8006870:	4628      	mov	r0, r5
 8006872:	f000 f95f 	bl	8006b34 <_sbrk_r>
 8006876:	1c43      	adds	r3, r0, #1
 8006878:	d00a      	beq.n	8006890 <sbrk_aligned+0x34>
 800687a:	1cc4      	adds	r4, r0, #3
 800687c:	f024 0403 	bic.w	r4, r4, #3
 8006880:	42a0      	cmp	r0, r4
 8006882:	d007      	beq.n	8006894 <sbrk_aligned+0x38>
 8006884:	1a21      	subs	r1, r4, r0
 8006886:	4628      	mov	r0, r5
 8006888:	f000 f954 	bl	8006b34 <_sbrk_r>
 800688c:	3001      	adds	r0, #1
 800688e:	d101      	bne.n	8006894 <sbrk_aligned+0x38>
 8006890:	f04f 34ff 	mov.w	r4, #4294967295
 8006894:	4620      	mov	r0, r4
 8006896:	bd70      	pop	{r4, r5, r6, pc}
 8006898:	20000444 	.word	0x20000444

0800689c <_malloc_r>:
 800689c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a0:	1ccd      	adds	r5, r1, #3
 80068a2:	f025 0503 	bic.w	r5, r5, #3
 80068a6:	3508      	adds	r5, #8
 80068a8:	2d0c      	cmp	r5, #12
 80068aa:	bf38      	it	cc
 80068ac:	250c      	movcc	r5, #12
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	4607      	mov	r7, r0
 80068b2:	db01      	blt.n	80068b8 <_malloc_r+0x1c>
 80068b4:	42a9      	cmp	r1, r5
 80068b6:	d905      	bls.n	80068c4 <_malloc_r+0x28>
 80068b8:	230c      	movs	r3, #12
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	2600      	movs	r6, #0
 80068be:	4630      	mov	r0, r6
 80068c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006998 <_malloc_r+0xfc>
 80068c8:	f000 f868 	bl	800699c <__malloc_lock>
 80068cc:	f8d8 3000 	ldr.w	r3, [r8]
 80068d0:	461c      	mov	r4, r3
 80068d2:	bb5c      	cbnz	r4, 800692c <_malloc_r+0x90>
 80068d4:	4629      	mov	r1, r5
 80068d6:	4638      	mov	r0, r7
 80068d8:	f7ff ffc0 	bl	800685c <sbrk_aligned>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	4604      	mov	r4, r0
 80068e0:	d155      	bne.n	800698e <_malloc_r+0xf2>
 80068e2:	f8d8 4000 	ldr.w	r4, [r8]
 80068e6:	4626      	mov	r6, r4
 80068e8:	2e00      	cmp	r6, #0
 80068ea:	d145      	bne.n	8006978 <_malloc_r+0xdc>
 80068ec:	2c00      	cmp	r4, #0
 80068ee:	d048      	beq.n	8006982 <_malloc_r+0xe6>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	4631      	mov	r1, r6
 80068f4:	4638      	mov	r0, r7
 80068f6:	eb04 0903 	add.w	r9, r4, r3
 80068fa:	f000 f91b 	bl	8006b34 <_sbrk_r>
 80068fe:	4581      	cmp	r9, r0
 8006900:	d13f      	bne.n	8006982 <_malloc_r+0xe6>
 8006902:	6821      	ldr	r1, [r4, #0]
 8006904:	1a6d      	subs	r5, r5, r1
 8006906:	4629      	mov	r1, r5
 8006908:	4638      	mov	r0, r7
 800690a:	f7ff ffa7 	bl	800685c <sbrk_aligned>
 800690e:	3001      	adds	r0, #1
 8006910:	d037      	beq.n	8006982 <_malloc_r+0xe6>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	442b      	add	r3, r5
 8006916:	6023      	str	r3, [r4, #0]
 8006918:	f8d8 3000 	ldr.w	r3, [r8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d038      	beq.n	8006992 <_malloc_r+0xf6>
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	42a2      	cmp	r2, r4
 8006924:	d12b      	bne.n	800697e <_malloc_r+0xe2>
 8006926:	2200      	movs	r2, #0
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	e00f      	b.n	800694c <_malloc_r+0xb0>
 800692c:	6822      	ldr	r2, [r4, #0]
 800692e:	1b52      	subs	r2, r2, r5
 8006930:	d41f      	bmi.n	8006972 <_malloc_r+0xd6>
 8006932:	2a0b      	cmp	r2, #11
 8006934:	d917      	bls.n	8006966 <_malloc_r+0xca>
 8006936:	1961      	adds	r1, r4, r5
 8006938:	42a3      	cmp	r3, r4
 800693a:	6025      	str	r5, [r4, #0]
 800693c:	bf18      	it	ne
 800693e:	6059      	strne	r1, [r3, #4]
 8006940:	6863      	ldr	r3, [r4, #4]
 8006942:	bf08      	it	eq
 8006944:	f8c8 1000 	streq.w	r1, [r8]
 8006948:	5162      	str	r2, [r4, r5]
 800694a:	604b      	str	r3, [r1, #4]
 800694c:	4638      	mov	r0, r7
 800694e:	f104 060b 	add.w	r6, r4, #11
 8006952:	f000 f829 	bl	80069a8 <__malloc_unlock>
 8006956:	f026 0607 	bic.w	r6, r6, #7
 800695a:	1d23      	adds	r3, r4, #4
 800695c:	1af2      	subs	r2, r6, r3
 800695e:	d0ae      	beq.n	80068be <_malloc_r+0x22>
 8006960:	1b9b      	subs	r3, r3, r6
 8006962:	50a3      	str	r3, [r4, r2]
 8006964:	e7ab      	b.n	80068be <_malloc_r+0x22>
 8006966:	42a3      	cmp	r3, r4
 8006968:	6862      	ldr	r2, [r4, #4]
 800696a:	d1dd      	bne.n	8006928 <_malloc_r+0x8c>
 800696c:	f8c8 2000 	str.w	r2, [r8]
 8006970:	e7ec      	b.n	800694c <_malloc_r+0xb0>
 8006972:	4623      	mov	r3, r4
 8006974:	6864      	ldr	r4, [r4, #4]
 8006976:	e7ac      	b.n	80068d2 <_malloc_r+0x36>
 8006978:	4634      	mov	r4, r6
 800697a:	6876      	ldr	r6, [r6, #4]
 800697c:	e7b4      	b.n	80068e8 <_malloc_r+0x4c>
 800697e:	4613      	mov	r3, r2
 8006980:	e7cc      	b.n	800691c <_malloc_r+0x80>
 8006982:	230c      	movs	r3, #12
 8006984:	603b      	str	r3, [r7, #0]
 8006986:	4638      	mov	r0, r7
 8006988:	f000 f80e 	bl	80069a8 <__malloc_unlock>
 800698c:	e797      	b.n	80068be <_malloc_r+0x22>
 800698e:	6025      	str	r5, [r4, #0]
 8006990:	e7dc      	b.n	800694c <_malloc_r+0xb0>
 8006992:	605b      	str	r3, [r3, #4]
 8006994:	deff      	udf	#255	; 0xff
 8006996:	bf00      	nop
 8006998:	20000440 	.word	0x20000440

0800699c <__malloc_lock>:
 800699c:	4801      	ldr	r0, [pc, #4]	; (80069a4 <__malloc_lock+0x8>)
 800699e:	f7ff bee8 	b.w	8006772 <__retarget_lock_acquire_recursive>
 80069a2:	bf00      	nop
 80069a4:	2000043c 	.word	0x2000043c

080069a8 <__malloc_unlock>:
 80069a8:	4801      	ldr	r0, [pc, #4]	; (80069b0 <__malloc_unlock+0x8>)
 80069aa:	f7ff bee3 	b.w	8006774 <__retarget_lock_release_recursive>
 80069ae:	bf00      	nop
 80069b0:	2000043c 	.word	0x2000043c

080069b4 <__sflush_r>:
 80069b4:	898a      	ldrh	r2, [r1, #12]
 80069b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ba:	4605      	mov	r5, r0
 80069bc:	0710      	lsls	r0, r2, #28
 80069be:	460c      	mov	r4, r1
 80069c0:	d458      	bmi.n	8006a74 <__sflush_r+0xc0>
 80069c2:	684b      	ldr	r3, [r1, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	dc05      	bgt.n	80069d4 <__sflush_r+0x20>
 80069c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	dc02      	bgt.n	80069d4 <__sflush_r+0x20>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	d0f9      	beq.n	80069ce <__sflush_r+0x1a>
 80069da:	2300      	movs	r3, #0
 80069dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069e0:	682f      	ldr	r7, [r5, #0]
 80069e2:	6a21      	ldr	r1, [r4, #32]
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	d032      	beq.n	8006a4e <__sflush_r+0x9a>
 80069e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	075a      	lsls	r2, r3, #29
 80069ee:	d505      	bpl.n	80069fc <__sflush_r+0x48>
 80069f0:	6863      	ldr	r3, [r4, #4]
 80069f2:	1ac0      	subs	r0, r0, r3
 80069f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069f6:	b10b      	cbz	r3, 80069fc <__sflush_r+0x48>
 80069f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069fa:	1ac0      	subs	r0, r0, r3
 80069fc:	2300      	movs	r3, #0
 80069fe:	4602      	mov	r2, r0
 8006a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a02:	6a21      	ldr	r1, [r4, #32]
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b0      	blx	r6
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	d106      	bne.n	8006a1c <__sflush_r+0x68>
 8006a0e:	6829      	ldr	r1, [r5, #0]
 8006a10:	291d      	cmp	r1, #29
 8006a12:	d82b      	bhi.n	8006a6c <__sflush_r+0xb8>
 8006a14:	4a29      	ldr	r2, [pc, #164]	; (8006abc <__sflush_r+0x108>)
 8006a16:	410a      	asrs	r2, r1
 8006a18:	07d6      	lsls	r6, r2, #31
 8006a1a:	d427      	bmi.n	8006a6c <__sflush_r+0xb8>
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	6062      	str	r2, [r4, #4]
 8006a20:	04d9      	lsls	r1, r3, #19
 8006a22:	6922      	ldr	r2, [r4, #16]
 8006a24:	6022      	str	r2, [r4, #0]
 8006a26:	d504      	bpl.n	8006a32 <__sflush_r+0x7e>
 8006a28:	1c42      	adds	r2, r0, #1
 8006a2a:	d101      	bne.n	8006a30 <__sflush_r+0x7c>
 8006a2c:	682b      	ldr	r3, [r5, #0]
 8006a2e:	b903      	cbnz	r3, 8006a32 <__sflush_r+0x7e>
 8006a30:	6560      	str	r0, [r4, #84]	; 0x54
 8006a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a34:	602f      	str	r7, [r5, #0]
 8006a36:	2900      	cmp	r1, #0
 8006a38:	d0c9      	beq.n	80069ce <__sflush_r+0x1a>
 8006a3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a3e:	4299      	cmp	r1, r3
 8006a40:	d002      	beq.n	8006a48 <__sflush_r+0x94>
 8006a42:	4628      	mov	r0, r5
 8006a44:	f7ff feb6 	bl	80067b4 <_free_r>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	6360      	str	r0, [r4, #52]	; 0x34
 8006a4c:	e7c0      	b.n	80069d0 <__sflush_r+0x1c>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b0      	blx	r6
 8006a54:	1c41      	adds	r1, r0, #1
 8006a56:	d1c8      	bne.n	80069ea <__sflush_r+0x36>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0c5      	beq.n	80069ea <__sflush_r+0x36>
 8006a5e:	2b1d      	cmp	r3, #29
 8006a60:	d001      	beq.n	8006a66 <__sflush_r+0xb2>
 8006a62:	2b16      	cmp	r3, #22
 8006a64:	d101      	bne.n	8006a6a <__sflush_r+0xb6>
 8006a66:	602f      	str	r7, [r5, #0]
 8006a68:	e7b1      	b.n	80069ce <__sflush_r+0x1a>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a70:	81a3      	strh	r3, [r4, #12]
 8006a72:	e7ad      	b.n	80069d0 <__sflush_r+0x1c>
 8006a74:	690f      	ldr	r7, [r1, #16]
 8006a76:	2f00      	cmp	r7, #0
 8006a78:	d0a9      	beq.n	80069ce <__sflush_r+0x1a>
 8006a7a:	0793      	lsls	r3, r2, #30
 8006a7c:	680e      	ldr	r6, [r1, #0]
 8006a7e:	bf08      	it	eq
 8006a80:	694b      	ldreq	r3, [r1, #20]
 8006a82:	600f      	str	r7, [r1, #0]
 8006a84:	bf18      	it	ne
 8006a86:	2300      	movne	r3, #0
 8006a88:	eba6 0807 	sub.w	r8, r6, r7
 8006a8c:	608b      	str	r3, [r1, #8]
 8006a8e:	f1b8 0f00 	cmp.w	r8, #0
 8006a92:	dd9c      	ble.n	80069ce <__sflush_r+0x1a>
 8006a94:	6a21      	ldr	r1, [r4, #32]
 8006a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a98:	4643      	mov	r3, r8
 8006a9a:	463a      	mov	r2, r7
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b0      	blx	r6
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	dc06      	bgt.n	8006ab2 <__sflush_r+0xfe>
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aaa:	81a3      	strh	r3, [r4, #12]
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	e78e      	b.n	80069d0 <__sflush_r+0x1c>
 8006ab2:	4407      	add	r7, r0
 8006ab4:	eba8 0800 	sub.w	r8, r8, r0
 8006ab8:	e7e9      	b.n	8006a8e <__sflush_r+0xda>
 8006aba:	bf00      	nop
 8006abc:	dfbffffe 	.word	0xdfbffffe

08006ac0 <_fflush_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	690b      	ldr	r3, [r1, #16]
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	b913      	cbnz	r3, 8006ad0 <_fflush_r+0x10>
 8006aca:	2500      	movs	r5, #0
 8006acc:	4628      	mov	r0, r5
 8006ace:	bd38      	pop	{r3, r4, r5, pc}
 8006ad0:	b118      	cbz	r0, 8006ada <_fflush_r+0x1a>
 8006ad2:	6a03      	ldr	r3, [r0, #32]
 8006ad4:	b90b      	cbnz	r3, 8006ada <_fflush_r+0x1a>
 8006ad6:	f7ff fd59 	bl	800658c <__sinit>
 8006ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0f3      	beq.n	8006aca <_fflush_r+0xa>
 8006ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ae4:	07d0      	lsls	r0, r2, #31
 8006ae6:	d404      	bmi.n	8006af2 <_fflush_r+0x32>
 8006ae8:	0599      	lsls	r1, r3, #22
 8006aea:	d402      	bmi.n	8006af2 <_fflush_r+0x32>
 8006aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aee:	f7ff fe40 	bl	8006772 <__retarget_lock_acquire_recursive>
 8006af2:	4628      	mov	r0, r5
 8006af4:	4621      	mov	r1, r4
 8006af6:	f7ff ff5d 	bl	80069b4 <__sflush_r>
 8006afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006afc:	07da      	lsls	r2, r3, #31
 8006afe:	4605      	mov	r5, r0
 8006b00:	d4e4      	bmi.n	8006acc <_fflush_r+0xc>
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	059b      	lsls	r3, r3, #22
 8006b06:	d4e1      	bmi.n	8006acc <_fflush_r+0xc>
 8006b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b0a:	f7ff fe33 	bl	8006774 <__retarget_lock_release_recursive>
 8006b0e:	e7dd      	b.n	8006acc <_fflush_r+0xc>

08006b10 <fiprintf>:
 8006b10:	b40e      	push	{r1, r2, r3}
 8006b12:	b503      	push	{r0, r1, lr}
 8006b14:	4601      	mov	r1, r0
 8006b16:	ab03      	add	r3, sp, #12
 8006b18:	4805      	ldr	r0, [pc, #20]	; (8006b30 <fiprintf+0x20>)
 8006b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b1e:	6800      	ldr	r0, [r0, #0]
 8006b20:	9301      	str	r3, [sp, #4]
 8006b22:	f000 f847 	bl	8006bb4 <_vfiprintf_r>
 8006b26:	b002      	add	sp, #8
 8006b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b2c:	b003      	add	sp, #12
 8006b2e:	4770      	bx	lr
 8006b30:	20000068 	.word	0x20000068

08006b34 <_sbrk_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d06      	ldr	r5, [pc, #24]	; (8006b50 <_sbrk_r+0x1c>)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	602b      	str	r3, [r5, #0]
 8006b40:	f7fa fc4a 	bl	80013d8 <_sbrk>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d102      	bne.n	8006b4e <_sbrk_r+0x1a>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	b103      	cbz	r3, 8006b4e <_sbrk_r+0x1a>
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
 8006b50:	20000438 	.word	0x20000438

08006b54 <abort>:
 8006b54:	b508      	push	{r3, lr}
 8006b56:	2006      	movs	r0, #6
 8006b58:	f000 fb94 	bl	8007284 <raise>
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	f7fa fbc3 	bl	80012e8 <_exit>

08006b62 <__sfputc_r>:
 8006b62:	6893      	ldr	r3, [r2, #8]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	b410      	push	{r4}
 8006b6a:	6093      	str	r3, [r2, #8]
 8006b6c:	da08      	bge.n	8006b80 <__sfputc_r+0x1e>
 8006b6e:	6994      	ldr	r4, [r2, #24]
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	db01      	blt.n	8006b78 <__sfputc_r+0x16>
 8006b74:	290a      	cmp	r1, #10
 8006b76:	d103      	bne.n	8006b80 <__sfputc_r+0x1e>
 8006b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b7c:	f000 bac4 	b.w	8007108 <__swbuf_r>
 8006b80:	6813      	ldr	r3, [r2, #0]
 8006b82:	1c58      	adds	r0, r3, #1
 8006b84:	6010      	str	r0, [r2, #0]
 8006b86:	7019      	strb	r1, [r3, #0]
 8006b88:	4608      	mov	r0, r1
 8006b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <__sfputs_r>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	4606      	mov	r6, r0
 8006b94:	460f      	mov	r7, r1
 8006b96:	4614      	mov	r4, r2
 8006b98:	18d5      	adds	r5, r2, r3
 8006b9a:	42ac      	cmp	r4, r5
 8006b9c:	d101      	bne.n	8006ba2 <__sfputs_r+0x12>
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	e007      	b.n	8006bb2 <__sfputs_r+0x22>
 8006ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba6:	463a      	mov	r2, r7
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f7ff ffda 	bl	8006b62 <__sfputc_r>
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	d1f3      	bne.n	8006b9a <__sfputs_r+0xa>
 8006bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006bb4 <_vfiprintf_r>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	460d      	mov	r5, r1
 8006bba:	b09d      	sub	sp, #116	; 0x74
 8006bbc:	4614      	mov	r4, r2
 8006bbe:	4698      	mov	r8, r3
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	b118      	cbz	r0, 8006bcc <_vfiprintf_r+0x18>
 8006bc4:	6a03      	ldr	r3, [r0, #32]
 8006bc6:	b90b      	cbnz	r3, 8006bcc <_vfiprintf_r+0x18>
 8006bc8:	f7ff fce0 	bl	800658c <__sinit>
 8006bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bce:	07d9      	lsls	r1, r3, #31
 8006bd0:	d405      	bmi.n	8006bde <_vfiprintf_r+0x2a>
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	059a      	lsls	r2, r3, #22
 8006bd6:	d402      	bmi.n	8006bde <_vfiprintf_r+0x2a>
 8006bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bda:	f7ff fdca 	bl	8006772 <__retarget_lock_acquire_recursive>
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	071b      	lsls	r3, r3, #28
 8006be2:	d501      	bpl.n	8006be8 <_vfiprintf_r+0x34>
 8006be4:	692b      	ldr	r3, [r5, #16]
 8006be6:	b99b      	cbnz	r3, 8006c10 <_vfiprintf_r+0x5c>
 8006be8:	4629      	mov	r1, r5
 8006bea:	4630      	mov	r0, r6
 8006bec:	f000 faca 	bl	8007184 <__swsetup_r>
 8006bf0:	b170      	cbz	r0, 8006c10 <_vfiprintf_r+0x5c>
 8006bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bf4:	07dc      	lsls	r4, r3, #31
 8006bf6:	d504      	bpl.n	8006c02 <_vfiprintf_r+0x4e>
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	b01d      	add	sp, #116	; 0x74
 8006bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c02:	89ab      	ldrh	r3, [r5, #12]
 8006c04:	0598      	lsls	r0, r3, #22
 8006c06:	d4f7      	bmi.n	8006bf8 <_vfiprintf_r+0x44>
 8006c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c0a:	f7ff fdb3 	bl	8006774 <__retarget_lock_release_recursive>
 8006c0e:	e7f3      	b.n	8006bf8 <_vfiprintf_r+0x44>
 8006c10:	2300      	movs	r3, #0
 8006c12:	9309      	str	r3, [sp, #36]	; 0x24
 8006c14:	2320      	movs	r3, #32
 8006c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c1e:	2330      	movs	r3, #48	; 0x30
 8006c20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006dd4 <_vfiprintf_r+0x220>
 8006c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c28:	f04f 0901 	mov.w	r9, #1
 8006c2c:	4623      	mov	r3, r4
 8006c2e:	469a      	mov	sl, r3
 8006c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c34:	b10a      	cbz	r2, 8006c3a <_vfiprintf_r+0x86>
 8006c36:	2a25      	cmp	r2, #37	; 0x25
 8006c38:	d1f9      	bne.n	8006c2e <_vfiprintf_r+0x7a>
 8006c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8006c3e:	d00b      	beq.n	8006c58 <_vfiprintf_r+0xa4>
 8006c40:	465b      	mov	r3, fp
 8006c42:	4622      	mov	r2, r4
 8006c44:	4629      	mov	r1, r5
 8006c46:	4630      	mov	r0, r6
 8006c48:	f7ff ffa2 	bl	8006b90 <__sfputs_r>
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	f000 80a9 	beq.w	8006da4 <_vfiprintf_r+0x1f0>
 8006c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c54:	445a      	add	r2, fp
 8006c56:	9209      	str	r2, [sp, #36]	; 0x24
 8006c58:	f89a 3000 	ldrb.w	r3, [sl]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80a1 	beq.w	8006da4 <_vfiprintf_r+0x1f0>
 8006c62:	2300      	movs	r3, #0
 8006c64:	f04f 32ff 	mov.w	r2, #4294967295
 8006c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c6c:	f10a 0a01 	add.w	sl, sl, #1
 8006c70:	9304      	str	r3, [sp, #16]
 8006c72:	9307      	str	r3, [sp, #28]
 8006c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c78:	931a      	str	r3, [sp, #104]	; 0x68
 8006c7a:	4654      	mov	r4, sl
 8006c7c:	2205      	movs	r2, #5
 8006c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c82:	4854      	ldr	r0, [pc, #336]	; (8006dd4 <_vfiprintf_r+0x220>)
 8006c84:	f7f9 facc 	bl	8000220 <memchr>
 8006c88:	9a04      	ldr	r2, [sp, #16]
 8006c8a:	b9d8      	cbnz	r0, 8006cc4 <_vfiprintf_r+0x110>
 8006c8c:	06d1      	lsls	r1, r2, #27
 8006c8e:	bf44      	itt	mi
 8006c90:	2320      	movmi	r3, #32
 8006c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c96:	0713      	lsls	r3, r2, #28
 8006c98:	bf44      	itt	mi
 8006c9a:	232b      	movmi	r3, #43	; 0x2b
 8006c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ca6:	d015      	beq.n	8006cd4 <_vfiprintf_r+0x120>
 8006ca8:	9a07      	ldr	r2, [sp, #28]
 8006caa:	4654      	mov	r4, sl
 8006cac:	2000      	movs	r0, #0
 8006cae:	f04f 0c0a 	mov.w	ip, #10
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cb8:	3b30      	subs	r3, #48	; 0x30
 8006cba:	2b09      	cmp	r3, #9
 8006cbc:	d94d      	bls.n	8006d5a <_vfiprintf_r+0x1a6>
 8006cbe:	b1b0      	cbz	r0, 8006cee <_vfiprintf_r+0x13a>
 8006cc0:	9207      	str	r2, [sp, #28]
 8006cc2:	e014      	b.n	8006cee <_vfiprintf_r+0x13a>
 8006cc4:	eba0 0308 	sub.w	r3, r0, r8
 8006cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	9304      	str	r3, [sp, #16]
 8006cd0:	46a2      	mov	sl, r4
 8006cd2:	e7d2      	b.n	8006c7a <_vfiprintf_r+0xc6>
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	1d19      	adds	r1, r3, #4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	9103      	str	r1, [sp, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bfbb      	ittet	lt
 8006ce0:	425b      	neglt	r3, r3
 8006ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ce6:	9307      	strge	r3, [sp, #28]
 8006ce8:	9307      	strlt	r3, [sp, #28]
 8006cea:	bfb8      	it	lt
 8006cec:	9204      	strlt	r2, [sp, #16]
 8006cee:	7823      	ldrb	r3, [r4, #0]
 8006cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8006cf2:	d10c      	bne.n	8006d0e <_vfiprintf_r+0x15a>
 8006cf4:	7863      	ldrb	r3, [r4, #1]
 8006cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf8:	d134      	bne.n	8006d64 <_vfiprintf_r+0x1b0>
 8006cfa:	9b03      	ldr	r3, [sp, #12]
 8006cfc:	1d1a      	adds	r2, r3, #4
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	9203      	str	r2, [sp, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	bfb8      	it	lt
 8006d06:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d0a:	3402      	adds	r4, #2
 8006d0c:	9305      	str	r3, [sp, #20]
 8006d0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006de4 <_vfiprintf_r+0x230>
 8006d12:	7821      	ldrb	r1, [r4, #0]
 8006d14:	2203      	movs	r2, #3
 8006d16:	4650      	mov	r0, sl
 8006d18:	f7f9 fa82 	bl	8000220 <memchr>
 8006d1c:	b138      	cbz	r0, 8006d2e <_vfiprintf_r+0x17a>
 8006d1e:	9b04      	ldr	r3, [sp, #16]
 8006d20:	eba0 000a 	sub.w	r0, r0, sl
 8006d24:	2240      	movs	r2, #64	; 0x40
 8006d26:	4082      	lsls	r2, r0
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	3401      	adds	r4, #1
 8006d2c:	9304      	str	r3, [sp, #16]
 8006d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d32:	4829      	ldr	r0, [pc, #164]	; (8006dd8 <_vfiprintf_r+0x224>)
 8006d34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d38:	2206      	movs	r2, #6
 8006d3a:	f7f9 fa71 	bl	8000220 <memchr>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d03f      	beq.n	8006dc2 <_vfiprintf_r+0x20e>
 8006d42:	4b26      	ldr	r3, [pc, #152]	; (8006ddc <_vfiprintf_r+0x228>)
 8006d44:	bb1b      	cbnz	r3, 8006d8e <_vfiprintf_r+0x1da>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	3307      	adds	r3, #7
 8006d4a:	f023 0307 	bic.w	r3, r3, #7
 8006d4e:	3308      	adds	r3, #8
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d54:	443b      	add	r3, r7
 8006d56:	9309      	str	r3, [sp, #36]	; 0x24
 8006d58:	e768      	b.n	8006c2c <_vfiprintf_r+0x78>
 8006d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d5e:	460c      	mov	r4, r1
 8006d60:	2001      	movs	r0, #1
 8006d62:	e7a6      	b.n	8006cb2 <_vfiprintf_r+0xfe>
 8006d64:	2300      	movs	r3, #0
 8006d66:	3401      	adds	r4, #1
 8006d68:	9305      	str	r3, [sp, #20]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f04f 0c0a 	mov.w	ip, #10
 8006d70:	4620      	mov	r0, r4
 8006d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d76:	3a30      	subs	r2, #48	; 0x30
 8006d78:	2a09      	cmp	r2, #9
 8006d7a:	d903      	bls.n	8006d84 <_vfiprintf_r+0x1d0>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0c6      	beq.n	8006d0e <_vfiprintf_r+0x15a>
 8006d80:	9105      	str	r1, [sp, #20]
 8006d82:	e7c4      	b.n	8006d0e <_vfiprintf_r+0x15a>
 8006d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d88:	4604      	mov	r4, r0
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e7f0      	b.n	8006d70 <_vfiprintf_r+0x1bc>
 8006d8e:	ab03      	add	r3, sp, #12
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	462a      	mov	r2, r5
 8006d94:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <_vfiprintf_r+0x22c>)
 8006d96:	a904      	add	r1, sp, #16
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f3af 8000 	nop.w
 8006d9e:	4607      	mov	r7, r0
 8006da0:	1c78      	adds	r0, r7, #1
 8006da2:	d1d6      	bne.n	8006d52 <_vfiprintf_r+0x19e>
 8006da4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006da6:	07d9      	lsls	r1, r3, #31
 8006da8:	d405      	bmi.n	8006db6 <_vfiprintf_r+0x202>
 8006daa:	89ab      	ldrh	r3, [r5, #12]
 8006dac:	059a      	lsls	r2, r3, #22
 8006dae:	d402      	bmi.n	8006db6 <_vfiprintf_r+0x202>
 8006db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006db2:	f7ff fcdf 	bl	8006774 <__retarget_lock_release_recursive>
 8006db6:	89ab      	ldrh	r3, [r5, #12]
 8006db8:	065b      	lsls	r3, r3, #25
 8006dba:	f53f af1d 	bmi.w	8006bf8 <_vfiprintf_r+0x44>
 8006dbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dc0:	e71c      	b.n	8006bfc <_vfiprintf_r+0x48>
 8006dc2:	ab03      	add	r3, sp, #12
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	462a      	mov	r2, r5
 8006dc8:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <_vfiprintf_r+0x22c>)
 8006dca:	a904      	add	r1, sp, #16
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f000 f879 	bl	8006ec4 <_printf_i>
 8006dd2:	e7e4      	b.n	8006d9e <_vfiprintf_r+0x1ea>
 8006dd4:	080074c7 	.word	0x080074c7
 8006dd8:	080074d1 	.word	0x080074d1
 8006ddc:	00000000 	.word	0x00000000
 8006de0:	08006b91 	.word	0x08006b91
 8006de4:	080074cd 	.word	0x080074cd

08006de8 <_printf_common>:
 8006de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dec:	4616      	mov	r6, r2
 8006dee:	4699      	mov	r9, r3
 8006df0:	688a      	ldr	r2, [r1, #8]
 8006df2:	690b      	ldr	r3, [r1, #16]
 8006df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	bfb8      	it	lt
 8006dfc:	4613      	movlt	r3, r2
 8006dfe:	6033      	str	r3, [r6, #0]
 8006e00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e04:	4607      	mov	r7, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	b10a      	cbz	r2, 8006e0e <_printf_common+0x26>
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	6033      	str	r3, [r6, #0]
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	0699      	lsls	r1, r3, #26
 8006e12:	bf42      	ittt	mi
 8006e14:	6833      	ldrmi	r3, [r6, #0]
 8006e16:	3302      	addmi	r3, #2
 8006e18:	6033      	strmi	r3, [r6, #0]
 8006e1a:	6825      	ldr	r5, [r4, #0]
 8006e1c:	f015 0506 	ands.w	r5, r5, #6
 8006e20:	d106      	bne.n	8006e30 <_printf_common+0x48>
 8006e22:	f104 0a19 	add.w	sl, r4, #25
 8006e26:	68e3      	ldr	r3, [r4, #12]
 8006e28:	6832      	ldr	r2, [r6, #0]
 8006e2a:	1a9b      	subs	r3, r3, r2
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	dc26      	bgt.n	8006e7e <_printf_common+0x96>
 8006e30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e34:	1e13      	subs	r3, r2, #0
 8006e36:	6822      	ldr	r2, [r4, #0]
 8006e38:	bf18      	it	ne
 8006e3a:	2301      	movne	r3, #1
 8006e3c:	0692      	lsls	r2, r2, #26
 8006e3e:	d42b      	bmi.n	8006e98 <_printf_common+0xb0>
 8006e40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e44:	4649      	mov	r1, r9
 8006e46:	4638      	mov	r0, r7
 8006e48:	47c0      	blx	r8
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	d01e      	beq.n	8006e8c <_printf_common+0xa4>
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	6922      	ldr	r2, [r4, #16]
 8006e52:	f003 0306 	and.w	r3, r3, #6
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	bf02      	ittt	eq
 8006e5a:	68e5      	ldreq	r5, [r4, #12]
 8006e5c:	6833      	ldreq	r3, [r6, #0]
 8006e5e:	1aed      	subeq	r5, r5, r3
 8006e60:	68a3      	ldr	r3, [r4, #8]
 8006e62:	bf0c      	ite	eq
 8006e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e68:	2500      	movne	r5, #0
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	bfc4      	itt	gt
 8006e6e:	1a9b      	subgt	r3, r3, r2
 8006e70:	18ed      	addgt	r5, r5, r3
 8006e72:	2600      	movs	r6, #0
 8006e74:	341a      	adds	r4, #26
 8006e76:	42b5      	cmp	r5, r6
 8006e78:	d11a      	bne.n	8006eb0 <_printf_common+0xc8>
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	e008      	b.n	8006e90 <_printf_common+0xa8>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	4652      	mov	r2, sl
 8006e82:	4649      	mov	r1, r9
 8006e84:	4638      	mov	r0, r7
 8006e86:	47c0      	blx	r8
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d103      	bne.n	8006e94 <_printf_common+0xac>
 8006e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e94:	3501      	adds	r5, #1
 8006e96:	e7c6      	b.n	8006e26 <_printf_common+0x3e>
 8006e98:	18e1      	adds	r1, r4, r3
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	2030      	movs	r0, #48	; 0x30
 8006e9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ea2:	4422      	add	r2, r4
 8006ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eac:	3302      	adds	r3, #2
 8006eae:	e7c7      	b.n	8006e40 <_printf_common+0x58>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	47c0      	blx	r8
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d0e6      	beq.n	8006e8c <_printf_common+0xa4>
 8006ebe:	3601      	adds	r6, #1
 8006ec0:	e7d9      	b.n	8006e76 <_printf_common+0x8e>
	...

08006ec4 <_printf_i>:
 8006ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec8:	7e0f      	ldrb	r7, [r1, #24]
 8006eca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ecc:	2f78      	cmp	r7, #120	; 0x78
 8006ece:	4691      	mov	r9, r2
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	469a      	mov	sl, r3
 8006ed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006eda:	d807      	bhi.n	8006eec <_printf_i+0x28>
 8006edc:	2f62      	cmp	r7, #98	; 0x62
 8006ede:	d80a      	bhi.n	8006ef6 <_printf_i+0x32>
 8006ee0:	2f00      	cmp	r7, #0
 8006ee2:	f000 80d4 	beq.w	800708e <_printf_i+0x1ca>
 8006ee6:	2f58      	cmp	r7, #88	; 0x58
 8006ee8:	f000 80c0 	beq.w	800706c <_printf_i+0x1a8>
 8006eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ef4:	e03a      	b.n	8006f6c <_printf_i+0xa8>
 8006ef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006efa:	2b15      	cmp	r3, #21
 8006efc:	d8f6      	bhi.n	8006eec <_printf_i+0x28>
 8006efe:	a101      	add	r1, pc, #4	; (adr r1, 8006f04 <_printf_i+0x40>)
 8006f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f04:	08006f5d 	.word	0x08006f5d
 8006f08:	08006f71 	.word	0x08006f71
 8006f0c:	08006eed 	.word	0x08006eed
 8006f10:	08006eed 	.word	0x08006eed
 8006f14:	08006eed 	.word	0x08006eed
 8006f18:	08006eed 	.word	0x08006eed
 8006f1c:	08006f71 	.word	0x08006f71
 8006f20:	08006eed 	.word	0x08006eed
 8006f24:	08006eed 	.word	0x08006eed
 8006f28:	08006eed 	.word	0x08006eed
 8006f2c:	08006eed 	.word	0x08006eed
 8006f30:	08007075 	.word	0x08007075
 8006f34:	08006f9d 	.word	0x08006f9d
 8006f38:	0800702f 	.word	0x0800702f
 8006f3c:	08006eed 	.word	0x08006eed
 8006f40:	08006eed 	.word	0x08006eed
 8006f44:	08007097 	.word	0x08007097
 8006f48:	08006eed 	.word	0x08006eed
 8006f4c:	08006f9d 	.word	0x08006f9d
 8006f50:	08006eed 	.word	0x08006eed
 8006f54:	08006eed 	.word	0x08006eed
 8006f58:	08007037 	.word	0x08007037
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	1d1a      	adds	r2, r3, #4
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	602a      	str	r2, [r5, #0]
 8006f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e09f      	b.n	80070b0 <_printf_i+0x1ec>
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	682b      	ldr	r3, [r5, #0]
 8006f74:	0607      	lsls	r7, r0, #24
 8006f76:	f103 0104 	add.w	r1, r3, #4
 8006f7a:	6029      	str	r1, [r5, #0]
 8006f7c:	d501      	bpl.n	8006f82 <_printf_i+0xbe>
 8006f7e:	681e      	ldr	r6, [r3, #0]
 8006f80:	e003      	b.n	8006f8a <_printf_i+0xc6>
 8006f82:	0646      	lsls	r6, r0, #25
 8006f84:	d5fb      	bpl.n	8006f7e <_printf_i+0xba>
 8006f86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f8a:	2e00      	cmp	r6, #0
 8006f8c:	da03      	bge.n	8006f96 <_printf_i+0xd2>
 8006f8e:	232d      	movs	r3, #45	; 0x2d
 8006f90:	4276      	negs	r6, r6
 8006f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f96:	485a      	ldr	r0, [pc, #360]	; (8007100 <_printf_i+0x23c>)
 8006f98:	230a      	movs	r3, #10
 8006f9a:	e012      	b.n	8006fc2 <_printf_i+0xfe>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	6820      	ldr	r0, [r4, #0]
 8006fa0:	1d19      	adds	r1, r3, #4
 8006fa2:	6029      	str	r1, [r5, #0]
 8006fa4:	0605      	lsls	r5, r0, #24
 8006fa6:	d501      	bpl.n	8006fac <_printf_i+0xe8>
 8006fa8:	681e      	ldr	r6, [r3, #0]
 8006faa:	e002      	b.n	8006fb2 <_printf_i+0xee>
 8006fac:	0641      	lsls	r1, r0, #25
 8006fae:	d5fb      	bpl.n	8006fa8 <_printf_i+0xe4>
 8006fb0:	881e      	ldrh	r6, [r3, #0]
 8006fb2:	4853      	ldr	r0, [pc, #332]	; (8007100 <_printf_i+0x23c>)
 8006fb4:	2f6f      	cmp	r7, #111	; 0x6f
 8006fb6:	bf0c      	ite	eq
 8006fb8:	2308      	moveq	r3, #8
 8006fba:	230a      	movne	r3, #10
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fc2:	6865      	ldr	r5, [r4, #4]
 8006fc4:	60a5      	str	r5, [r4, #8]
 8006fc6:	2d00      	cmp	r5, #0
 8006fc8:	bfa2      	ittt	ge
 8006fca:	6821      	ldrge	r1, [r4, #0]
 8006fcc:	f021 0104 	bicge.w	r1, r1, #4
 8006fd0:	6021      	strge	r1, [r4, #0]
 8006fd2:	b90e      	cbnz	r6, 8006fd8 <_printf_i+0x114>
 8006fd4:	2d00      	cmp	r5, #0
 8006fd6:	d04b      	beq.n	8007070 <_printf_i+0x1ac>
 8006fd8:	4615      	mov	r5, r2
 8006fda:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fde:	fb03 6711 	mls	r7, r3, r1, r6
 8006fe2:	5dc7      	ldrb	r7, [r0, r7]
 8006fe4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fe8:	4637      	mov	r7, r6
 8006fea:	42bb      	cmp	r3, r7
 8006fec:	460e      	mov	r6, r1
 8006fee:	d9f4      	bls.n	8006fda <_printf_i+0x116>
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d10b      	bne.n	800700c <_printf_i+0x148>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	07de      	lsls	r6, r3, #31
 8006ff8:	d508      	bpl.n	800700c <_printf_i+0x148>
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	6861      	ldr	r1, [r4, #4]
 8006ffe:	4299      	cmp	r1, r3
 8007000:	bfde      	ittt	le
 8007002:	2330      	movle	r3, #48	; 0x30
 8007004:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007008:	f105 35ff 	addle.w	r5, r5, #4294967295
 800700c:	1b52      	subs	r2, r2, r5
 800700e:	6122      	str	r2, [r4, #16]
 8007010:	f8cd a000 	str.w	sl, [sp]
 8007014:	464b      	mov	r3, r9
 8007016:	aa03      	add	r2, sp, #12
 8007018:	4621      	mov	r1, r4
 800701a:	4640      	mov	r0, r8
 800701c:	f7ff fee4 	bl	8006de8 <_printf_common>
 8007020:	3001      	adds	r0, #1
 8007022:	d14a      	bne.n	80070ba <_printf_i+0x1f6>
 8007024:	f04f 30ff 	mov.w	r0, #4294967295
 8007028:	b004      	add	sp, #16
 800702a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	f043 0320 	orr.w	r3, r3, #32
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	4833      	ldr	r0, [pc, #204]	; (8007104 <_printf_i+0x240>)
 8007038:	2778      	movs	r7, #120	; 0x78
 800703a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	6829      	ldr	r1, [r5, #0]
 8007042:	061f      	lsls	r7, r3, #24
 8007044:	f851 6b04 	ldr.w	r6, [r1], #4
 8007048:	d402      	bmi.n	8007050 <_printf_i+0x18c>
 800704a:	065f      	lsls	r7, r3, #25
 800704c:	bf48      	it	mi
 800704e:	b2b6      	uxthmi	r6, r6
 8007050:	07df      	lsls	r7, r3, #31
 8007052:	bf48      	it	mi
 8007054:	f043 0320 	orrmi.w	r3, r3, #32
 8007058:	6029      	str	r1, [r5, #0]
 800705a:	bf48      	it	mi
 800705c:	6023      	strmi	r3, [r4, #0]
 800705e:	b91e      	cbnz	r6, 8007068 <_printf_i+0x1a4>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	f023 0320 	bic.w	r3, r3, #32
 8007066:	6023      	str	r3, [r4, #0]
 8007068:	2310      	movs	r3, #16
 800706a:	e7a7      	b.n	8006fbc <_printf_i+0xf8>
 800706c:	4824      	ldr	r0, [pc, #144]	; (8007100 <_printf_i+0x23c>)
 800706e:	e7e4      	b.n	800703a <_printf_i+0x176>
 8007070:	4615      	mov	r5, r2
 8007072:	e7bd      	b.n	8006ff0 <_printf_i+0x12c>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	6826      	ldr	r6, [r4, #0]
 8007078:	6961      	ldr	r1, [r4, #20]
 800707a:	1d18      	adds	r0, r3, #4
 800707c:	6028      	str	r0, [r5, #0]
 800707e:	0635      	lsls	r5, r6, #24
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	d501      	bpl.n	8007088 <_printf_i+0x1c4>
 8007084:	6019      	str	r1, [r3, #0]
 8007086:	e002      	b.n	800708e <_printf_i+0x1ca>
 8007088:	0670      	lsls	r0, r6, #25
 800708a:	d5fb      	bpl.n	8007084 <_printf_i+0x1c0>
 800708c:	8019      	strh	r1, [r3, #0]
 800708e:	2300      	movs	r3, #0
 8007090:	6123      	str	r3, [r4, #16]
 8007092:	4615      	mov	r5, r2
 8007094:	e7bc      	b.n	8007010 <_printf_i+0x14c>
 8007096:	682b      	ldr	r3, [r5, #0]
 8007098:	1d1a      	adds	r2, r3, #4
 800709a:	602a      	str	r2, [r5, #0]
 800709c:	681d      	ldr	r5, [r3, #0]
 800709e:	6862      	ldr	r2, [r4, #4]
 80070a0:	2100      	movs	r1, #0
 80070a2:	4628      	mov	r0, r5
 80070a4:	f7f9 f8bc 	bl	8000220 <memchr>
 80070a8:	b108      	cbz	r0, 80070ae <_printf_i+0x1ea>
 80070aa:	1b40      	subs	r0, r0, r5
 80070ac:	6060      	str	r0, [r4, #4]
 80070ae:	6863      	ldr	r3, [r4, #4]
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	2300      	movs	r3, #0
 80070b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b8:	e7aa      	b.n	8007010 <_printf_i+0x14c>
 80070ba:	6923      	ldr	r3, [r4, #16]
 80070bc:	462a      	mov	r2, r5
 80070be:	4649      	mov	r1, r9
 80070c0:	4640      	mov	r0, r8
 80070c2:	47d0      	blx	sl
 80070c4:	3001      	adds	r0, #1
 80070c6:	d0ad      	beq.n	8007024 <_printf_i+0x160>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	079b      	lsls	r3, r3, #30
 80070cc:	d413      	bmi.n	80070f6 <_printf_i+0x232>
 80070ce:	68e0      	ldr	r0, [r4, #12]
 80070d0:	9b03      	ldr	r3, [sp, #12]
 80070d2:	4298      	cmp	r0, r3
 80070d4:	bfb8      	it	lt
 80070d6:	4618      	movlt	r0, r3
 80070d8:	e7a6      	b.n	8007028 <_printf_i+0x164>
 80070da:	2301      	movs	r3, #1
 80070dc:	4632      	mov	r2, r6
 80070de:	4649      	mov	r1, r9
 80070e0:	4640      	mov	r0, r8
 80070e2:	47d0      	blx	sl
 80070e4:	3001      	adds	r0, #1
 80070e6:	d09d      	beq.n	8007024 <_printf_i+0x160>
 80070e8:	3501      	adds	r5, #1
 80070ea:	68e3      	ldr	r3, [r4, #12]
 80070ec:	9903      	ldr	r1, [sp, #12]
 80070ee:	1a5b      	subs	r3, r3, r1
 80070f0:	42ab      	cmp	r3, r5
 80070f2:	dcf2      	bgt.n	80070da <_printf_i+0x216>
 80070f4:	e7eb      	b.n	80070ce <_printf_i+0x20a>
 80070f6:	2500      	movs	r5, #0
 80070f8:	f104 0619 	add.w	r6, r4, #25
 80070fc:	e7f5      	b.n	80070ea <_printf_i+0x226>
 80070fe:	bf00      	nop
 8007100:	080074d8 	.word	0x080074d8
 8007104:	080074e9 	.word	0x080074e9

08007108 <__swbuf_r>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	460e      	mov	r6, r1
 800710c:	4614      	mov	r4, r2
 800710e:	4605      	mov	r5, r0
 8007110:	b118      	cbz	r0, 800711a <__swbuf_r+0x12>
 8007112:	6a03      	ldr	r3, [r0, #32]
 8007114:	b90b      	cbnz	r3, 800711a <__swbuf_r+0x12>
 8007116:	f7ff fa39 	bl	800658c <__sinit>
 800711a:	69a3      	ldr	r3, [r4, #24]
 800711c:	60a3      	str	r3, [r4, #8]
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	071a      	lsls	r2, r3, #28
 8007122:	d525      	bpl.n	8007170 <__swbuf_r+0x68>
 8007124:	6923      	ldr	r3, [r4, #16]
 8007126:	b31b      	cbz	r3, 8007170 <__swbuf_r+0x68>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	6922      	ldr	r2, [r4, #16]
 800712c:	1a98      	subs	r0, r3, r2
 800712e:	6963      	ldr	r3, [r4, #20]
 8007130:	b2f6      	uxtb	r6, r6
 8007132:	4283      	cmp	r3, r0
 8007134:	4637      	mov	r7, r6
 8007136:	dc04      	bgt.n	8007142 <__swbuf_r+0x3a>
 8007138:	4621      	mov	r1, r4
 800713a:	4628      	mov	r0, r5
 800713c:	f7ff fcc0 	bl	8006ac0 <_fflush_r>
 8007140:	b9e0      	cbnz	r0, 800717c <__swbuf_r+0x74>
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	3b01      	subs	r3, #1
 8007146:	60a3      	str	r3, [r4, #8]
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	6022      	str	r2, [r4, #0]
 800714e:	701e      	strb	r6, [r3, #0]
 8007150:	6962      	ldr	r2, [r4, #20]
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	429a      	cmp	r2, r3
 8007156:	d004      	beq.n	8007162 <__swbuf_r+0x5a>
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	07db      	lsls	r3, r3, #31
 800715c:	d506      	bpl.n	800716c <__swbuf_r+0x64>
 800715e:	2e0a      	cmp	r6, #10
 8007160:	d104      	bne.n	800716c <__swbuf_r+0x64>
 8007162:	4621      	mov	r1, r4
 8007164:	4628      	mov	r0, r5
 8007166:	f7ff fcab 	bl	8006ac0 <_fflush_r>
 800716a:	b938      	cbnz	r0, 800717c <__swbuf_r+0x74>
 800716c:	4638      	mov	r0, r7
 800716e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007170:	4621      	mov	r1, r4
 8007172:	4628      	mov	r0, r5
 8007174:	f000 f806 	bl	8007184 <__swsetup_r>
 8007178:	2800      	cmp	r0, #0
 800717a:	d0d5      	beq.n	8007128 <__swbuf_r+0x20>
 800717c:	f04f 37ff 	mov.w	r7, #4294967295
 8007180:	e7f4      	b.n	800716c <__swbuf_r+0x64>
	...

08007184 <__swsetup_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4b2a      	ldr	r3, [pc, #168]	; (8007230 <__swsetup_r+0xac>)
 8007188:	4605      	mov	r5, r0
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	460c      	mov	r4, r1
 800718e:	b118      	cbz	r0, 8007198 <__swsetup_r+0x14>
 8007190:	6a03      	ldr	r3, [r0, #32]
 8007192:	b90b      	cbnz	r3, 8007198 <__swsetup_r+0x14>
 8007194:	f7ff f9fa 	bl	800658c <__sinit>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800719e:	0718      	lsls	r0, r3, #28
 80071a0:	d422      	bmi.n	80071e8 <__swsetup_r+0x64>
 80071a2:	06d9      	lsls	r1, r3, #27
 80071a4:	d407      	bmi.n	80071b6 <__swsetup_r+0x32>
 80071a6:	2309      	movs	r3, #9
 80071a8:	602b      	str	r3, [r5, #0]
 80071aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071ae:	81a3      	strh	r3, [r4, #12]
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	e034      	b.n	8007220 <__swsetup_r+0x9c>
 80071b6:	0758      	lsls	r0, r3, #29
 80071b8:	d512      	bpl.n	80071e0 <__swsetup_r+0x5c>
 80071ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071bc:	b141      	cbz	r1, 80071d0 <__swsetup_r+0x4c>
 80071be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071c2:	4299      	cmp	r1, r3
 80071c4:	d002      	beq.n	80071cc <__swsetup_r+0x48>
 80071c6:	4628      	mov	r0, r5
 80071c8:	f7ff faf4 	bl	80067b4 <_free_r>
 80071cc:	2300      	movs	r3, #0
 80071ce:	6363      	str	r3, [r4, #52]	; 0x34
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071d6:	81a3      	strh	r3, [r4, #12]
 80071d8:	2300      	movs	r3, #0
 80071da:	6063      	str	r3, [r4, #4]
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	6023      	str	r3, [r4, #0]
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	f043 0308 	orr.w	r3, r3, #8
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	6923      	ldr	r3, [r4, #16]
 80071ea:	b94b      	cbnz	r3, 8007200 <__swsetup_r+0x7c>
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071f6:	d003      	beq.n	8007200 <__swsetup_r+0x7c>
 80071f8:	4621      	mov	r1, r4
 80071fa:	4628      	mov	r0, r5
 80071fc:	f000 f884 	bl	8007308 <__smakebuf_r>
 8007200:	89a0      	ldrh	r0, [r4, #12]
 8007202:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007206:	f010 0301 	ands.w	r3, r0, #1
 800720a:	d00a      	beq.n	8007222 <__swsetup_r+0x9e>
 800720c:	2300      	movs	r3, #0
 800720e:	60a3      	str	r3, [r4, #8]
 8007210:	6963      	ldr	r3, [r4, #20]
 8007212:	425b      	negs	r3, r3
 8007214:	61a3      	str	r3, [r4, #24]
 8007216:	6923      	ldr	r3, [r4, #16]
 8007218:	b943      	cbnz	r3, 800722c <__swsetup_r+0xa8>
 800721a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800721e:	d1c4      	bne.n	80071aa <__swsetup_r+0x26>
 8007220:	bd38      	pop	{r3, r4, r5, pc}
 8007222:	0781      	lsls	r1, r0, #30
 8007224:	bf58      	it	pl
 8007226:	6963      	ldrpl	r3, [r4, #20]
 8007228:	60a3      	str	r3, [r4, #8]
 800722a:	e7f4      	b.n	8007216 <__swsetup_r+0x92>
 800722c:	2000      	movs	r0, #0
 800722e:	e7f7      	b.n	8007220 <__swsetup_r+0x9c>
 8007230:	20000068 	.word	0x20000068

08007234 <_raise_r>:
 8007234:	291f      	cmp	r1, #31
 8007236:	b538      	push	{r3, r4, r5, lr}
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	d904      	bls.n	8007248 <_raise_r+0x14>
 800723e:	2316      	movs	r3, #22
 8007240:	6003      	str	r3, [r0, #0]
 8007242:	f04f 30ff 	mov.w	r0, #4294967295
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800724a:	b112      	cbz	r2, 8007252 <_raise_r+0x1e>
 800724c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007250:	b94b      	cbnz	r3, 8007266 <_raise_r+0x32>
 8007252:	4620      	mov	r0, r4
 8007254:	f000 f830 	bl	80072b8 <_getpid_r>
 8007258:	462a      	mov	r2, r5
 800725a:	4601      	mov	r1, r0
 800725c:	4620      	mov	r0, r4
 800725e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007262:	f000 b817 	b.w	8007294 <_kill_r>
 8007266:	2b01      	cmp	r3, #1
 8007268:	d00a      	beq.n	8007280 <_raise_r+0x4c>
 800726a:	1c59      	adds	r1, r3, #1
 800726c:	d103      	bne.n	8007276 <_raise_r+0x42>
 800726e:	2316      	movs	r3, #22
 8007270:	6003      	str	r3, [r0, #0]
 8007272:	2001      	movs	r0, #1
 8007274:	e7e7      	b.n	8007246 <_raise_r+0x12>
 8007276:	2400      	movs	r4, #0
 8007278:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800727c:	4628      	mov	r0, r5
 800727e:	4798      	blx	r3
 8007280:	2000      	movs	r0, #0
 8007282:	e7e0      	b.n	8007246 <_raise_r+0x12>

08007284 <raise>:
 8007284:	4b02      	ldr	r3, [pc, #8]	; (8007290 <raise+0xc>)
 8007286:	4601      	mov	r1, r0
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	f7ff bfd3 	b.w	8007234 <_raise_r>
 800728e:	bf00      	nop
 8007290:	20000068 	.word	0x20000068

08007294 <_kill_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d07      	ldr	r5, [pc, #28]	; (80072b4 <_kill_r+0x20>)
 8007298:	2300      	movs	r3, #0
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	4611      	mov	r1, r2
 80072a0:	602b      	str	r3, [r5, #0]
 80072a2:	f7fa f811 	bl	80012c8 <_kill>
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	d102      	bne.n	80072b0 <_kill_r+0x1c>
 80072aa:	682b      	ldr	r3, [r5, #0]
 80072ac:	b103      	cbz	r3, 80072b0 <_kill_r+0x1c>
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	bd38      	pop	{r3, r4, r5, pc}
 80072b2:	bf00      	nop
 80072b4:	20000438 	.word	0x20000438

080072b8 <_getpid_r>:
 80072b8:	f7f9 bffe 	b.w	80012b8 <_getpid>

080072bc <__swhatbuf_r>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	460c      	mov	r4, r1
 80072c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c4:	2900      	cmp	r1, #0
 80072c6:	b096      	sub	sp, #88	; 0x58
 80072c8:	4615      	mov	r5, r2
 80072ca:	461e      	mov	r6, r3
 80072cc:	da0d      	bge.n	80072ea <__swhatbuf_r+0x2e>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80072d4:	f04f 0100 	mov.w	r1, #0
 80072d8:	bf0c      	ite	eq
 80072da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80072de:	2340      	movne	r3, #64	; 0x40
 80072e0:	2000      	movs	r0, #0
 80072e2:	6031      	str	r1, [r6, #0]
 80072e4:	602b      	str	r3, [r5, #0]
 80072e6:	b016      	add	sp, #88	; 0x58
 80072e8:	bd70      	pop	{r4, r5, r6, pc}
 80072ea:	466a      	mov	r2, sp
 80072ec:	f000 f848 	bl	8007380 <_fstat_r>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	dbec      	blt.n	80072ce <__swhatbuf_r+0x12>
 80072f4:	9901      	ldr	r1, [sp, #4]
 80072f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80072fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80072fe:	4259      	negs	r1, r3
 8007300:	4159      	adcs	r1, r3
 8007302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007306:	e7eb      	b.n	80072e0 <__swhatbuf_r+0x24>

08007308 <__smakebuf_r>:
 8007308:	898b      	ldrh	r3, [r1, #12]
 800730a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800730c:	079d      	lsls	r5, r3, #30
 800730e:	4606      	mov	r6, r0
 8007310:	460c      	mov	r4, r1
 8007312:	d507      	bpl.n	8007324 <__smakebuf_r+0x1c>
 8007314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	6123      	str	r3, [r4, #16]
 800731c:	2301      	movs	r3, #1
 800731e:	6163      	str	r3, [r4, #20]
 8007320:	b002      	add	sp, #8
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	ab01      	add	r3, sp, #4
 8007326:	466a      	mov	r2, sp
 8007328:	f7ff ffc8 	bl	80072bc <__swhatbuf_r>
 800732c:	9900      	ldr	r1, [sp, #0]
 800732e:	4605      	mov	r5, r0
 8007330:	4630      	mov	r0, r6
 8007332:	f7ff fab3 	bl	800689c <_malloc_r>
 8007336:	b948      	cbnz	r0, 800734c <__smakebuf_r+0x44>
 8007338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800733c:	059a      	lsls	r2, r3, #22
 800733e:	d4ef      	bmi.n	8007320 <__smakebuf_r+0x18>
 8007340:	f023 0303 	bic.w	r3, r3, #3
 8007344:	f043 0302 	orr.w	r3, r3, #2
 8007348:	81a3      	strh	r3, [r4, #12]
 800734a:	e7e3      	b.n	8007314 <__smakebuf_r+0xc>
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	6020      	str	r0, [r4, #0]
 8007350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	9b00      	ldr	r3, [sp, #0]
 8007358:	6163      	str	r3, [r4, #20]
 800735a:	9b01      	ldr	r3, [sp, #4]
 800735c:	6120      	str	r0, [r4, #16]
 800735e:	b15b      	cbz	r3, 8007378 <__smakebuf_r+0x70>
 8007360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007364:	4630      	mov	r0, r6
 8007366:	f000 f81d 	bl	80073a4 <_isatty_r>
 800736a:	b128      	cbz	r0, 8007378 <__smakebuf_r+0x70>
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	f023 0303 	bic.w	r3, r3, #3
 8007372:	f043 0301 	orr.w	r3, r3, #1
 8007376:	81a3      	strh	r3, [r4, #12]
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	431d      	orrs	r5, r3
 800737c:	81a5      	strh	r5, [r4, #12]
 800737e:	e7cf      	b.n	8007320 <__smakebuf_r+0x18>

08007380 <_fstat_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d07      	ldr	r5, [pc, #28]	; (80073a0 <_fstat_r+0x20>)
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	4611      	mov	r1, r2
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	f7f9 fffa 	bl	8001386 <_fstat>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	d102      	bne.n	800739c <_fstat_r+0x1c>
 8007396:	682b      	ldr	r3, [r5, #0]
 8007398:	b103      	cbz	r3, 800739c <_fstat_r+0x1c>
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	bf00      	nop
 80073a0:	20000438 	.word	0x20000438

080073a4 <_isatty_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4d06      	ldr	r5, [pc, #24]	; (80073c0 <_isatty_r+0x1c>)
 80073a8:	2300      	movs	r3, #0
 80073aa:	4604      	mov	r4, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	f7f9 fff9 	bl	80013a6 <_isatty>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_isatty_r+0x1a>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_isatty_r+0x1a>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	20000438 	.word	0x20000438

080073c4 <_init>:
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c6:	bf00      	nop
 80073c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ca:	bc08      	pop	{r3}
 80073cc:	469e      	mov	lr, r3
 80073ce:	4770      	bx	lr

080073d0 <_fini>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	bf00      	nop
 80073d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d6:	bc08      	pop	{r3}
 80073d8:	469e      	mov	lr, r3
 80073da:	4770      	bx	lr
