
GamePon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005010  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005228  08005228  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005230  08005230  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000010  08005248  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08005248  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107b9  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002278  00000000  00000000  0003083c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  00032ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a39  00000000  00000000  000337d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024969  00000000  00000000  00034211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011120  00000000  00000000  00058b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8a86  00000000  00000000  00069c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003630  00000000  00000000  00152720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00155d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080051d0 	.word	0x080051d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080051d0 	.word	0x080051d0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fbcf 	bl	8000cba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f814 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f91a 	bl	8000758 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f8e6 	bl	80006f4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f89a 	bl	8000660 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800052c:	f000 f858 	bl	80005e0 <MX_I2C1_Init>
//	  ReadEEPROMSeq(0x2C, I2CReadBuffer, 4, &I2CReadTrigger);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  EEPROMReadExample(eepromDataReadBack, 4);
 8000530:	2104      	movs	r1, #4
 8000532:	4804      	ldr	r0, [pc, #16]	; (8000544 <main+0x30>)
 8000534:	f000 f9a2 	bl	800087c <EEPROMReadExample>
	  HAL_Delay(100);
 8000538:	2064      	movs	r0, #100	; 0x64
 800053a:	f000 fc2f 	bl	8000d9c <HAL_Delay>
	  EEPROMWriteExample();
 800053e:	f000 f979 	bl	8000834 <EEPROMWriteExample>
  {
 8000542:	e7f5      	b.n	8000530 <main+0x1c>
 8000544:	200001d8 	.word	0x200001d8

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	2238      	movs	r2, #56	; 0x38
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f004 fe0e 	bl	8005178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800056a:	2000      	movs	r0, #0
 800056c:	f002 ff66 	bl	800343c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	2340      	movs	r3, #64	; 0x40
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000586:	2304      	movs	r3, #4
 8000588:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800058a:	2355      	movs	r3, #85	; 0x55
 800058c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0318 	add.w	r3, r7, #24
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 f800 	bl	80035a4 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005aa:	f000 f98d 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2303      	movs	r3, #3
 80005b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fafe 	bl	8003bc8 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005d2:	f000 f979 	bl	80008c8 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	; 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_I2C1_Init+0x74>)
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <MX_I2C1_Init+0x78>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_I2C1_Init+0x74>)
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <MX_I2C1_Init+0x7c>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_I2C1_Init+0x74>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_I2C1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061a:	480e      	ldr	r0, [pc, #56]	; (8000654 <MX_I2C1_Init+0x74>)
 800061c:	f001 f8db 	bl	80017d6 <HAL_I2C_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000626:	f000 f94f 	bl	80008c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800062a:	2100      	movs	r1, #0
 800062c:	4809      	ldr	r0, [pc, #36]	; (8000654 <MX_I2C1_Init+0x74>)
 800062e:	f002 fe6d 	bl	800330c <HAL_I2CEx_ConfigAnalogFilter>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000638:	f000 f946 	bl	80008c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800063c:	2100      	movs	r1, #0
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_I2C1_Init+0x74>)
 8000640:	f002 feaf 	bl	80033a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 f93d 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000002c 	.word	0x2000002c
 8000658:	40005400 	.word	0x40005400
 800065c:	30a0a7fb 	.word	0x30a0a7fb

08000660 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 8000666:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000668:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006a2:	4812      	ldr	r0, [pc, #72]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 80006a4:	f003 fefa 	bl	800449c <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ae:	f000 f90b 	bl	80008c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b2:	2100      	movs	r1, #0
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 80006b6:	f004 fc95 	bl	8004fe4 <HAL_UARTEx_SetTxFifoThreshold>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006c0:	f000 f902 	bl	80008c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006c4:	2100      	movs	r1, #0
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 80006c8:	f004 fcca 	bl	8005060 <HAL_UARTEx_SetRxFifoThreshold>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006d2:	f000 f8f9 	bl	80008c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 80006d8:	f004 fc4b 	bl	8004f72 <HAL_UARTEx_DisableFifoMode>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006e2:	f000 f8f1 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000140 	.word	0x20000140
 80006f0:	40008000 	.word	0x40008000

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_DMA_Init+0x60>)
 80006fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_DMA_Init+0x60>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6493      	str	r3, [r2, #72]	; 0x48
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_DMA_Init+0x60>)
 8000708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_DMA_Init+0x60>)
 8000714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MX_DMA_Init+0x60>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6493      	str	r3, [r2, #72]	; 0x48
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_DMA_Init+0x60>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	200b      	movs	r0, #11
 8000730:	f000 fc31 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000734:	200b      	movs	r0, #11
 8000736:	f000 fc48 	bl	8000fca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	200c      	movs	r0, #12
 8000740:	f000 fc29 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000744:	200c      	movs	r0, #12
 8000746:	f000 fc40 	bl	8000fca <HAL_NVIC_EnableIRQ>

}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <MX_GPIO_Init+0xd4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a2e      	ldr	r2, [pc, #184]	; (800082c <MX_GPIO_Init+0xd4>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_GPIO_Init+0xd4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_GPIO_Init+0xd4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a28      	ldr	r2, [pc, #160]	; (800082c <MX_GPIO_Init+0xd4>)
 800078c:	f043 0320 	orr.w	r3, r3, #32
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_GPIO_Init+0xd4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0320 	and.w	r3, r3, #32
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a22      	ldr	r2, [pc, #136]	; (800082c <MX_GPIO_Init+0xd4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_GPIO_Init+0xd4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_GPIO_Init+0xd4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_GPIO_Init+0xd4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_GPIO_Init+0xd4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2120      	movs	r1, #32
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f000 ffc3 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	480f      	ldr	r0, [pc, #60]	; (8000830 <MX_GPIO_Init+0xd8>)
 80007f2:	f000 fe33 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f6:	2320      	movs	r3, #32
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f000 fe24 	bl	800145c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2028      	movs	r0, #40	; 0x28
 800081a:	f000 fbbc 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800081e:	2028      	movs	r0, #40	; 0x28
 8000820:	f000 fbd3 	bl	8000fca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	48000800 	.word	0x48000800

08000834 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */
void EEPROMWriteExample() {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <EEPROMWriteExample+0x3c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d012      	beq.n	8000868 <EEPROMWriteExample+0x34>
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <EEPROMWriteExample+0x40>)
 8000844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b20      	cmp	r3, #32
 800084c:	d10c      	bne.n	8000868 <EEPROMWriteExample+0x34>
		static uint8_t data[4] = { 0x50, 0x4F, 0x4E, 0x31 };
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 4);
 800084e:	2304      	movs	r3, #4
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <EEPROMWriteExample+0x44>)
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2302      	movs	r3, #2
 8000858:	222c      	movs	r2, #44	; 0x2c
 800085a:	21a0      	movs	r1, #160	; 0xa0
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <EEPROMWriteExample+0x40>)
 800085e:	f001 f855 	bl	800190c <HAL_I2C_Mem_Write_IT>
		eepromExampleWriteFlag = 0;
 8000862:	4b03      	ldr	r3, [pc, #12]	; (8000870 <EEPROMWriteExample+0x3c>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
	}
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200001d4 	.word	0x200001d4
 8000874:	2000002c 	.word	0x2000002c
 8000878:	20000000 	.word	0x20000000

0800087c <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af02      	add	r7, sp, #8
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <EEPROMReadExample+0x44>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d012      	beq.n	80008b6 <EEPROMReadExample+0x3a>
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <EEPROMReadExample+0x48>)
 8000892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b20      	cmp	r3, #32
 800089a:	d10c      	bne.n	80008b6 <EEPROMReadExample+0x3a>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 800089c:	887b      	ldrh	r3, [r7, #2]
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	222c      	movs	r2, #44	; 0x2c
 80008a8:	21a0      	movs	r1, #160	; 0xa0
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <EEPROMReadExample+0x48>)
 80008ac:	f001 f8b8 	bl	8001a20 <HAL_I2C_Mem_Read_IT>
		eepromExampleReadFlag = 0;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <EEPROMReadExample+0x44>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
	}
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200001d5 	.word	0x200001d5
 80008c4:	2000002c 	.word	0x2000002c

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_MspInit+0x44>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6613      	str	r3, [r2, #96]	; 0x60
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x44>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6593      	str	r3, [r2, #88]	; 0x58
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800090a:	f002 fe3b 	bl	8003584 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b0a0      	sub	sp, #128	; 0x80
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	2254      	movs	r2, #84	; 0x54
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f004 fc1b 	bl	8005178 <memset>
  if(hi2c->Instance==I2C1)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a5f      	ldr	r2, [pc, #380]	; (8000ac4 <HAL_I2C_MspInit+0x1a8>)
 8000948:	4293      	cmp	r3, r2
 800094a:	f040 80b6 	bne.w	8000aba <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800094e:	2340      	movs	r3, #64	; 0x40
 8000950:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000952:	2300      	movs	r3, #0
 8000954:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fb50 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000966:	f7ff ffaf 	bl	80008c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b57      	ldr	r3, [pc, #348]	; (8000ac8 <HAL_I2C_MspInit+0x1ac>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a56      	ldr	r2, [pc, #344]	; (8000ac8 <HAL_I2C_MspInit+0x1ac>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b54      	ldr	r3, [pc, #336]	; (8000ac8 <HAL_I2C_MspInit+0x1ac>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b51      	ldr	r3, [pc, #324]	; (8000ac8 <HAL_I2C_MspInit+0x1ac>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a50      	ldr	r2, [pc, #320]	; (8000ac8 <HAL_I2C_MspInit+0x1ac>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b4e      	ldr	r3, [pc, #312]	; (8000ac8 <HAL_I2C_MspInit+0x1ac>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800099a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800099e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a0:	2312      	movs	r3, #18
 80009a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ac:	2304      	movs	r3, #4
 80009ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009b4:	4619      	mov	r1, r3
 80009b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ba:	f000 fd4f 	bl	800145c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c2:	2312      	movs	r3, #18
 80009c4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ce:	2304      	movs	r3, #4
 80009d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009d6:	4619      	mov	r1, r3
 80009d8:	483c      	ldr	r0, [pc, #240]	; (8000acc <HAL_I2C_MspInit+0x1b0>)
 80009da:	f000 fd3f 	bl	800145c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009de:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <HAL_I2C_MspInit+0x1ac>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	4a39      	ldr	r2, [pc, #228]	; (8000ac8 <HAL_I2C_MspInit+0x1ac>)
 80009e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ea:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <HAL_I2C_MspInit+0x1ac>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 80009f6:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <HAL_I2C_MspInit+0x1b4>)
 80009f8:	4a36      	ldr	r2, [pc, #216]	; (8000ad4 <HAL_I2C_MspInit+0x1b8>)
 80009fa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80009fc:	4b34      	ldr	r3, [pc, #208]	; (8000ad0 <HAL_I2C_MspInit+0x1b4>)
 80009fe:	2210      	movs	r2, #16
 8000a00:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a02:	4b33      	ldr	r3, [pc, #204]	; (8000ad0 <HAL_I2C_MspInit+0x1b4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a08:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <HAL_I2C_MspInit+0x1b4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0e:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <HAL_I2C_MspInit+0x1b4>)
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a14:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <HAL_I2C_MspInit+0x1b4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <HAL_I2C_MspInit+0x1b4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a20:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <HAL_I2C_MspInit+0x1b4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <HAL_I2C_MspInit+0x1b4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a2c:	4828      	ldr	r0, [pc, #160]	; (8000ad0 <HAL_I2C_MspInit+0x1b4>)
 8000a2e:	f000 fae7 	bl	8001000 <HAL_DMA_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8000a38:	f7ff ff46 	bl	80008c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a24      	ldr	r2, [pc, #144]	; (8000ad0 <HAL_I2C_MspInit+0x1b4>)
 8000a40:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <HAL_I2C_MspInit+0x1b4>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <HAL_I2C_MspInit+0x1bc>)
 8000a4a:	4a24      	ldr	r2, [pc, #144]	; (8000adc <HAL_I2C_MspInit+0x1c0>)
 8000a4c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000a4e:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <HAL_I2C_MspInit+0x1bc>)
 8000a50:	2211      	movs	r2, #17
 8000a52:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a54:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <HAL_I2C_MspInit+0x1bc>)
 8000a56:	2210      	movs	r2, #16
 8000a58:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HAL_I2C_MspInit+0x1bc>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <HAL_I2C_MspInit+0x1bc>)
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_I2C_MspInit+0x1bc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <HAL_I2C_MspInit+0x1bc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_I2C_MspInit+0x1bc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_I2C_MspInit+0x1bc>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000a7e:	4816      	ldr	r0, [pc, #88]	; (8000ad8 <HAL_I2C_MspInit+0x1bc>)
 8000a80:	f000 fabe 	bl	8001000 <HAL_DMA_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8000a8a:	f7ff ff1d 	bl	80008c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <HAL_I2C_MspInit+0x1bc>)
 8000a92:	639a      	str	r2, [r3, #56]	; 0x38
 8000a94:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_I2C_MspInit+0x1bc>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	201f      	movs	r0, #31
 8000aa0:	f000 fa79 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000aa4:	201f      	movs	r0, #31
 8000aa6:	f000 fa90 	bl	8000fca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2020      	movs	r0, #32
 8000ab0:	f000 fa71 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ab4:	2020      	movs	r0, #32
 8000ab6:	f000 fa88 	bl	8000fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	3780      	adds	r7, #128	; 0x80
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000400 	.word	0x48000400
 8000ad0:	20000080 	.word	0x20000080
 8000ad4:	40020008 	.word	0x40020008
 8000ad8:	200000e0 	.word	0x200000e0
 8000adc:	4002001c 	.word	0x4002001c

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b09e      	sub	sp, #120	; 0x78
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2254      	movs	r2, #84	; 0x54
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 fb39 	bl	8005178 <memset>
  if(huart->Instance==LPUART1)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <HAL_UART_MspInit+0xa8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d136      	bne.n	8000b7e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b10:	2320      	movs	r3, #32
 8000b12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 fa6f 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b28:	f7ff fece 	bl	80008c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_UART_MspInit+0xac>)
 8000b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b30:	4a16      	ldr	r2, [pc, #88]	; (8000b8c <HAL_UART_MspInit+0xac>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <HAL_UART_MspInit+0xac>)
 8000b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_UART_MspInit+0xac>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_UART_MspInit+0xac>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_UART_MspInit+0xac>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f000 fc6f 	bl	800145c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3778      	adds	r7, #120	; 0x78
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40008000 	.word	0x40008000
 8000b8c:	40021000 	.word	0x40021000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f8c0 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <DMA1_Channel1_IRQHandler+0x10>)
 8000bea:	f000 fb18 	bl	800121e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000080 	.word	0x20000080

08000bf8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <DMA1_Channel2_IRQHandler+0x10>)
 8000bfe:	f000 fb0e 	bl	800121e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000e0 	.word	0x200000e0

08000c0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <I2C1_EV_IRQHandler+0x10>)
 8000c12:	f000 ff8b 	bl	8001b2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000002c 	.word	0x2000002c

08000c20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <I2C1_ER_IRQHandler+0x10>)
 8000c26:	f000 ff9b 	bl	8001b60 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000002c 	.word	0x2000002c

08000c34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c3c:	f000 fda8 	bl	8001790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c6c:	f7ff ffea 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <LoopForever+0xe>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	; (8000cb4 <LoopForever+0x16>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c96:	f004 fa77 	bl	8005188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9a:	f7ff fc3b 	bl	8000514 <main>

08000c9e <LoopForever>:

LoopForever:
    b LoopForever
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
  ldr   r0, =_estack
 8000ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cac:	08005238 	.word	0x08005238
  ldr r2, =_sbss
 8000cb0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cb4:	200001e0 	.word	0x200001e0

08000cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_2_IRQHandler>

08000cba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f95b 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 f80e 	bl	8000cec <HAL_InitTick>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	71fb      	strb	r3, [r7, #7]
 8000cda:	e001      	b.n	8000ce0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cdc:	f7ff fdfa 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_InitTick+0x68>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d022      	beq.n	8000d46 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_InitTick+0x6c>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_InitTick+0x68>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f966 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d10f      	bne.n	8000d40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b0f      	cmp	r3, #15
 8000d24:	d809      	bhi.n	8000d3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d26:	2200      	movs	r2, #0
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2e:	f000 f932 	bl	8000f96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_InitTick+0x70>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e007      	b.n	8000d4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e004      	b.n	8000d4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e001      	b.n	8000d4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2000000c 	.word	0x2000000c
 8000d58:	20000004 	.word	0x20000004
 8000d5c:	20000008 	.word	0x20000008

08000d60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_IncTick+0x1c>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_IncTick+0x20>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a03      	ldr	r2, [pc, #12]	; (8000d7c <HAL_IncTick+0x1c>)
 8000d70:	6013      	str	r3, [r2, #0]
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	200001dc 	.word	0x200001dc
 8000d80:	2000000c 	.word	0x2000000c

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200001dc 	.word	0x200001dc

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff ffee 	bl	8000d84 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d004      	beq.n	8000dc0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_Delay+0x40>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc0:	bf00      	nop
 8000dc2:	f7ff ffdf 	bl	8000d84 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d8f7      	bhi.n	8000dc2 <HAL_Delay+0x26>
  {
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000000c 	.word	0x2000000c

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	; (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff29 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff40 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff90 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5f 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff33 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffa4 	bl	8000f3c <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e08d      	b.n	800112e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	4b47      	ldr	r3, [pc, #284]	; (8001138 <HAL_DMA_Init+0x138>)
 800101a:	429a      	cmp	r2, r3
 800101c:	d80f      	bhi.n	800103e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	4b45      	ldr	r3, [pc, #276]	; (800113c <HAL_DMA_Init+0x13c>)
 8001026:	4413      	add	r3, r2
 8001028:	4a45      	ldr	r2, [pc, #276]	; (8001140 <HAL_DMA_Init+0x140>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	091b      	lsrs	r3, r3, #4
 8001030:	009a      	lsls	r2, r3, #2
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a42      	ldr	r2, [pc, #264]	; (8001144 <HAL_DMA_Init+0x144>)
 800103a:	641a      	str	r2, [r3, #64]	; 0x40
 800103c:	e00e      	b.n	800105c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <HAL_DMA_Init+0x148>)
 8001046:	4413      	add	r3, r2
 8001048:	4a3d      	ldr	r2, [pc, #244]	; (8001140 <HAL_DMA_Init+0x140>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	009a      	lsls	r2, r3, #2
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a3c      	ldr	r2, [pc, #240]	; (800114c <HAL_DMA_Init+0x14c>)
 800105a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2202      	movs	r2, #2
 8001060:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001076:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f972 	bl	8001398 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010bc:	d102      	bne.n	80010c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d010      	beq.n	8001104 <HAL_DMA_Init+0x104>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d80c      	bhi.n	8001104 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f992 	bl	8001414 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	e008      	b.n	8001116 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40020407 	.word	0x40020407
 800113c:	bffdfff8 	.word	0xbffdfff8
 8001140:	cccccccd 	.word	0xcccccccd
 8001144:	40020000 	.word	0x40020000
 8001148:	bffdfbf8 	.word	0xbffdfbf8
 800114c:	40020400 	.word	0x40020400

08001150 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d00d      	beq.n	8001184 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2204      	movs	r2, #4
 800116c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e047      	b.n	8001214 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 020e 	bic.w	r2, r2, #14
 8001192:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	2101      	movs	r1, #1
 80011c2:	fa01 f202 	lsl.w	r2, r1, r2
 80011c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00c      	beq.n	80011f4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	4798      	blx	r3
    }
  }
  return status;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	2204      	movs	r2, #4
 8001240:	409a      	lsls	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d026      	beq.n	8001298 <HAL_DMA_IRQHandler+0x7a>
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	d021      	beq.n	8001298 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0320 	and.w	r3, r3, #32
 800125e:	2b00      	cmp	r3, #0
 8001260:	d107      	bne.n	8001272 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0204 	bic.w	r2, r2, #4
 8001270:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f003 021f 	and.w	r2, r3, #31
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	2104      	movs	r1, #4
 8001280:	fa01 f202 	lsl.w	r2, r1, r2
 8001284:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	2b00      	cmp	r3, #0
 800128c:	d071      	beq.n	8001372 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001296:	e06c      	b.n	8001372 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	2202      	movs	r2, #2
 80012a2:	409a      	lsls	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d02e      	beq.n	800130a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d029      	beq.n	800130a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10b      	bne.n	80012dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 020a 	bic.w	r2, r2, #10
 80012d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	2102      	movs	r1, #2
 80012ea:	fa01 f202 	lsl.w	r2, r1, r2
 80012ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d038      	beq.n	8001372 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001308:	e033      	b.n	8001372 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f003 031f 	and.w	r3, r3, #31
 8001312:	2208      	movs	r2, #8
 8001314:	409a      	lsls	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d02a      	beq.n	8001374 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d025      	beq.n	8001374 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 020e 	bic.w	r2, r2, #14
 8001336:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	2101      	movs	r1, #1
 8001346:	fa01 f202 	lsl.w	r2, r1, r2
 800134a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001372:	bf00      	nop
 8001374:	bf00      	nop
}
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800138a:	b2db      	uxtb	r3, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d802      	bhi.n	80013b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e001      	b.n	80013b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80013b4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	3b08      	subs	r3, #8
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	009a      	lsls	r2, r3, #2
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4413      	add	r3, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80013e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 031f 	and.w	r3, r3, #31
 80013ea:	2201      	movs	r2, #1
 80013ec:	409a      	lsls	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80013f2:	bf00      	nop
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40020407 	.word	0x40020407
 8001404:	40020800 	.word	0x40020800
 8001408:	40020820 	.word	0x40020820
 800140c:	cccccccd 	.word	0xcccccccd
 8001410:	40020880 	.word	0x40020880

08001414 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	461a      	mov	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a08      	ldr	r2, [pc, #32]	; (8001458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001436:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	3b01      	subs	r3, #1
 800143c:	f003 031f 	and.w	r3, r3, #31
 8001440:	2201      	movs	r2, #1
 8001442:	409a      	lsls	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	1000823f 	.word	0x1000823f
 8001458:	40020940 	.word	0x40020940

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800146a:	e15a      	b.n	8001722 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	2101      	movs	r1, #1
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	4013      	ands	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 814c 	beq.w	800171c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d005      	beq.n	800149c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001498:	2b02      	cmp	r3, #2
 800149a:	d130      	bne.n	80014fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014d2:	2201      	movs	r2, #1
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	f003 0201 	and.w	r2, r3, #1
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b03      	cmp	r3, #3
 8001508:	d017      	beq.n	800153a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d123      	bne.n	800158e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	220f      	movs	r2, #15
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	08da      	lsrs	r2, r3, #3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3208      	adds	r2, #8
 8001588:	6939      	ldr	r1, [r7, #16]
 800158a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0203 	and.w	r2, r3, #3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80a6 	beq.w	800171c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d0:	4b5b      	ldr	r3, [pc, #364]	; (8001740 <HAL_GPIO_Init+0x2e4>)
 80015d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d4:	4a5a      	ldr	r2, [pc, #360]	; (8001740 <HAL_GPIO_Init+0x2e4>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6613      	str	r3, [r2, #96]	; 0x60
 80015dc:	4b58      	ldr	r3, [pc, #352]	; (8001740 <HAL_GPIO_Init+0x2e4>)
 80015de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e8:	4a56      	ldr	r2, [pc, #344]	; (8001744 <HAL_GPIO_Init+0x2e8>)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001612:	d01f      	beq.n	8001654 <HAL_GPIO_Init+0x1f8>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a4c      	ldr	r2, [pc, #304]	; (8001748 <HAL_GPIO_Init+0x2ec>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d019      	beq.n	8001650 <HAL_GPIO_Init+0x1f4>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a4b      	ldr	r2, [pc, #300]	; (800174c <HAL_GPIO_Init+0x2f0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d013      	beq.n	800164c <HAL_GPIO_Init+0x1f0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a4a      	ldr	r2, [pc, #296]	; (8001750 <HAL_GPIO_Init+0x2f4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d00d      	beq.n	8001648 <HAL_GPIO_Init+0x1ec>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a49      	ldr	r2, [pc, #292]	; (8001754 <HAL_GPIO_Init+0x2f8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_Init+0x1e8>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a48      	ldr	r2, [pc, #288]	; (8001758 <HAL_GPIO_Init+0x2fc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_GPIO_Init+0x1e4>
 800163c:	2305      	movs	r3, #5
 800163e:	e00a      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001640:	2306      	movs	r3, #6
 8001642:	e008      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001644:	2304      	movs	r3, #4
 8001646:	e006      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001648:	2303      	movs	r3, #3
 800164a:	e004      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 800164c:	2302      	movs	r3, #2
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001654:	2300      	movs	r3, #0
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	f002 0203 	and.w	r2, r2, #3
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	4093      	lsls	r3, r2
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001666:	4937      	ldr	r1, [pc, #220]	; (8001744 <HAL_GPIO_Init+0x2e8>)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001674:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_GPIO_Init+0x300>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001698:	4a30      	ldr	r2, [pc, #192]	; (800175c <HAL_GPIO_Init+0x300>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800169e:	4b2f      	ldr	r3, [pc, #188]	; (800175c <HAL_GPIO_Init+0x300>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016c2:	4a26      	ldr	r2, [pc, #152]	; (800175c <HAL_GPIO_Init+0x300>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_GPIO_Init+0x300>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ec:	4a1b      	ldr	r2, [pc, #108]	; (800175c <HAL_GPIO_Init+0x300>)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_GPIO_Init+0x300>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001716:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_GPIO_Init+0x300>)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	f47f ae9d 	bne.w	800146c <HAL_GPIO_Init+0x10>
  }
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000
 8001748:	48000400 	.word	0x48000400
 800174c:	48000800 	.word	0x48000800
 8001750:	48000c00 	.word	0x48000c00
 8001754:	48001000 	.word	0x48001000
 8001758:	48001400 	.word	0x48001400
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800177c:	e002      	b.n	8001784 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f806 	bl	80017c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e08d      	b.n	8001904 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d106      	bne.n	8001802 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff f88d 	bl	800091c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2224      	movs	r2, #36	; 0x24
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001826:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001836:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d107      	bne.n	8001850 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	e006      	b.n	800185e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800185c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d108      	bne.n	8001878 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	e007      	b.n	8001888 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001886:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69d9      	ldr	r1, [r3, #28]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1a      	ldr	r2, [r3, #32]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af02      	add	r7, sp, #8
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	4608      	mov	r0, r1
 8001916:	4611      	mov	r1, r2
 8001918:	461a      	mov	r2, r3
 800191a:	4603      	mov	r3, r0
 800191c:	817b      	strh	r3, [r7, #10]
 800191e:	460b      	mov	r3, r1
 8001920:	813b      	strh	r3, [r7, #8]
 8001922:	4613      	mov	r3, r2
 8001924:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b20      	cmp	r3, #32
 8001930:	d16a      	bne.n	8001a08 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <HAL_I2C_Mem_Write_IT+0x32>
 8001938:	8bbb      	ldrh	r3, [r7, #28]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d105      	bne.n	800194a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e05f      	b.n	8001a0a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001958:	d101      	bne.n	800195e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800195a:	2302      	movs	r3, #2
 800195c:	e055      	b.n	8001a0a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_I2C_Mem_Write_IT+0x60>
 8001968:	2302      	movs	r3, #2
 800196a:	e04e      	b.n	8001a0a <HAL_I2C_Mem_Write_IT+0xfe>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2221      	movs	r2, #33	; 0x21
 8001978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2240      	movs	r2, #64	; 0x40
 8001980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8bba      	ldrh	r2, [r7, #28]
 800199a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_I2C_Mem_Write_IT+0x108>)
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <HAL_I2C_Mem_Write_IT+0x10c>)
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80019a8:	897a      	ldrh	r2, [r7, #10]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d109      	bne.n	80019c8 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019b4:	893b      	ldrh	r3, [r7, #8]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	651a      	str	r2, [r3, #80]	; 0x50
 80019c6:	e00b      	b.n	80019e0 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019c8:	893b      	ldrh	r3, [r7, #8]
 80019ca:	0a1b      	lsrs	r3, r3, #8
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80019d6:	893b      	ldrh	r3, [r7, #8]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	8979      	ldrh	r1, [r7, #10]
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_I2C_Mem_Write_IT+0x110>)
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f001 fb78 	bl	80030e4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80019fc:	2101      	movs	r1, #1
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f001 fba2 	bl	8003148 <I2C_Enable_IRQ>

    return HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e000      	b.n	8001a0a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001a08:	2302      	movs	r3, #2
  }
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	ffff0000 	.word	0xffff0000
 8001a18:	08001ce9 	.word	0x08001ce9
 8001a1c:	80002000 	.word	0x80002000

08001a20 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	4608      	mov	r0, r1
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4603      	mov	r3, r0
 8001a30:	817b      	strh	r3, [r7, #10]
 8001a32:	460b      	mov	r3, r1
 8001a34:	813b      	strh	r3, [r7, #8]
 8001a36:	4613      	mov	r3, r2
 8001a38:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b20      	cmp	r3, #32
 8001a44:	d166      	bne.n	8001b14 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <HAL_I2C_Mem_Read_IT+0x32>
 8001a4c:	8bbb      	ldrh	r3, [r7, #28]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e05b      	b.n	8001b16 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a6c:	d101      	bne.n	8001a72 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e051      	b.n	8001b16 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_I2C_Mem_Read_IT+0x60>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e04a      	b.n	8001b16 <HAL_I2C_Mem_Read_IT+0xf6>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2222      	movs	r2, #34	; 0x22
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8bba      	ldrh	r2, [r7, #28]
 8001aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <HAL_I2C_Mem_Read_IT+0x100>)
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <HAL_I2C_Mem_Read_IT+0x104>)
 8001ab4:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8001ab6:	897a      	ldrh	r2, [r7, #10]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d109      	bne.n	8001ad6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ac2:	893b      	ldrh	r3, [r7, #8]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ad4:	e00b      	b.n	8001aee <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ad6:	893b      	ldrh	r3, [r7, #8]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001ae4:	893b      	ldrh	r3, [r7, #8]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	8979      	ldrh	r1, [r7, #10]
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_I2C_Mem_Read_IT+0x108>)
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2300      	movs	r3, #0
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f001 faf2 	bl	80030e4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b08:	2101      	movs	r1, #1
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f001 fb1c 	bl	8003148 <I2C_Enable_IRQ>

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	ffff0000 	.word	0xffff0000
 8001b24:	08001ce9 	.word	0x08001ce9
 8001b28:	80002000 	.word	0x80002000

08001b2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	68f9      	ldr	r1, [r7, #12]
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	4798      	blx	r3
  }
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00f      	beq.n	8001ba2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	f043 0201 	orr.w	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00f      	beq.n	8001bcc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f043 0208 	orr.w	r2, r3, #8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00f      	beq.n	8001bf6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	f043 0202 	orr.w	r2, r3, #2
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 030b 	and.w	r3, r3, #11
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001c06:	68f9      	ldr	r1, [r7, #12]
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f001 f911 	bl	8002e30 <I2C_ITError>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	70fb      	strb	r3, [r7, #3]
 8001c72:	4613      	mov	r3, r2
 8001c74:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001cf4:	4b8d      	ldr	r3, [pc, #564]	; (8001f2c <I2C_Mem_ISR_IT+0x244>)
 8001cf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <I2C_Mem_ISR_IT+0x22>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e10c      	b.n	8001f24 <I2C_Mem_ISR_IT+0x23c>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d012      	beq.n	8001d42 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f043 0204 	orr.w	r2, r3, #4
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f001 f98f 	bl	800305e <I2C_Flush_TXDR>
 8001d40:	e0dd      	b.n	8001efe <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d022      	beq.n	8001d92 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d01d      	beq.n	8001d92 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f023 0304 	bic.w	r3, r3, #4
 8001d5c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d90:	e0b5      	b.n	8001efe <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d02c      	beq.n	8001df6 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d027      	beq.n	8001df6 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dae:	d118      	bne.n	8001de2 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8001de0:	e08d      	b.n	8001efe <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f04f 32ff 	mov.w	r2, #4294967295
 8001df2:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8001df4:	e083      	b.n	8001efe <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d03c      	beq.n	8001e7a <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d037      	beq.n	8001e7a <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d02c      	beq.n	8001e6e <I2C_Mem_ISR_IT+0x186>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d128      	bne.n	8001e6e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d910      	bls.n	8001e48 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	22ff      	movs	r2, #255	; 0xff
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e30:	b299      	uxth	r1, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f001 f94f 	bl	80030e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e46:	e017      	b.n	8001e78 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	b299      	uxth	r1, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f001 f93c 	bl	80030e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e6c:	e004      	b.n	8001e78 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e6e:	2140      	movs	r1, #64	; 0x40
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 ffdd 	bl	8002e30 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e76:	e042      	b.n	8001efe <I2C_Mem_ISR_IT+0x216>
 8001e78:	e041      	b.n	8001efe <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d03c      	beq.n	8001efe <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d037      	beq.n	8001efe <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e8e:	2101      	movs	r1, #1
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f001 f9dd 	bl	8003250 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001e96:	2102      	movs	r1, #2
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f001 f955 	bl	8003148 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b22      	cmp	r3, #34	; 0x22
 8001ea8:	d101      	bne.n	8001eae <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <I2C_Mem_ISR_IT+0x248>)
 8001eac:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2bff      	cmp	r3, #255	; 0xff
 8001eb6:	d910      	bls.n	8001eda <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	22ff      	movs	r2, #255	; 0xff
 8001ebc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	b299      	uxth	r1, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f001 f906 	bl	80030e4 <I2C_TransferConfig>
 8001ed8:	e011      	b.n	8001efe <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee8:	b299      	uxth	r1, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f001 f8f3 	bl	80030e4 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001f12:	6939      	ldr	r1, [r7, #16]
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fd0b 	bl	8002930 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	80002000 	.word	0x80002000
 8001f30:	80002400 	.word	0x80002400

08001f34 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <I2C_Slave_ISR_IT+0x24>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e0e2      	b.n	800211e <I2C_Slave_ISR_IT+0x1ea>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001f74:	6939      	ldr	r1, [r7, #16]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 fda2 	bl	8002ac0 <I2C_ITSlaveCplt>
 8001f7c:	e0ca      	b.n	8002114 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d04b      	beq.n	8002020 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d046      	beq.n	8002020 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d128      	bne.n	8001fee <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b28      	cmp	r3, #40	; 0x28
 8001fa6:	d108      	bne.n	8001fba <I2C_Slave_ISR_IT+0x86>
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fae:	d104      	bne.n	8001fba <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001fb0:	6939      	ldr	r1, [r7, #16]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fee8 	bl	8002d88 <I2C_ITListenCplt>
 8001fb8:	e031      	b.n	800201e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b29      	cmp	r3, #41	; 0x29
 8001fc4:	d10e      	bne.n	8001fe4 <I2C_Slave_ISR_IT+0xb0>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fcc:	d00a      	beq.n	8001fe4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f001 f841 	bl	800305e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fc4b 	bl	8002878 <I2C_ITSlaveSeqCplt>
 8001fe2:	e01c      	b.n	800201e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2210      	movs	r2, #16
 8001fea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001fec:	e08f      	b.n	800210e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2210      	movs	r2, #16
 8001ff4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f043 0204 	orr.w	r2, r3, #4
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <I2C_Slave_ISR_IT+0xdc>
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800200e:	d17e      	bne.n	800210e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	4619      	mov	r1, r3
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 ff0a 	bl	8002e30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800201c:	e077      	b.n	800210e <I2C_Slave_ISR_IT+0x1da>
 800201e:	e076      	b.n	800210e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	d02f      	beq.n	800208a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002030:	2b00      	cmp	r3, #0
 8002032:	d02a      	beq.n	800208a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d018      	beq.n	8002070 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d14b      	bne.n	8002112 <I2C_Slave_ISR_IT+0x1de>
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002080:	d047      	beq.n	8002112 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fbf8 	bl	8002878 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002088:	e043      	b.n	8002112 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d009      	beq.n	80020a8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fb28 	bl	80026f6 <I2C_ITAddrCplt>
 80020a6:	e035      	b.n	8002114 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d030      	beq.n	8002114 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d02b      	beq.n	8002114 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d018      	beq.n	80020f8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	781a      	ldrb	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	; 0x28
 80020f6:	e00d      	b.n	8002114 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fe:	d002      	beq.n	8002106 <I2C_Slave_ISR_IT+0x1d2>
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fbb6 	bl	8002878 <I2C_ITSlaveSeqCplt>
 800210c:	e002      	b.n	8002114 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800210e:	bf00      	nop
 8002110:	e000      	b.n	8002114 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002112:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b088      	sub	sp, #32
 800212a:	af02      	add	r7, sp, #8
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <I2C_Master_ISR_DMA+0x1a>
 800213c:	2302      	movs	r3, #2
 800213e:	e0d9      	b.n	80022f4 <I2C_Master_ISR_DMA+0x1ce>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002158:	2b00      	cmp	r3, #0
 800215a:	d011      	beq.n	8002180 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2210      	movs	r2, #16
 8002162:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	f043 0204 	orr.w	r2, r3, #4
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002170:	2120      	movs	r1, #32
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 ffe8 	bl	8003148 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 ff70 	bl	800305e <I2C_Flush_TXDR>
 800217e:	e0b4      	b.n	80022ea <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b00      	cmp	r3, #0
 8002188:	d071      	beq.n	800226e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002190:	2b00      	cmp	r3, #0
 8002192:	d06c      	beq.n	800226e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d04e      	beq.n	800224c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ba:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2bff      	cmp	r3, #255	; 0xff
 80021c4:	d906      	bls.n	80021d4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	22ff      	movs	r2, #255	; 0xff
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80021cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	e010      	b.n	80021f6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021e6:	d003      	beq.n	80021f0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e002      	b.n	80021f6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80021f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	8a79      	ldrh	r1, [r7, #18]
 80021fe:	2300      	movs	r3, #0
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 ff6d 	bl	80030e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b22      	cmp	r3, #34	; 0x22
 8002226:	d108      	bne.n	800223a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002236:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002238:	e057      	b.n	80022ea <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002248:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800224a:	e04e      	b.n	80022ea <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800225a:	d003      	beq.n	8002264 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 face 	bl	80027fe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002262:	e042      	b.n	80022ea <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002264:	2140      	movs	r1, #64	; 0x40
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fde2 	bl	8002e30 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800226c:	e03d      	b.n	80022ea <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d028      	beq.n	80022ca <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800227e:	2b00      	cmp	r3, #0
 8002280:	d023      	beq.n	80022ca <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d119      	bne.n	80022c0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800229a:	d025      	beq.n	80022e8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022a4:	d108      	bne.n	80022b8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022b4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80022b6:	e017      	b.n	80022e8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 faa0 	bl	80027fe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80022be:	e013      	b.n	80022e8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80022c0:	2140      	movs	r1, #64	; 0x40
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fdb4 	bl	8002e30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80022c8:	e00e      	b.n	80022e8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fb25 	bl	8002930 <I2C_ITMasterCplt>
 80022e6:	e000      	b.n	80022ea <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80022e8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002308:	4b8d      	ldr	r3, [pc, #564]	; (8002540 <I2C_Mem_ISR_DMA+0x244>)
 800230a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <I2C_Mem_ISR_DMA+0x1e>
 8002316:	2302      	movs	r3, #2
 8002318:	e10e      	b.n	8002538 <I2C_Mem_ISR_DMA+0x23c>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d016      	beq.n	800235a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002332:	2b00      	cmp	r3, #0
 8002334:	d011      	beq.n	800235a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2210      	movs	r2, #16
 800233c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f043 0204 	orr.w	r2, r3, #4
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800234a:	2120      	movs	r1, #32
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fefb 	bl	8003148 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fe83 	bl	800305e <I2C_Flush_TXDR>
 8002358:	e0e9      	b.n	800252e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00e      	beq.n	8002382 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002376:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f04f 32ff 	mov.w	r2, #4294967295
 800237e:	651a      	str	r2, [r3, #80]	; 0x50
 8002380:	e0d5      	b.n	800252e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002388:	2b00      	cmp	r3, #0
 800238a:	d05f      	beq.n	800244c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002392:	2b00      	cmp	r3, #0
 8002394:	d05a      	beq.n	800244c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002396:	2101      	movs	r1, #1
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 ff59 	bl	8003250 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800239e:	2110      	movs	r1, #16
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 fed1 	bl	8003148 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d048      	beq.n	8002442 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2bff      	cmp	r3, #255	; 0xff
 80023b8:	d910      	bls.n	80023dc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	22ff      	movs	r2, #255	; 0xff
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c4:	b299      	uxth	r1, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fe85 	bl	80030e4 <I2C_TransferConfig>
 80023da:	e011      	b.n	8002400 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	b299      	uxth	r1, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	2300      	movs	r3, #0
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fe72 	bl	80030e4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b22      	cmp	r3, #34	; 0x22
 800241c:	d108      	bne.n	8002430 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800242c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800242e:	e07e      	b.n	800252e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800243e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002440:	e075      	b.n	800252e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002442:	2140      	movs	r1, #64	; 0x40
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fcf3 	bl	8002e30 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800244a:	e070      	b.n	800252e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d05d      	beq.n	8002512 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800245c:	2b00      	cmp	r3, #0
 800245e:	d058      	beq.n	8002512 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002460:	2101      	movs	r1, #1
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fef4 	bl	8003250 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002468:	2110      	movs	r1, #16
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fe6c 	bl	8003148 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b22      	cmp	r3, #34	; 0x22
 800247a:	d101      	bne.n	8002480 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800247c:	4b31      	ldr	r3, [pc, #196]	; (8002544 <I2C_Mem_ISR_DMA+0x248>)
 800247e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	2bff      	cmp	r3, #255	; 0xff
 8002488:	d910      	bls.n	80024ac <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	22ff      	movs	r2, #255	; 0xff
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002494:	b299      	uxth	r1, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	b2da      	uxtb	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fe1d 	bl	80030e4 <I2C_TransferConfig>
 80024aa:	e011      	b.n	80024d0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	b299      	uxth	r1, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fe0a 	bl	80030e4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b22      	cmp	r3, #34	; 0x22
 80024ec:	d108      	bne.n	8002500 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024fc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024fe:	e016      	b.n	800252e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800250e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002510:	e00d      	b.n	800252e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fa01 	bl	8002930 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	80002000 	.word	0x80002000
 8002544:	80002400 	.word	0x80002400

08002548 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <I2C_Slave_ISR_DMA+0x24>
 8002568:	2302      	movs	r3, #2
 800256a:	e0c0      	b.n	80026ee <I2C_Slave_ISR_DMA+0x1a6>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fa98 	bl	8002ac0 <I2C_ITSlaveCplt>
 8002590:	e0a8      	b.n	80026e4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8095 	beq.w	80026c8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 808f 	beq.w	80026c8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d104      	bne.n	80025be <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d07d      	beq.n	80026ba <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00c      	beq.n	80025e0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80025dc:	2301      	movs	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00c      	beq.n	8002602 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80025fe:	2301      	movs	r3, #1
 8002600:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d128      	bne.n	800265a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b28      	cmp	r3, #40	; 0x28
 8002612:	d108      	bne.n	8002626 <I2C_Slave_ISR_DMA+0xde>
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800261a:	d104      	bne.n	8002626 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fbb2 	bl	8002d88 <I2C_ITListenCplt>
 8002624:	e048      	b.n	80026b8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b29      	cmp	r3, #41	; 0x29
 8002630:	d10e      	bne.n	8002650 <I2C_Slave_ISR_DMA+0x108>
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002638:	d00a      	beq.n	8002650 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2210      	movs	r2, #16
 8002640:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fd0b 	bl	800305e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f915 	bl	8002878 <I2C_ITSlaveSeqCplt>
 800264e:	e033      	b.n	80026b8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2210      	movs	r2, #16
 8002656:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002658:	e034      	b.n	80026c4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2210      	movs	r2, #16
 8002660:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f043 0204 	orr.w	r2, r3, #4
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002674:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <I2C_Slave_ISR_DMA+0x13c>
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002682:	d11f      	bne.n	80026c4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	2b21      	cmp	r3, #33	; 0x21
 8002688:	d002      	beq.n	8002690 <I2C_Slave_ISR_DMA+0x148>
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	2b29      	cmp	r3, #41	; 0x29
 800268e:	d103      	bne.n	8002698 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2221      	movs	r2, #33	; 0x21
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
 8002696:	e008      	b.n	80026aa <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	2b22      	cmp	r3, #34	; 0x22
 800269c:	d002      	beq.n	80026a4 <I2C_Slave_ISR_DMA+0x15c>
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	2b2a      	cmp	r3, #42	; 0x2a
 80026a2:	d102      	bne.n	80026aa <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2222      	movs	r2, #34	; 0x22
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4619      	mov	r1, r3
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fbbd 	bl	8002e30 <I2C_ITError>
      if (treatdmanack == 1U)
 80026b6:	e005      	b.n	80026c4 <I2C_Slave_ISR_DMA+0x17c>
 80026b8:	e004      	b.n	80026c4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2210      	movs	r2, #16
 80026c0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026c2:	e00f      	b.n	80026e4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80026c4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026c6:	e00d      	b.n	80026e4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f809 	bl	80026f6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800270c:	2b28      	cmp	r3, #40	; 0x28
 800270e:	d16a      	bne.n	80027e6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	0c1b      	lsrs	r3, r3, #16
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	0c1b      	lsrs	r3, r3, #16
 8002728:	b29b      	uxth	r3, r3
 800272a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800272e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	b29b      	uxth	r3, r3
 8002738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800274a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d138      	bne.n	80027c6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002754:	897b      	ldrh	r3, [r7, #10]
 8002756:	09db      	lsrs	r3, r3, #7
 8002758:	b29a      	uxth	r2, r3
 800275a:	89bb      	ldrh	r3, [r7, #12]
 800275c:	4053      	eors	r3, r2
 800275e:	b29b      	uxth	r3, r3
 8002760:	f003 0306 	and.w	r3, r3, #6
 8002764:	2b00      	cmp	r3, #0
 8002766:	d11c      	bne.n	80027a2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002768:	897b      	ldrh	r3, [r7, #10]
 800276a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277a:	2b02      	cmp	r3, #2
 800277c:	d13b      	bne.n	80027f6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2208      	movs	r2, #8
 800278a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002794:	89ba      	ldrh	r2, [r7, #12]
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	4619      	mov	r1, r3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fa63 	bl	8001c66 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80027a0:	e029      	b.n	80027f6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80027a2:	893b      	ldrh	r3, [r7, #8]
 80027a4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80027a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fd50 	bl	8003250 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027b8:	89ba      	ldrh	r2, [r7, #12]
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	4619      	mov	r1, r3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff fa51 	bl	8001c66 <HAL_I2C_AddrCallback>
}
 80027c4:	e017      	b.n	80027f6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80027c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fd40 	bl	8003250 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027d8:	89ba      	ldrh	r2, [r7, #12]
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	4619      	mov	r1, r3
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fa41 	bl	8001c66 <HAL_I2C_AddrCallback>
}
 80027e4:	e007      	b.n	80027f6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2208      	movs	r2, #8
 80027ec:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b21      	cmp	r3, #33	; 0x21
 8002818:	d115      	bne.n	8002846 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2211      	movs	r2, #17
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800282e:	2101      	movs	r1, #1
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fd0d 	bl	8003250 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff f9e9 	bl	8001c16 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002844:	e014      	b.n	8002870 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2212      	movs	r2, #18
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800285a:	2102      	movs	r1, #2
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fcf7 	bl	8003250 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff f9dd 	bl	8001c2a <HAL_I2C_MasterRxCpltCallback>
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	e00c      	b.n	80028c6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b29      	cmp	r3, #41	; 0x29
 80028d0:	d112      	bne.n	80028f8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2228      	movs	r2, #40	; 0x28
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2221      	movs	r2, #33	; 0x21
 80028de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028e0:	2101      	movs	r1, #1
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fcb4 	bl	8003250 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff f9a4 	bl	8001c3e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80028f6:	e017      	b.n	8002928 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b2a      	cmp	r3, #42	; 0x2a
 8002902:	d111      	bne.n	8002928 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2228      	movs	r2, #40	; 0x28
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2222      	movs	r2, #34	; 0x22
 8002910:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002912:	2102      	movs	r1, #2
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fc9b 	bl	8003250 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff f995 	bl	8001c52 <HAL_I2C_SlaveRxCpltCallback>
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2220      	movs	r2, #32
 8002944:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b21      	cmp	r3, #33	; 0x21
 8002950:	d107      	bne.n	8002962 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002952:	2101      	movs	r1, #1
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fc7b 	bl	8003250 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2211      	movs	r2, #17
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
 8002960:	e00c      	b.n	800297c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b22      	cmp	r3, #34	; 0x22
 800296c:	d106      	bne.n	800297c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800296e:	2102      	movs	r1, #2
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fc6d 	bl	8003250 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2212      	movs	r2, #18
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <I2C_ITMasterCplt+0x188>)
 8002988:	400b      	ands	r3, r1
 800298a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a49      	ldr	r2, [pc, #292]	; (8002abc <I2C_ITMasterCplt+0x18c>)
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2210      	movs	r2, #16
 80029a8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f043 0204 	orr.w	r2, r3, #4
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b60      	cmp	r3, #96	; 0x60
 80029c0:	d10a      	bne.n	80029d8 <I2C_ITMasterCplt+0xa8>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80029d6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fb40 	bl	800305e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b60      	cmp	r3, #96	; 0x60
 80029ee:	d002      	beq.n	80029f6 <I2C_ITMasterCplt+0xc6>
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4619      	mov	r1, r3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fa17 	bl	8002e30 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a02:	e054      	b.n	8002aae <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b21      	cmp	r3, #33	; 0x21
 8002a0e:	d124      	bne.n	8002a5a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d10b      	bne.n	8002a42 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff f92b 	bl	8001c96 <HAL_I2C_MemTxCpltCallback>
}
 8002a40:	e035      	b.n	8002aae <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff f8df 	bl	8001c16 <HAL_I2C_MasterTxCpltCallback>
}
 8002a58:	e029      	b.n	8002aae <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b22      	cmp	r3, #34	; 0x22
 8002a64:	d123      	bne.n	8002aae <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d10b      	bne.n	8002a98 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff f90a 	bl	8001caa <HAL_I2C_MemRxCpltCallback>
}
 8002a96:	e00a      	b.n	8002aae <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff f8be 	bl	8001c2a <HAL_I2C_MasterRxCpltCallback>
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	fe00e800 	.word	0xfe00e800
 8002abc:	ffff0000 	.word	0xffff0000

08002ac0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002aec:	7afb      	ldrb	r3, [r7, #11]
 8002aee:	2b21      	cmp	r3, #33	; 0x21
 8002af0:	d002      	beq.n	8002af8 <I2C_ITSlaveCplt+0x38>
 8002af2:	7afb      	ldrb	r3, [r7, #11]
 8002af4:	2b29      	cmp	r3, #41	; 0x29
 8002af6:	d108      	bne.n	8002b0a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002af8:	f248 0101 	movw	r1, #32769	; 0x8001
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fba7 	bl	8003250 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2221      	movs	r2, #33	; 0x21
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
 8002b08:	e019      	b.n	8002b3e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b0a:	7afb      	ldrb	r3, [r7, #11]
 8002b0c:	2b22      	cmp	r3, #34	; 0x22
 8002b0e:	d002      	beq.n	8002b16 <I2C_ITSlaveCplt+0x56>
 8002b10:	7afb      	ldrb	r3, [r7, #11]
 8002b12:	2b2a      	cmp	r3, #42	; 0x2a
 8002b14:	d108      	bne.n	8002b28 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002b16:	f248 0102 	movw	r1, #32770	; 0x8002
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fb98 	bl	8003250 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2222      	movs	r2, #34	; 0x22
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
 8002b26:	e00a      	b.n	8002b3e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002b28:	7afb      	ldrb	r3, [r7, #11]
 8002b2a:	2b28      	cmp	r3, #40	; 0x28
 8002b2c:	d107      	bne.n	8002b3e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002b2e:	f248 0103 	movw	r1, #32771	; 0x8003
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fb8c 	bl	8003250 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b89      	ldr	r3, [pc, #548]	; (8002d80 <I2C_ITSlaveCplt+0x2c0>)
 8002b5a:	400b      	ands	r3, r1
 8002b5c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fa7d 	bl	800305e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d013      	beq.n	8002b96 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b7c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d01f      	beq.n	8002bc6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b94:	e017      	b.n	8002bc6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d012      	beq.n	8002bc6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d006      	beq.n	8002bc6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f023 0304 	bic.w	r3, r3, #4
 8002bd6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00c      	beq.n	8002c12 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	f043 0204 	orr.w	r2, r3, #4
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d049      	beq.n	8002cc6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d044      	beq.n	8002cc6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d128      	bne.n	8002c98 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b28      	cmp	r3, #40	; 0x28
 8002c50:	d108      	bne.n	8002c64 <I2C_ITSlaveCplt+0x1a4>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c58:	d104      	bne.n	8002c64 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c5a:	6979      	ldr	r1, [r7, #20]
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f893 	bl	8002d88 <I2C_ITListenCplt>
 8002c62:	e030      	b.n	8002cc6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b29      	cmp	r3, #41	; 0x29
 8002c6e:	d10e      	bne.n	8002c8e <I2C_ITSlaveCplt+0x1ce>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c76:	d00a      	beq.n	8002c8e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f9ec 	bl	800305e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fdf6 	bl	8002878 <I2C_ITSlaveSeqCplt>
 8002c8c:	e01b      	b.n	8002cc6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2210      	movs	r2, #16
 8002c94:	61da      	str	r2, [r3, #28]
 8002c96:	e016      	b.n	8002cc6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f043 0204 	orr.w	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <I2C_ITSlaveCplt+0x1fa>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb8:	d105      	bne.n	8002cc6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f8b5 	bl	8002e30 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8a4 	bl	8002e30 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b28      	cmp	r3, #40	; 0x28
 8002cf2:	d141      	bne.n	8002d78 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002cf4:	6979      	ldr	r1, [r7, #20]
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f846 	bl	8002d88 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cfc:	e03c      	b.n	8002d78 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d06:	d014      	beq.n	8002d32 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fdb5 	bl	8002878 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <I2C_ITSlaveCplt+0x2c4>)
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe ffa9 	bl	8001c82 <HAL_I2C_ListenCpltCallback>
}
 8002d30:	e022      	b.n	8002d78 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b22      	cmp	r3, #34	; 0x22
 8002d3c:	d10e      	bne.n	8002d5c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fe ff7c 	bl	8001c52 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d5a:	e00d      	b.n	8002d78 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe ff63 	bl	8001c3e <HAL_I2C_SlaveTxCpltCallback>
}
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	fe00e800 	.word	0xfe00e800
 8002d84:	ffff0000 	.word	0xffff0000

08002d88 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a25      	ldr	r2, [pc, #148]	; (8002e2c <I2C_ITListenCplt+0xa4>)
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d022      	beq.n	8002e04 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d012      	beq.n	8002e04 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f043 0204 	orr.w	r2, r3, #4
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e04:	f248 0103 	movw	r1, #32771	; 0x8003
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fa21 	bl	8003250 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2210      	movs	r2, #16
 8002e14:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fe ff2f 	bl	8001c82 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	ffff0000 	.word	0xffff0000

08002e30 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e40:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a6d      	ldr	r2, [pc, #436]	; (8003004 <I2C_ITError+0x1d4>)
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b28      	cmp	r3, #40	; 0x28
 8002e66:	d005      	beq.n	8002e74 <I2C_ITError+0x44>
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b29      	cmp	r3, #41	; 0x29
 8002e6c:	d002      	beq.n	8002e74 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	2b2a      	cmp	r3, #42	; 0x2a
 8002e72:	d10b      	bne.n	8002e8c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e74:	2103      	movs	r1, #3
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9ea 	bl	8003250 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2228      	movs	r2, #40	; 0x28
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a60      	ldr	r2, [pc, #384]	; (8003008 <I2C_ITError+0x1d8>)
 8002e88:	635a      	str	r2, [r3, #52]	; 0x34
 8002e8a:	e030      	b.n	8002eee <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e8c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f9dd 	bl	8003250 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f8e1 	bl	800305e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b60      	cmp	r3, #96	; 0x60
 8002ea6:	d01f      	beq.n	8002ee8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d114      	bne.n	8002ee8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d109      	bne.n	8002ee0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f043 0204 	orr.w	r2, r3, #4
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d039      	beq.n	8002f70 <I2C_ITError+0x140>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b11      	cmp	r3, #17
 8002f00:	d002      	beq.n	8002f08 <I2C_ITError+0xd8>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b21      	cmp	r3, #33	; 0x21
 8002f06:	d133      	bne.n	8002f70 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f16:	d107      	bne.n	8002f28 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f26:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe fa25 	bl	800137c <HAL_DMA_GetState>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d017      	beq.n	8002f68 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	4a33      	ldr	r2, [pc, #204]	; (800300c <I2C_ITError+0x1dc>)
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe f8ff 	bl	8001150 <HAL_DMA_Abort_IT>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d04d      	beq.n	8002ff4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f62:	4610      	mov	r0, r2
 8002f64:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f66:	e045      	b.n	8002ff4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f851 	bl	8003010 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f6e:	e041      	b.n	8002ff4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d039      	beq.n	8002fec <I2C_ITError+0x1bc>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b12      	cmp	r3, #18
 8002f7c:	d002      	beq.n	8002f84 <I2C_ITError+0x154>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b22      	cmp	r3, #34	; 0x22
 8002f82:	d133      	bne.n	8002fec <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f92:	d107      	bne.n	8002fa4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fa2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe f9e7 	bl	800137c <HAL_DMA_GetState>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d017      	beq.n	8002fe4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <I2C_ITError+0x1dc>)
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe f8c1 	bl	8001150 <HAL_DMA_Abort_IT>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d011      	beq.n	8002ff8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fe2:	e009      	b.n	8002ff8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f813 	bl	8003010 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fea:	e005      	b.n	8002ff8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f80f 	bl	8003010 <I2C_TreatErrorCallback>
  }
}
 8002ff2:	e002      	b.n	8002ffa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ff4:	bf00      	nop
 8002ff6:	e000      	b.n	8002ffa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ff8:	bf00      	nop
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	ffff0000 	.word	0xffff0000
 8003008:	08001f35 	.word	0x08001f35
 800300c:	080030a7 	.word	0x080030a7

08003010 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b60      	cmp	r3, #96	; 0x60
 8003022:	d10e      	bne.n	8003042 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe fe49 	bl	8001cd2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003040:	e009      	b.n	8003056 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7fe fe34 	bl	8001cbe <HAL_I2C_ErrorCallback>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b02      	cmp	r3, #2
 8003072:	d103      	bne.n	800307c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d007      	beq.n	800309a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	619a      	str	r2, [r3, #24]
  }
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	2200      	movs	r2, #0
 80030c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d0:	2200      	movs	r2, #0
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f7ff ff9b 	bl	8003010 <I2C_TreatErrorCallback>
}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	817b      	strh	r3, [r7, #10]
 80030f2:	4613      	mov	r3, r2
 80030f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030f6:	897b      	ldrh	r3, [r7, #10]
 80030f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030fc:	7a7b      	ldrb	r3, [r7, #9]
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003104:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	4313      	orrs	r3, r2
 800310e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003112:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	0d5b      	lsrs	r3, r3, #21
 800311e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <I2C_TransferConfig+0x60>)
 8003124:	430b      	orrs	r3, r1
 8003126:	43db      	mvns	r3, r3
 8003128:	ea02 0103 	and.w	r1, r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	03ff63ff 	.word	0x03ff63ff

08003148 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315c:	4a39      	ldr	r2, [pc, #228]	; (8003244 <I2C_Enable_IRQ+0xfc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d032      	beq.n	80031c8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003166:	4a38      	ldr	r2, [pc, #224]	; (8003248 <I2C_Enable_IRQ+0x100>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d02d      	beq.n	80031c8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003170:	4a36      	ldr	r2, [pc, #216]	; (800324c <I2C_Enable_IRQ+0x104>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d028      	beq.n	80031c8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003176:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800317a:	2b00      	cmp	r3, #0
 800317c:	da03      	bge.n	8003186 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003184:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003186:	887b      	ldrh	r3, [r7, #2]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003196:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003198:	887b      	ldrh	r3, [r7, #2]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80031a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d103      	bne.n	80031b8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80031b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d133      	bne.n	8003226 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f043 0320 	orr.w	r3, r3, #32
 80031c4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80031c6:	e02e      	b.n	8003226 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80031c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	da03      	bge.n	80031d8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80031d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80031d8:	887b      	ldrh	r3, [r7, #2]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80031e8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80031ea:	887b      	ldrh	r3, [r7, #2]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80031fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80031fc:	887b      	ldrh	r3, [r7, #2]
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d103      	bne.n	800320a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003208:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800320a:	887b      	ldrh	r3, [r7, #2]
 800320c:	2b20      	cmp	r3, #32
 800320e:	d103      	bne.n	8003218 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003216:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003218:	887b      	ldrh	r3, [r7, #2]
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	d103      	bne.n	8003226 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003224:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6819      	ldr	r1, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	08002127 	.word	0x08002127
 8003248:	08002549 	.word	0x08002549
 800324c:	080022fd 	.word	0x080022fd

08003250 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003260:	887b      	ldrh	r3, [r7, #2]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00f      	beq.n	800328a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003270:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800327e:	2b28      	cmp	r3, #40	; 0x28
 8003280:	d003      	beq.n	800328a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003288:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800328a:	887b      	ldrh	r3, [r7, #2]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00f      	beq.n	80032b4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800329a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032a8:	2b28      	cmp	r3, #40	; 0x28
 80032aa:	d003      	beq.n	80032b4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80032b2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80032b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	da03      	bge.n	80032c4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80032c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80032c4:	887b      	ldrh	r3, [r7, #2]
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d103      	bne.n	80032d2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d103      	bne.n	80032e0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f043 0320 	orr.w	r3, r3, #32
 80032de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d103      	bne.n	80032ee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	43da      	mvns	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	400a      	ands	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b20      	cmp	r3, #32
 8003320:	d138      	bne.n	8003394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800332c:	2302      	movs	r3, #2
 800332e:	e032      	b.n	8003396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	; 0x24
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800335e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d139      	bne.n	800342c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e033      	b.n	800342e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2224      	movs	r2, #36	; 0x24
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d141      	bne.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800344a:	4b4b      	ldr	r3, [pc, #300]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003456:	d131      	bne.n	80034bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003458:	4b47      	ldr	r3, [pc, #284]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800345e:	4a46      	ldr	r2, [pc, #280]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003464:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003468:	4b43      	ldr	r3, [pc, #268]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003470:	4a41      	ldr	r2, [pc, #260]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003476:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003478:	4b40      	ldr	r3, [pc, #256]	; (800357c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2232      	movs	r2, #50	; 0x32
 800347e:	fb02 f303 	mul.w	r3, r2, r3
 8003482:	4a3f      	ldr	r2, [pc, #252]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	0c9b      	lsrs	r3, r3, #18
 800348a:	3301      	adds	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800348e:	e002      	b.n	8003496 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3b01      	subs	r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003496:	4b38      	ldr	r3, [pc, #224]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a2:	d102      	bne.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f2      	bne.n	8003490 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034aa:	4b33      	ldr	r3, [pc, #204]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d158      	bne.n	800356a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e057      	b.n	800356c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034bc:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034c2:	4a2d      	ldr	r2, [pc, #180]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034cc:	e04d      	b.n	800356a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d4:	d141      	bne.n	800355a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034d6:	4b28      	ldr	r3, [pc, #160]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e2:	d131      	bne.n	8003548 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034e4:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ea:	4a23      	ldr	r2, [pc, #140]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034f4:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034fc:	4a1e      	ldr	r2, [pc, #120]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003502:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2232      	movs	r2, #50	; 0x32
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	0c9b      	lsrs	r3, r3, #18
 8003516:	3301      	adds	r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800351a:	e002      	b.n	8003522 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3b01      	subs	r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352e:	d102      	bne.n	8003536 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f2      	bne.n	800351c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003542:	d112      	bne.n	800356a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e011      	b.n	800356c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003558:	e007      	b.n	800356a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003562:	4a05      	ldr	r2, [pc, #20]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003564:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003568:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40007000 	.word	0x40007000
 800357c:	20000004 	.word	0x20000004
 8003580:	431bde83 	.word	0x431bde83

08003584 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800358e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003592:	6093      	str	r3, [r2, #8]
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40007000 	.word	0x40007000

080035a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e2fe      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d075      	beq.n	80036ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035c2:	4b97      	ldr	r3, [pc, #604]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035cc:	4b94      	ldr	r3, [pc, #592]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b0c      	cmp	r3, #12
 80035da:	d102      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3e>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d002      	beq.n	80035e8 <HAL_RCC_OscConfig+0x44>
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d10b      	bne.n	8003600 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e8:	4b8d      	ldr	r3, [pc, #564]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d05b      	beq.n	80036ac <HAL_RCC_OscConfig+0x108>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d157      	bne.n	80036ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e2d9      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003608:	d106      	bne.n	8003618 <HAL_RCC_OscConfig+0x74>
 800360a:	4b85      	ldr	r3, [pc, #532]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a84      	ldr	r2, [pc, #528]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e01d      	b.n	8003654 <HAL_RCC_OscConfig+0xb0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x98>
 8003622:	4b7f      	ldr	r3, [pc, #508]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a7e      	ldr	r2, [pc, #504]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 8003628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b7c      	ldr	r3, [pc, #496]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a7b      	ldr	r2, [pc, #492]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 8003634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e00b      	b.n	8003654 <HAL_RCC_OscConfig+0xb0>
 800363c:	4b78      	ldr	r3, [pc, #480]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a77      	ldr	r2, [pc, #476]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 8003642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	4b75      	ldr	r3, [pc, #468]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a74      	ldr	r2, [pc, #464]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 800364e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d013      	beq.n	8003684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fd fb92 	bl	8000d84 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fd fb8e 	bl	8000d84 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e29e      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003676:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0xc0>
 8003682:	e014      	b.n	80036ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fd fb7e 	bl	8000d84 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800368c:	f7fd fb7a 	bl	8000d84 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e28a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800369e:	4b60      	ldr	r3, [pc, #384]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0xe8>
 80036aa:	e000      	b.n	80036ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d075      	beq.n	80037a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ba:	4b59      	ldr	r3, [pc, #356]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c4:	4b56      	ldr	r3, [pc, #344]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	d102      	bne.n	80036da <HAL_RCC_OscConfig+0x136>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d002      	beq.n	80036e0 <HAL_RCC_OscConfig+0x13c>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d11f      	bne.n	8003720 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e0:	4b4f      	ldr	r3, [pc, #316]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_OscConfig+0x154>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e25d      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b49      	ldr	r3, [pc, #292]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	061b      	lsls	r3, r3, #24
 8003706:	4946      	ldr	r1, [pc, #280]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800370c:	4b45      	ldr	r3, [pc, #276]	; (8003824 <HAL_RCC_OscConfig+0x280>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd faeb 	bl	8000cec <HAL_InitTick>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d043      	beq.n	80037a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e249      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d023      	beq.n	8003770 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003728:	4b3d      	ldr	r3, [pc, #244]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 800372e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fd fb26 	bl	8000d84 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373c:	f7fd fb22 	bl	8000d84 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e232      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800374e:	4b34      	ldr	r3, [pc, #208]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375a:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	061b      	lsls	r3, r3, #24
 8003768:	492d      	ldr	r1, [pc, #180]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
 800376e:	e01a      	b.n	80037a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003770:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a2a      	ldr	r2, [pc, #168]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 8003776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800377a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fd fb02 	bl	8000d84 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003784:	f7fd fafe 	bl	8000d84 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e20e      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003796:	4b22      	ldr	r3, [pc, #136]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x1e0>
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d041      	beq.n	8003836 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01c      	beq.n	80037f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ba:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80037bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c0:	4a17      	ldr	r2, [pc, #92]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fd fadb 	bl	8000d84 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d2:	f7fd fad7 	bl	8000d84 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e1e7      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037e4:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80037e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0ef      	beq.n	80037d2 <HAL_RCC_OscConfig+0x22e>
 80037f2:	e020      	b.n	8003836 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fa:	4a09      	ldr	r2, [pc, #36]	; (8003820 <HAL_RCC_OscConfig+0x27c>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7fd fabe 	bl	8000d84 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800380a:	e00d      	b.n	8003828 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380c:	f7fd faba 	bl	8000d84 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d906      	bls.n	8003828 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e1ca      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000
 8003824:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003828:	4b8c      	ldr	r3, [pc, #560]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 800382a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1ea      	bne.n	800380c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80a6 	beq.w	8003990 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003844:	2300      	movs	r3, #0
 8003846:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003848:	4b84      	ldr	r3, [pc, #528]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_OscConfig+0x2b4>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x2b6>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	4b7f      	ldr	r3, [pc, #508]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003862:	4a7e      	ldr	r2, [pc, #504]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003868:	6593      	str	r3, [r2, #88]	; 0x58
 800386a:	4b7c      	ldr	r3, [pc, #496]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003876:	2301      	movs	r3, #1
 8003878:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800387a:	4b79      	ldr	r3, [pc, #484]	; (8003a60 <HAL_RCC_OscConfig+0x4bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d118      	bne.n	80038b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003886:	4b76      	ldr	r3, [pc, #472]	; (8003a60 <HAL_RCC_OscConfig+0x4bc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a75      	ldr	r2, [pc, #468]	; (8003a60 <HAL_RCC_OscConfig+0x4bc>)
 800388c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003892:	f7fd fa77 	bl	8000d84 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389a:	f7fd fa73 	bl	8000d84 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e183      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ac:	4b6c      	ldr	r3, [pc, #432]	; (8003a60 <HAL_RCC_OscConfig+0x4bc>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d108      	bne.n	80038d2 <HAL_RCC_OscConfig+0x32e>
 80038c0:	4b66      	ldr	r3, [pc, #408]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	4a65      	ldr	r2, [pc, #404]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d0:	e024      	b.n	800391c <HAL_RCC_OscConfig+0x378>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d110      	bne.n	80038fc <HAL_RCC_OscConfig+0x358>
 80038da:	4b60      	ldr	r3, [pc, #384]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	4a5e      	ldr	r2, [pc, #376]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 80038e2:	f043 0304 	orr.w	r3, r3, #4
 80038e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ea:	4b5c      	ldr	r3, [pc, #368]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	4a5a      	ldr	r2, [pc, #360]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038fa:	e00f      	b.n	800391c <HAL_RCC_OscConfig+0x378>
 80038fc:	4b57      	ldr	r3, [pc, #348]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	4a56      	ldr	r2, [pc, #344]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800390c:	4b53      	ldr	r3, [pc, #332]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	4a52      	ldr	r2, [pc, #328]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 8003914:	f023 0304 	bic.w	r3, r3, #4
 8003918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d016      	beq.n	8003952 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd fa2e 	bl	8000d84 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392a:	e00a      	b.n	8003942 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392c:	f7fd fa2a 	bl	8000d84 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e138      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003942:	4b46      	ldr	r3, [pc, #280]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ed      	beq.n	800392c <HAL_RCC_OscConfig+0x388>
 8003950:	e015      	b.n	800397e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003952:	f7fd fa17 	bl	8000d84 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003958:	e00a      	b.n	8003970 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fd fa13 	bl	8000d84 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	f241 3288 	movw	r2, #5000	; 0x1388
 8003968:	4293      	cmp	r3, r2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e121      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003970:	4b3a      	ldr	r3, [pc, #232]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1ed      	bne.n	800395a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800397e:	7ffb      	ldrb	r3, [r7, #31]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003984:	4b35      	ldr	r3, [pc, #212]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	4a34      	ldr	r2, [pc, #208]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 800398a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d03c      	beq.n	8003a16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01c      	beq.n	80039de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039a4:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 80039a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039aa:	4a2c      	ldr	r2, [pc, #176]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fd f9e6 	bl	8000d84 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039bc:	f7fd f9e2 	bl	8000d84 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e0f2      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039ce:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 80039d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0ef      	beq.n	80039bc <HAL_RCC_OscConfig+0x418>
 80039dc:	e01b      	b.n	8003a16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039de:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 80039e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039e4:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ee:	f7fd f9c9 	bl	8000d84 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039f6:	f7fd f9c5 	bl	8000d84 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e0d5      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a08:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 8003a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1ef      	bne.n	80039f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80c9 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	f000 8083 	beq.w	8003b34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d15e      	bne.n	8003af4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <HAL_RCC_OscConfig+0x4b8>)
 8003a3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fd f99f 	bl	8000d84 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a48:	e00c      	b.n	8003a64 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4a:	f7fd f99b 	bl	8000d84 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d905      	bls.n	8003a64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e0ab      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a64:	4b55      	ldr	r3, [pc, #340]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1ec      	bne.n	8003a4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a70:	4b52      	ldr	r3, [pc, #328]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	4b52      	ldr	r3, [pc, #328]	; (8003bc0 <HAL_RCC_OscConfig+0x61c>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6a11      	ldr	r1, [r2, #32]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a80:	3a01      	subs	r2, #1
 8003a82:	0112      	lsls	r2, r2, #4
 8003a84:	4311      	orrs	r1, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a8a:	0212      	lsls	r2, r2, #8
 8003a8c:	4311      	orrs	r1, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a92:	0852      	lsrs	r2, r2, #1
 8003a94:	3a01      	subs	r2, #1
 8003a96:	0552      	lsls	r2, r2, #21
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a9e:	0852      	lsrs	r2, r2, #1
 8003aa0:	3a01      	subs	r2, #1
 8003aa2:	0652      	lsls	r2, r2, #25
 8003aa4:	4311      	orrs	r1, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003aaa:	06d2      	lsls	r2, r2, #27
 8003aac:	430a      	orrs	r2, r1
 8003aae:	4943      	ldr	r1, [pc, #268]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab4:	4b41      	ldr	r3, [pc, #260]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a40      	ldr	r2, [pc, #256]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003abe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac0:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a3d      	ldr	r2, [pc, #244]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fd f95a 	bl	8000d84 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd f956 	bl	8000d84 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e066      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae6:	4b35      	ldr	r3, [pc, #212]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x530>
 8003af2:	e05e      	b.n	8003bb2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af4:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a30      	ldr	r2, [pc, #192]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd f940 	bl	8000d84 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fd f93c 	bl	8000d84 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e04c      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1a:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b26:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	4924      	ldr	r1, [pc, #144]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003b2c:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <HAL_RCC_OscConfig+0x620>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	60cb      	str	r3, [r1, #12]
 8003b32:	e03e      	b.n	8003bb2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e039      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b40:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <HAL_RCC_OscConfig+0x618>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f003 0203 	and.w	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d12c      	bne.n	8003bae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d123      	bne.n	8003bae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d11b      	bne.n	8003bae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d113      	bne.n	8003bae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	3b01      	subs	r3, #1
 8003b94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d109      	bne.n	8003bae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d001      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3720      	adds	r7, #32
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	019f800c 	.word	0x019f800c
 8003bc4:	feeefffc 	.word	0xfeeefffc

08003bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e11e      	b.n	8003e1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003be0:	4b91      	ldr	r3, [pc, #580]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d910      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b8e      	ldr	r3, [pc, #568]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 020f 	bic.w	r2, r3, #15
 8003bf6:	498c      	ldr	r1, [pc, #560]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b8a      	ldr	r3, [pc, #552]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e106      	b.n	8003e1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d073      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d129      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c24:	4b81      	ldr	r3, [pc, #516]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0f4      	b.n	8003e1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c34:	f000 f99e 	bl	8003f74 <RCC_GetSysClockFreqFromPLLSource>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4a7c      	ldr	r2, [pc, #496]	; (8003e30 <HAL_RCC_ClockConfig+0x268>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d93f      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c42:	4b7a      	ldr	r3, [pc, #488]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d033      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d12f      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c62:	4b72      	ldr	r3, [pc, #456]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c6a:	4a70      	ldr	r2, [pc, #448]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c72:	2380      	movs	r3, #128	; 0x80
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	e024      	b.n	8003cc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c80:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0c6      	b.n	8003e1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c90:	4b66      	ldr	r3, [pc, #408]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0be      	b.n	8003e1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ca0:	f000 f8ce 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4a61      	ldr	r2, [pc, #388]	; (8003e30 <HAL_RCC_ClockConfig+0x268>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d909      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cae:	4b5f      	ldr	r3, [pc, #380]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb6:	4a5d      	ldr	r2, [pc, #372]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cc2:	4b5a      	ldr	r3, [pc, #360]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f023 0203 	bic.w	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4957      	ldr	r1, [pc, #348]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd4:	f7fd f856 	bl	8000d84 <HAL_GetTick>
 8003cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cdc:	f7fd f852 	bl	8000d84 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e095      	b.n	8003e1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	4b4e      	ldr	r3, [pc, #312]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 020c 	and.w	r2, r3, #12
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d1eb      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d023      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d1c:	4b43      	ldr	r3, [pc, #268]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a42      	ldr	r2, [pc, #264]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003d22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d34:	4b3d      	ldr	r3, [pc, #244]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d3c:	4a3b      	ldr	r2, [pc, #236]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003d3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d44:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4936      	ldr	r1, [pc, #216]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b80      	cmp	r3, #128	; 0x80
 8003d5c:	d105      	bne.n	8003d6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d5e:	4b33      	ldr	r3, [pc, #204]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	4a32      	ldr	r2, [pc, #200]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003d64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d21d      	bcs.n	8003db4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d78:	4b2b      	ldr	r3, [pc, #172]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 020f 	bic.w	r2, r3, #15
 8003d80:	4929      	ldr	r1, [pc, #164]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d88:	f7fc fffc 	bl	8000d84 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fc fff8 	bl	8000d84 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e03b      	b.n	8003e1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d1ed      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4917      	ldr	r1, [pc, #92]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	490f      	ldr	r1, [pc, #60]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003df2:	f000 f825 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003df6:	4602      	mov	r2, r0
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	490c      	ldr	r1, [pc, #48]	; (8003e34 <HAL_RCC_ClockConfig+0x26c>)
 8003e04:	5ccb      	ldrb	r3, [r1, r3]
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0e:	4a0a      	ldr	r2, [pc, #40]	; (8003e38 <HAL_RCC_ClockConfig+0x270>)
 8003e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <HAL_RCC_ClockConfig+0x274>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fc ff68 	bl	8000cec <HAL_InitTick>
 8003e1c:	4603      	mov	r3, r0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40022000 	.word	0x40022000
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	04c4b400 	.word	0x04c4b400
 8003e34:	080051e8 	.word	0x080051e8
 8003e38:	20000004 	.word	0x20000004
 8003e3c:	20000008 	.word	0x20000008

08003e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e46:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d102      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e52:	4b2a      	ldr	r3, [pc, #168]	; (8003efc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	e047      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e58:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 030c 	and.w	r3, r3, #12
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d102      	bne.n	8003e6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e64:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	e03e      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e6a:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	d136      	bne.n	8003ee4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e80:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d10c      	bne.n	8003eae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e94:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	4a16      	ldr	r2, [pc, #88]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e9e:	68d2      	ldr	r2, [r2, #12]
 8003ea0:	0a12      	lsrs	r2, r2, #8
 8003ea2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	617b      	str	r3, [r7, #20]
      break;
 8003eac:	e00c      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eae:	4a13      	ldr	r2, [pc, #76]	; (8003efc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb6:	4a10      	ldr	r2, [pc, #64]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb8:	68d2      	ldr	r2, [r2, #12]
 8003eba:	0a12      	lsrs	r2, r2, #8
 8003ebc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]
      break;
 8003ec6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	0e5b      	lsrs	r3, r3, #25
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	e001      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ee8:	693b      	ldr	r3, [r7, #16]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	00f42400 	.word	0x00f42400
 8003f00:	016e3600 	.word	0x016e3600

08003f04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000004 	.word	0x20000004

08003f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f20:	f7ff fff0 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4904      	ldr	r1, [pc, #16]	; (8003f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000
 8003f44:	080051f8 	.word	0x080051f8

08003f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f4c:	f7ff ffda 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	0adb      	lsrs	r3, r3, #11
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	4904      	ldr	r1, [pc, #16]	; (8003f70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f5e:	5ccb      	ldrb	r3, [r1, r3]
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	080051f8 	.word	0x080051f8

08003f74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	3301      	adds	r3, #1
 8003f90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d10c      	bne.n	8003fb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f98:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fa2:	68d2      	ldr	r2, [r2, #12]
 8003fa4:	0a12      	lsrs	r2, r2, #8
 8003fa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	617b      	str	r3, [r7, #20]
    break;
 8003fb0:	e00c      	b.n	8003fcc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fb2:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	4a0e      	ldr	r2, [pc, #56]	; (8003ff4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fbc:	68d2      	ldr	r2, [r2, #12]
 8003fbe:	0a12      	lsrs	r2, r2, #8
 8003fc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fc4:	fb02 f303 	mul.w	r3, r2, r3
 8003fc8:	617b      	str	r3, [r7, #20]
    break;
 8003fca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fcc:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	0e5b      	lsrs	r3, r3, #25
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003fe6:	687b      	ldr	r3, [r7, #4]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	016e3600 	.word	0x016e3600
 8003ffc:	00f42400 	.word	0x00f42400

08004000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004008:	2300      	movs	r3, #0
 800400a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800400c:	2300      	movs	r3, #0
 800400e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8098 	beq.w	800414e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004022:	4b43      	ldr	r3, [pc, #268]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	4b40      	ldr	r3, [pc, #256]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	4a3f      	ldr	r2, [pc, #252]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004038:	6593      	str	r3, [r2, #88]	; 0x58
 800403a:	4b3d      	ldr	r3, [pc, #244]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004046:	2301      	movs	r3, #1
 8004048:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800404a:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a39      	ldr	r2, [pc, #228]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004054:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004056:	f7fc fe95 	bl	8000d84 <HAL_GetTick>
 800405a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800405c:	e009      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405e:	f7fc fe91 	bl	8000d84 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d902      	bls.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	74fb      	strb	r3, [r7, #19]
        break;
 8004070:	e005      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004072:	4b30      	ldr	r3, [pc, #192]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ef      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d159      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004084:	4b2a      	ldr	r3, [pc, #168]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01e      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	d019      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040a0:	4b23      	ldr	r3, [pc, #140]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ac:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040bc:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040de:	f7fc fe51 	bl	8000d84 <HAL_GetTick>
 80040e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e4:	e00b      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e6:	f7fc fe4d 	bl	8000d84 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d902      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	74fb      	strb	r3, [r7, #19]
            break;
 80040fc:	e006      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ec      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10b      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004120:	4903      	ldr	r1, [pc, #12]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004128:	e008      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800412a:	7cfb      	ldrb	r3, [r7, #19]
 800412c:	74bb      	strb	r3, [r7, #18]
 800412e:	e005      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800413c:	7c7b      	ldrb	r3, [r7, #17]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d105      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	4ba7      	ldr	r3, [pc, #668]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	4aa6      	ldr	r2, [pc, #664]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800415a:	4ba1      	ldr	r3, [pc, #644]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f023 0203 	bic.w	r2, r3, #3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	499d      	ldr	r1, [pc, #628]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800417c:	4b98      	ldr	r3, [pc, #608]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 020c 	bic.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4995      	ldr	r1, [pc, #596]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800419e:	4b90      	ldr	r3, [pc, #576]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	498c      	ldr	r1, [pc, #560]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041c0:	4b87      	ldr	r3, [pc, #540]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	4984      	ldr	r1, [pc, #528]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041e2:	4b7f      	ldr	r3, [pc, #508]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	497b      	ldr	r1, [pc, #492]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004204:	4b76      	ldr	r3, [pc, #472]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	4973      	ldr	r1, [pc, #460]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004226:	4b6e      	ldr	r3, [pc, #440]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	496a      	ldr	r1, [pc, #424]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004248:	4b65      	ldr	r3, [pc, #404]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	4962      	ldr	r1, [pc, #392]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800426a:	4b5d      	ldr	r3, [pc, #372]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	4959      	ldr	r1, [pc, #356]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800428c:	4b54      	ldr	r3, [pc, #336]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800428e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004292:	f023 0203 	bic.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	4951      	ldr	r1, [pc, #324]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ae:	4b4c      	ldr	r3, [pc, #304]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	4948      	ldr	r1, [pc, #288]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d015      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042d0:	4b43      	ldr	r3, [pc, #268]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	4940      	ldr	r1, [pc, #256]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ee:	d105      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f0:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a3a      	ldr	r2, [pc, #232]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004304:	2b00      	cmp	r3, #0
 8004306:	d015      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004308:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004316:	4932      	ldr	r1, [pc, #200]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004326:	d105      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004328:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a2c      	ldr	r2, [pc, #176]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004332:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004340:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	4924      	ldr	r1, [pc, #144]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800435e:	d105      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004360:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800436a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d015      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004378:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	4916      	ldr	r1, [pc, #88]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004396:	d105      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4a10      	ldr	r2, [pc, #64]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800439e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d019      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	4908      	ldr	r1, [pc, #32]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ce:	d109      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d0:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a02      	ldr	r2, [pc, #8]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043da:	60d3      	str	r3, [r2, #12]
 80043dc:	e002      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d015      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043f0:	4b29      	ldr	r3, [pc, #164]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	4926      	ldr	r1, [pc, #152]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800440e:	d105      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004410:	4b21      	ldr	r3, [pc, #132]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4a20      	ldr	r2, [pc, #128]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d015      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004436:	4918      	ldr	r1, [pc, #96]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d105      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4a12      	ldr	r2, [pc, #72]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800444e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004452:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d015      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004460:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004462:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004466:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	490a      	ldr	r1, [pc, #40]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800447e:	d105      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a04      	ldr	r2, [pc, #16]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800448a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800448c:	7cbb      	ldrb	r3, [r7, #18]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000

0800449c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e042      	b.n	8004534 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fc fb0d 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2224      	movs	r2, #36	; 0x24
 80044ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fb24 	bl	8004b34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f825 	bl	800453c <UART_SetConfig>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e01b      	b.n	8004534 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800450a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800451a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fba3 	bl	8004c78 <UART_CheckIdleState>
 8004532:	4603      	mov	r3, r0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800453c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004540:	b08c      	sub	sp, #48	; 0x30
 8004542:	af00      	add	r7, sp, #0
 8004544:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	431a      	orrs	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	431a      	orrs	r2, r3
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	4313      	orrs	r3, r2
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4baa      	ldr	r3, [pc, #680]	; (8004814 <UART_SetConfig+0x2d8>)
 800456c:	4013      	ands	r3, r2
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	6812      	ldr	r2, [r2, #0]
 8004572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004574:	430b      	orrs	r3, r1
 8004576:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a9f      	ldr	r2, [pc, #636]	; (8004818 <UART_SetConfig+0x2dc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a4:	4313      	orrs	r3, r2
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80045b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045bc:	430b      	orrs	r3, r1
 80045be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f023 010f 	bic.w	r1, r3, #15
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a90      	ldr	r2, [pc, #576]	; (800481c <UART_SetConfig+0x2e0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d125      	bne.n	800462c <UART_SetConfig+0xf0>
 80045e0:	4b8f      	ldr	r3, [pc, #572]	; (8004820 <UART_SetConfig+0x2e4>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d81a      	bhi.n	8004624 <UART_SetConfig+0xe8>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <UART_SetConfig+0xb8>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004605 	.word	0x08004605
 80045f8:	08004615 	.word	0x08004615
 80045fc:	0800460d 	.word	0x0800460d
 8004600:	0800461d 	.word	0x0800461d
 8004604:	2301      	movs	r3, #1
 8004606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800460a:	e116      	b.n	800483a <UART_SetConfig+0x2fe>
 800460c:	2302      	movs	r3, #2
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004612:	e112      	b.n	800483a <UART_SetConfig+0x2fe>
 8004614:	2304      	movs	r3, #4
 8004616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800461a:	e10e      	b.n	800483a <UART_SetConfig+0x2fe>
 800461c:	2308      	movs	r3, #8
 800461e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004622:	e10a      	b.n	800483a <UART_SetConfig+0x2fe>
 8004624:	2310      	movs	r3, #16
 8004626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800462a:	e106      	b.n	800483a <UART_SetConfig+0x2fe>
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a7c      	ldr	r2, [pc, #496]	; (8004824 <UART_SetConfig+0x2e8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d138      	bne.n	80046a8 <UART_SetConfig+0x16c>
 8004636:	4b7a      	ldr	r3, [pc, #488]	; (8004820 <UART_SetConfig+0x2e4>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b0c      	cmp	r3, #12
 8004642:	d82d      	bhi.n	80046a0 <UART_SetConfig+0x164>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <UART_SetConfig+0x110>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004681 	.word	0x08004681
 8004650:	080046a1 	.word	0x080046a1
 8004654:	080046a1 	.word	0x080046a1
 8004658:	080046a1 	.word	0x080046a1
 800465c:	08004691 	.word	0x08004691
 8004660:	080046a1 	.word	0x080046a1
 8004664:	080046a1 	.word	0x080046a1
 8004668:	080046a1 	.word	0x080046a1
 800466c:	08004689 	.word	0x08004689
 8004670:	080046a1 	.word	0x080046a1
 8004674:	080046a1 	.word	0x080046a1
 8004678:	080046a1 	.word	0x080046a1
 800467c:	08004699 	.word	0x08004699
 8004680:	2300      	movs	r3, #0
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004686:	e0d8      	b.n	800483a <UART_SetConfig+0x2fe>
 8004688:	2302      	movs	r3, #2
 800468a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468e:	e0d4      	b.n	800483a <UART_SetConfig+0x2fe>
 8004690:	2304      	movs	r3, #4
 8004692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004696:	e0d0      	b.n	800483a <UART_SetConfig+0x2fe>
 8004698:	2308      	movs	r3, #8
 800469a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469e:	e0cc      	b.n	800483a <UART_SetConfig+0x2fe>
 80046a0:	2310      	movs	r3, #16
 80046a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046a6:	e0c8      	b.n	800483a <UART_SetConfig+0x2fe>
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a5e      	ldr	r2, [pc, #376]	; (8004828 <UART_SetConfig+0x2ec>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d125      	bne.n	80046fe <UART_SetConfig+0x1c2>
 80046b2:	4b5b      	ldr	r3, [pc, #364]	; (8004820 <UART_SetConfig+0x2e4>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046bc:	2b30      	cmp	r3, #48	; 0x30
 80046be:	d016      	beq.n	80046ee <UART_SetConfig+0x1b2>
 80046c0:	2b30      	cmp	r3, #48	; 0x30
 80046c2:	d818      	bhi.n	80046f6 <UART_SetConfig+0x1ba>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d00a      	beq.n	80046de <UART_SetConfig+0x1a2>
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d814      	bhi.n	80046f6 <UART_SetConfig+0x1ba>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <UART_SetConfig+0x19a>
 80046d0:	2b10      	cmp	r3, #16
 80046d2:	d008      	beq.n	80046e6 <UART_SetConfig+0x1aa>
 80046d4:	e00f      	b.n	80046f6 <UART_SetConfig+0x1ba>
 80046d6:	2300      	movs	r3, #0
 80046d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046dc:	e0ad      	b.n	800483a <UART_SetConfig+0x2fe>
 80046de:	2302      	movs	r3, #2
 80046e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e4:	e0a9      	b.n	800483a <UART_SetConfig+0x2fe>
 80046e6:	2304      	movs	r3, #4
 80046e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ec:	e0a5      	b.n	800483a <UART_SetConfig+0x2fe>
 80046ee:	2308      	movs	r3, #8
 80046f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f4:	e0a1      	b.n	800483a <UART_SetConfig+0x2fe>
 80046f6:	2310      	movs	r3, #16
 80046f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046fc:	e09d      	b.n	800483a <UART_SetConfig+0x2fe>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a4a      	ldr	r2, [pc, #296]	; (800482c <UART_SetConfig+0x2f0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d125      	bne.n	8004754 <UART_SetConfig+0x218>
 8004708:	4b45      	ldr	r3, [pc, #276]	; (8004820 <UART_SetConfig+0x2e4>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004712:	2bc0      	cmp	r3, #192	; 0xc0
 8004714:	d016      	beq.n	8004744 <UART_SetConfig+0x208>
 8004716:	2bc0      	cmp	r3, #192	; 0xc0
 8004718:	d818      	bhi.n	800474c <UART_SetConfig+0x210>
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d00a      	beq.n	8004734 <UART_SetConfig+0x1f8>
 800471e:	2b80      	cmp	r3, #128	; 0x80
 8004720:	d814      	bhi.n	800474c <UART_SetConfig+0x210>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <UART_SetConfig+0x1f0>
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d008      	beq.n	800473c <UART_SetConfig+0x200>
 800472a:	e00f      	b.n	800474c <UART_SetConfig+0x210>
 800472c:	2300      	movs	r3, #0
 800472e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004732:	e082      	b.n	800483a <UART_SetConfig+0x2fe>
 8004734:	2302      	movs	r3, #2
 8004736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800473a:	e07e      	b.n	800483a <UART_SetConfig+0x2fe>
 800473c:	2304      	movs	r3, #4
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004742:	e07a      	b.n	800483a <UART_SetConfig+0x2fe>
 8004744:	2308      	movs	r3, #8
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474a:	e076      	b.n	800483a <UART_SetConfig+0x2fe>
 800474c:	2310      	movs	r3, #16
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004752:	e072      	b.n	800483a <UART_SetConfig+0x2fe>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a35      	ldr	r2, [pc, #212]	; (8004830 <UART_SetConfig+0x2f4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d12a      	bne.n	80047b4 <UART_SetConfig+0x278>
 800475e:	4b30      	ldr	r3, [pc, #192]	; (8004820 <UART_SetConfig+0x2e4>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800476c:	d01a      	beq.n	80047a4 <UART_SetConfig+0x268>
 800476e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004772:	d81b      	bhi.n	80047ac <UART_SetConfig+0x270>
 8004774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004778:	d00c      	beq.n	8004794 <UART_SetConfig+0x258>
 800477a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800477e:	d815      	bhi.n	80047ac <UART_SetConfig+0x270>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <UART_SetConfig+0x250>
 8004784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004788:	d008      	beq.n	800479c <UART_SetConfig+0x260>
 800478a:	e00f      	b.n	80047ac <UART_SetConfig+0x270>
 800478c:	2300      	movs	r3, #0
 800478e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004792:	e052      	b.n	800483a <UART_SetConfig+0x2fe>
 8004794:	2302      	movs	r3, #2
 8004796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800479a:	e04e      	b.n	800483a <UART_SetConfig+0x2fe>
 800479c:	2304      	movs	r3, #4
 800479e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a2:	e04a      	b.n	800483a <UART_SetConfig+0x2fe>
 80047a4:	2308      	movs	r3, #8
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047aa:	e046      	b.n	800483a <UART_SetConfig+0x2fe>
 80047ac:	2310      	movs	r3, #16
 80047ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047b2:	e042      	b.n	800483a <UART_SetConfig+0x2fe>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a17      	ldr	r2, [pc, #92]	; (8004818 <UART_SetConfig+0x2dc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d13a      	bne.n	8004834 <UART_SetConfig+0x2f8>
 80047be:	4b18      	ldr	r3, [pc, #96]	; (8004820 <UART_SetConfig+0x2e4>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047cc:	d01a      	beq.n	8004804 <UART_SetConfig+0x2c8>
 80047ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047d2:	d81b      	bhi.n	800480c <UART_SetConfig+0x2d0>
 80047d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d8:	d00c      	beq.n	80047f4 <UART_SetConfig+0x2b8>
 80047da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047de:	d815      	bhi.n	800480c <UART_SetConfig+0x2d0>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <UART_SetConfig+0x2b0>
 80047e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e8:	d008      	beq.n	80047fc <UART_SetConfig+0x2c0>
 80047ea:	e00f      	b.n	800480c <UART_SetConfig+0x2d0>
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f2:	e022      	b.n	800483a <UART_SetConfig+0x2fe>
 80047f4:	2302      	movs	r3, #2
 80047f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fa:	e01e      	b.n	800483a <UART_SetConfig+0x2fe>
 80047fc:	2304      	movs	r3, #4
 80047fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004802:	e01a      	b.n	800483a <UART_SetConfig+0x2fe>
 8004804:	2308      	movs	r3, #8
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480a:	e016      	b.n	800483a <UART_SetConfig+0x2fe>
 800480c:	2310      	movs	r3, #16
 800480e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004812:	e012      	b.n	800483a <UART_SetConfig+0x2fe>
 8004814:	cfff69f3 	.word	0xcfff69f3
 8004818:	40008000 	.word	0x40008000
 800481c:	40013800 	.word	0x40013800
 8004820:	40021000 	.word	0x40021000
 8004824:	40004400 	.word	0x40004400
 8004828:	40004800 	.word	0x40004800
 800482c:	40004c00 	.word	0x40004c00
 8004830:	40005000 	.word	0x40005000
 8004834:	2310      	movs	r3, #16
 8004836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4aae      	ldr	r2, [pc, #696]	; (8004af8 <UART_SetConfig+0x5bc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	f040 8097 	bne.w	8004974 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800484a:	2b08      	cmp	r3, #8
 800484c:	d823      	bhi.n	8004896 <UART_SetConfig+0x35a>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <UART_SetConfig+0x318>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004879 	.word	0x08004879
 8004858:	08004897 	.word	0x08004897
 800485c:	08004881 	.word	0x08004881
 8004860:	08004897 	.word	0x08004897
 8004864:	08004887 	.word	0x08004887
 8004868:	08004897 	.word	0x08004897
 800486c:	08004897 	.word	0x08004897
 8004870:	08004897 	.word	0x08004897
 8004874:	0800488f 	.word	0x0800488f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004878:	f7ff fb50 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 800487c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800487e:	e010      	b.n	80048a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004880:	4b9e      	ldr	r3, [pc, #632]	; (8004afc <UART_SetConfig+0x5c0>)
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004884:	e00d      	b.n	80048a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004886:	f7ff fadb 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 800488a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800488c:	e009      	b.n	80048a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004894:	e005      	b.n	80048a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8130 	beq.w	8004b0a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	4a94      	ldr	r2, [pc, #592]	; (8004b00 <UART_SetConfig+0x5c4>)
 80048b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b4:	461a      	mov	r2, r3
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4413      	add	r3, r2
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d305      	bcc.n	80048da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d903      	bls.n	80048e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048e0:	e113      	b.n	8004b0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	2200      	movs	r2, #0
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	60fa      	str	r2, [r7, #12]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	4a84      	ldr	r2, [pc, #528]	; (8004b00 <UART_SetConfig+0x5c4>)
 80048f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2200      	movs	r2, #0
 80048f8:	603b      	str	r3, [r7, #0]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004900:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004904:	f7fb fc88 	bl	8000218 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	020b      	lsls	r3, r1, #8
 800491a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800491e:	0202      	lsls	r2, r0, #8
 8004920:	6979      	ldr	r1, [r7, #20]
 8004922:	6849      	ldr	r1, [r1, #4]
 8004924:	0849      	lsrs	r1, r1, #1
 8004926:	2000      	movs	r0, #0
 8004928:	460c      	mov	r4, r1
 800492a:	4605      	mov	r5, r0
 800492c:	eb12 0804 	adds.w	r8, r2, r4
 8004930:	eb43 0905 	adc.w	r9, r3, r5
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	469a      	mov	sl, r3
 800493c:	4693      	mov	fp, r2
 800493e:	4652      	mov	r2, sl
 8004940:	465b      	mov	r3, fp
 8004942:	4640      	mov	r0, r8
 8004944:	4649      	mov	r1, r9
 8004946:	f7fb fc67 	bl	8000218 <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4613      	mov	r3, r2
 8004950:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004958:	d308      	bcc.n	800496c <UART_SetConfig+0x430>
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004960:	d204      	bcs.n	800496c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6a3a      	ldr	r2, [r7, #32]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	e0ce      	b.n	8004b0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004972:	e0ca      	b.n	8004b0a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497c:	d166      	bne.n	8004a4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800497e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004982:	2b08      	cmp	r3, #8
 8004984:	d827      	bhi.n	80049d6 <UART_SetConfig+0x49a>
 8004986:	a201      	add	r2, pc, #4	; (adr r2, 800498c <UART_SetConfig+0x450>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049b9 	.word	0x080049b9
 8004994:	080049c1 	.word	0x080049c1
 8004998:	080049d7 	.word	0x080049d7
 800499c:	080049c7 	.word	0x080049c7
 80049a0:	080049d7 	.word	0x080049d7
 80049a4:	080049d7 	.word	0x080049d7
 80049a8:	080049d7 	.word	0x080049d7
 80049ac:	080049cf 	.word	0x080049cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b0:	f7ff fab4 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 80049b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049b6:	e014      	b.n	80049e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b8:	f7ff fac6 	bl	8003f48 <HAL_RCC_GetPCLK2Freq>
 80049bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049be:	e010      	b.n	80049e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c0:	4b4e      	ldr	r3, [pc, #312]	; (8004afc <UART_SetConfig+0x5c0>)
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049c4:	e00d      	b.n	80049e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c6:	f7ff fa3b 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 80049ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049cc:	e009      	b.n	80049e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049d4:	e005      	b.n	80049e2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8090 	beq.w	8004b0a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	4a44      	ldr	r2, [pc, #272]	; (8004b00 <UART_SetConfig+0x5c4>)
 80049f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049f4:	461a      	mov	r2, r3
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049fc:	005a      	lsls	r2, r3, #1
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	441a      	add	r2, r3
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	2b0f      	cmp	r3, #15
 8004a14:	d916      	bls.n	8004a44 <UART_SetConfig+0x508>
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1c:	d212      	bcs.n	8004a44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f023 030f 	bic.w	r3, r3, #15
 8004a26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	8bfb      	ldrh	r3, [r7, #30]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	8bfa      	ldrh	r2, [r7, #30]
 8004a40:	60da      	str	r2, [r3, #12]
 8004a42:	e062      	b.n	8004b0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a4a:	e05e      	b.n	8004b0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d828      	bhi.n	8004aa6 <UART_SetConfig+0x56a>
 8004a54:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x520>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	08004aa7 	.word	0x08004aa7
 8004a6c:	08004a97 	.word	0x08004a97
 8004a70:	08004aa7 	.word	0x08004aa7
 8004a74:	08004aa7 	.word	0x08004aa7
 8004a78:	08004aa7 	.word	0x08004aa7
 8004a7c:	08004a9f 	.word	0x08004a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a80:	f7ff fa4c 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8004a84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a86:	e014      	b.n	8004ab2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a88:	f7ff fa5e 	bl	8003f48 <HAL_RCC_GetPCLK2Freq>
 8004a8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a8e:	e010      	b.n	8004ab2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a90:	4b1a      	ldr	r3, [pc, #104]	; (8004afc <UART_SetConfig+0x5c0>)
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a94:	e00d      	b.n	8004ab2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a96:	f7ff f9d3 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8004a9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a9c:	e009      	b.n	8004ab2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004aa4:	e005      	b.n	8004ab2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ab0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d028      	beq.n	8004b0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	4a10      	ldr	r2, [pc, #64]	; (8004b00 <UART_SetConfig+0x5c4>)
 8004abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	441a      	add	r2, r3
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	2b0f      	cmp	r3, #15
 8004ae0:	d910      	bls.n	8004b04 <UART_SetConfig+0x5c8>
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d20c      	bcs.n	8004b04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	e009      	b.n	8004b0a <UART_SetConfig+0x5ce>
 8004af6:	bf00      	nop
 8004af8:	40008000 	.word	0x40008000
 8004afc:	00f42400 	.word	0x00f42400
 8004b00:	08005200 	.word	0x08005200
      }
      else
      {
        ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2200      	movs	r2, #0
 8004b24:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004b26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3730      	adds	r7, #48	; 0x30
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01a      	beq.n	8004c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c32:	d10a      	bne.n	8004c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	605a      	str	r2, [r3, #4]
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b098      	sub	sp, #96	; 0x60
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c88:	f7fc f87c 	bl	8000d84 <HAL_GetTick>
 8004c8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d12f      	bne.n	8004cfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f88e 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d022      	beq.n	8004cfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cca:	653b      	str	r3, [r7, #80]	; 0x50
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e6      	bne.n	8004cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e063      	b.n	8004dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d149      	bne.n	8004d9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d12:	2200      	movs	r2, #0
 8004d14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f857 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d03c      	beq.n	8004d9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	623b      	str	r3, [r7, #32]
   return(result);
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d42:	633b      	str	r3, [r7, #48]	; 0x30
 8004d44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e6      	bne.n	8004d24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3308      	adds	r3, #8
 8004d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d76:	61fa      	str	r2, [r7, #28]
 8004d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	69b9      	ldr	r1, [r7, #24]
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	617b      	str	r3, [r7, #20]
   return(result);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e012      	b.n	8004dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3758      	adds	r7, #88	; 0x58
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ddc:	e04f      	b.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d04b      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7fb ffcd 	bl	8000d84 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e04e      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d037      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b80      	cmp	r3, #128	; 0x80
 8004e12:	d034      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d031      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d110      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f838 	bl	8004ea6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2208      	movs	r2, #8
 8004e3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e029      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e58:	d111      	bne.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f81e 	bl	8004ea6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e00f      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4013      	ands	r3, r2
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	bf0c      	ite	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	2300      	movne	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d0a0      	beq.n	8004dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b095      	sub	sp, #84	; 0x54
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8004ece:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ed2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e6      	bne.n	8004eae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	f023 0301 	bic.w	r3, r3, #1
 8004efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3308      	adds	r3, #8
 8004f02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e3      	bne.n	8004ee0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d118      	bne.n	8004f52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f023 0310 	bic.w	r3, r3, #16
 8004f34:	647b      	str	r3, [r7, #68]	; 0x44
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6979      	ldr	r1, [r7, #20]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e6      	bne.n	8004f20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004f66:	bf00      	nop
 8004f68:	3754      	adds	r7, #84	; 0x54
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e027      	b.n	8004fd8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2224      	movs	r2, #36	; 0x24
 8004f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004fb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e02d      	b.n	8005058 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2224      	movs	r2, #36	; 0x24
 8005008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f84f 	bl	80050dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005074:	2302      	movs	r3, #2
 8005076:	e02d      	b.n	80050d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2224      	movs	r2, #36	; 0x24
 8005084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f811 	bl	80050dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d108      	bne.n	80050fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050fc:	e031      	b.n	8005162 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050fe:	2308      	movs	r3, #8
 8005100:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005102:	2308      	movs	r3, #8
 8005104:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	0e5b      	lsrs	r3, r3, #25
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	0f5b      	lsrs	r3, r3, #29
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005126:	7bbb      	ldrb	r3, [r7, #14]
 8005128:	7b3a      	ldrb	r2, [r7, #12]
 800512a:	4911      	ldr	r1, [pc, #68]	; (8005170 <UARTEx_SetNbDataToProcess+0x94>)
 800512c:	5c8a      	ldrb	r2, [r1, r2]
 800512e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005132:	7b3a      	ldrb	r2, [r7, #12]
 8005134:	490f      	ldr	r1, [pc, #60]	; (8005174 <UARTEx_SetNbDataToProcess+0x98>)
 8005136:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005138:	fb93 f3f2 	sdiv	r3, r3, r2
 800513c:	b29a      	uxth	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	7b7a      	ldrb	r2, [r7, #13]
 8005148:	4909      	ldr	r1, [pc, #36]	; (8005170 <UARTEx_SetNbDataToProcess+0x94>)
 800514a:	5c8a      	ldrb	r2, [r1, r2]
 800514c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005150:	7b7a      	ldrb	r2, [r7, #13]
 8005152:	4908      	ldr	r1, [pc, #32]	; (8005174 <UARTEx_SetNbDataToProcess+0x98>)
 8005154:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005156:	fb93 f3f2 	sdiv	r3, r3, r2
 800515a:	b29a      	uxth	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005162:	bf00      	nop
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	08005218 	.word	0x08005218
 8005174:	08005220 	.word	0x08005220

08005178 <memset>:
 8005178:	4402      	add	r2, r0
 800517a:	4603      	mov	r3, r0
 800517c:	4293      	cmp	r3, r2
 800517e:	d100      	bne.n	8005182 <memset+0xa>
 8005180:	4770      	bx	lr
 8005182:	f803 1b01 	strb.w	r1, [r3], #1
 8005186:	e7f9      	b.n	800517c <memset+0x4>

08005188 <__libc_init_array>:
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	4d0d      	ldr	r5, [pc, #52]	; (80051c0 <__libc_init_array+0x38>)
 800518c:	4c0d      	ldr	r4, [pc, #52]	; (80051c4 <__libc_init_array+0x3c>)
 800518e:	1b64      	subs	r4, r4, r5
 8005190:	10a4      	asrs	r4, r4, #2
 8005192:	2600      	movs	r6, #0
 8005194:	42a6      	cmp	r6, r4
 8005196:	d109      	bne.n	80051ac <__libc_init_array+0x24>
 8005198:	4d0b      	ldr	r5, [pc, #44]	; (80051c8 <__libc_init_array+0x40>)
 800519a:	4c0c      	ldr	r4, [pc, #48]	; (80051cc <__libc_init_array+0x44>)
 800519c:	f000 f818 	bl	80051d0 <_init>
 80051a0:	1b64      	subs	r4, r4, r5
 80051a2:	10a4      	asrs	r4, r4, #2
 80051a4:	2600      	movs	r6, #0
 80051a6:	42a6      	cmp	r6, r4
 80051a8:	d105      	bne.n	80051b6 <__libc_init_array+0x2e>
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
 80051ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b0:	4798      	blx	r3
 80051b2:	3601      	adds	r6, #1
 80051b4:	e7ee      	b.n	8005194 <__libc_init_array+0xc>
 80051b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ba:	4798      	blx	r3
 80051bc:	3601      	adds	r6, #1
 80051be:	e7f2      	b.n	80051a6 <__libc_init_array+0x1e>
 80051c0:	08005230 	.word	0x08005230
 80051c4:	08005230 	.word	0x08005230
 80051c8:	08005230 	.word	0x08005230
 80051cc:	08005234 	.word	0x08005234

080051d0 <_init>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr

080051dc <_fini>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	bf00      	nop
 80051e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e2:	bc08      	pop	{r3}
 80051e4:	469e      	mov	lr, r3
 80051e6:	4770      	bx	lr
