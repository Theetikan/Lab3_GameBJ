
GamePon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e3c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006054  08006054  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006054  08006054  00016054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800605c  0800605c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000010  08006074  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08006074  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a36  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002596  00000000  00000000  00032ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  00035050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf5  00000000  00000000  00035fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d84  00000000  00000000  00036b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001386c  00000000  00000000  0005c919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef07a  00000000  00000000  00070185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ff0  00000000  00000000  0015f200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001631f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005ffc 	.word	0x08005ffc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005ffc 	.word	0x08005ffc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fda5 	bl	8001066 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f820 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f964 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f930 	bl	8000788 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f8a6 	bl	8000678 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800052c:	f000 f864 	bl	80005f8 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000530:	f000 f8ec 	bl	800070c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  SPITxRx_Setup();
 8000534:	f000 fa34 	bl	80009a0 <SPITxRx_Setup>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  EEPROMReadExample(eepromDataReadBack, 4);
 8000538:	2104      	movs	r1, #4
 800053a:	4808      	ldr	r0, [pc, #32]	; (800055c <main+0x48>)
 800053c:	f000 fa0a 	bl	8000954 <EEPROMReadExample>
	  HAL_Delay(100);
 8000540:	2064      	movs	r0, #100	; 0x64
 8000542:	f000 fe01 	bl	8001148 <HAL_Delay>
	  EEPROMWriteExample();
 8000546:	f000 f9e1 	bl	800090c <EEPROMWriteExample>

	  SPITxRx_readIO();
 800054a:	f000 fa3f 	bl	80009cc <SPITxRx_readIO>

	  Switch();
 800054e:	f000 fa75 	bl	8000a3c <Switch>
	  StateGame();
 8000552:	f000 faa3 	bl	8000a9c <StateGame>
	  LED();
 8000556:	f000 faf9 	bl	8000b4c <LED>
  {
 800055a:	e7ed      	b.n	8000538 <main+0x24>
 800055c:	2000023c 	.word	0x2000023c

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	2238      	movs	r2, #56	; 0x38
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f005 fd18 	bl	8005fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000582:	2000      	movs	r0, #0
 8000584:	f003 f948 	bl	8003818 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2340      	movs	r3, #64	; 0x40
 8000594:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800059e:	2304      	movs	r3, #4
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a2:	2355      	movs	r3, #85	; 0x55
 80005a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 f9e2 	bl	8003980 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c2:	f000 fb01 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2303      	movs	r3, #3
 80005cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2104      	movs	r1, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fce0 	bl	8003fa4 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ea:	f000 faed 	bl	8000bc8 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_I2C1_Init+0x74>)
 80005fe:	4a1c      	ldr	r2, [pc, #112]	; (8000670 <MX_I2C1_Init+0x78>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_I2C1_Init+0x74>)
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <MX_I2C1_Init+0x7c>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_I2C1_Init+0x74>)
 8000610:	2201      	movs	r2, #1
 8000612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_I2C1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <MX_I2C1_Init+0x74>)
 8000634:	f001 fabd 	bl	8001bb2 <HAL_I2C_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800063e:	f000 fac3 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000642:	2100      	movs	r1, #0
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <MX_I2C1_Init+0x74>)
 8000646:	f003 f84f 	bl	80036e8 <HAL_I2CEx_ConfigAnalogFilter>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000650:	f000 faba 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000654:	2100      	movs	r1, #0
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_I2C1_Init+0x74>)
 8000658:	f003 f891 	bl	800377e <HAL_I2CEx_ConfigDigitalFilter>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000662:	f000 fab1 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000002c 	.word	0x2000002c
 8000670:	40005400 	.word	0x40005400
 8000674:	30a0a7fb 	.word	0x30a0a7fb

08000678 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 800067e:	4a22      	ldr	r2, [pc, #136]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 8000680:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ba:	4812      	ldr	r0, [pc, #72]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	f004 fe04 	bl	80052c8 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 fa7f 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ca:	2100      	movs	r1, #0
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006ce:	f005 fb9f 	bl	8005e10 <HAL_UARTEx_SetTxFifoThreshold>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006d8:	f000 fa76 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006dc:	2100      	movs	r1, #0
 80006de:	4809      	ldr	r0, [pc, #36]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006e0:	f005 fbd4 	bl	8005e8c <HAL_UARTEx_SetRxFifoThreshold>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006ea:	f000 fa6d 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	f005 fb55 	bl	8005d9e <HAL_UARTEx_DisableFifoMode>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006fa:	f000 fa65 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000140 	.word	0x20000140
 8000708:	40008000 	.word	0x40008000

0800070c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_SPI3_Init+0x74>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_SPI3_Init+0x78>)
 8000714:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_SPI3_Init+0x74>)
 8000718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800071c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_SPI3_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI3_Init+0x74>)
 8000726:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800072a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI3_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_SPI3_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI3_Init+0x74>)
 800073a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI3_Init+0x74>)
 8000742:	2238      	movs	r2, #56	; 0x38
 8000744:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI3_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI3_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_SPI3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI3_Init+0x74>)
 800075a:	2207      	movs	r2, #7
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_SPI3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI3_Init+0x74>)
 8000766:	2208      	movs	r2, #8
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_SPI3_Init+0x74>)
 800076c:	f004 f884 	bl	8004878 <HAL_SPI_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000776:	f000 fa27 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200001d4 	.word	0x200001d4
 8000784:	40003c00 	.word	0x40003c00

08000788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_DMA_Init+0x60>)
 8000790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <MX_DMA_Init+0x60>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6493      	str	r3, [r2, #72]	; 0x48
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_DMA_Init+0x60>)
 800079c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_DMA_Init+0x60>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <MX_DMA_Init+0x60>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6493      	str	r3, [r2, #72]	; 0x48
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_DMA_Init+0x60>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	200b      	movs	r0, #11
 80007c4:	f000 fdbd 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007c8:	200b      	movs	r0, #11
 80007ca:	f000 fdd4 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	200c      	movs	r0, #12
 80007d4:	f000 fdb5 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007d8:	200c      	movs	r0, #12
 80007da:	f000 fdcc 	bl	8001376 <HAL_NVIC_EnableIRQ>

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <MX_GPIO_Init+0x114>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a3e      	ldr	r2, [pc, #248]	; (8000900 <MX_GPIO_Init+0x114>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <MX_GPIO_Init+0x114>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800081a:	4b39      	ldr	r3, [pc, #228]	; (8000900 <MX_GPIO_Init+0x114>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a38      	ldr	r2, [pc, #224]	; (8000900 <MX_GPIO_Init+0x114>)
 8000820:	f043 0320 	orr.w	r3, r3, #32
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b36      	ldr	r3, [pc, #216]	; (8000900 <MX_GPIO_Init+0x114>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0320 	and.w	r3, r3, #32
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b33      	ldr	r3, [pc, #204]	; (8000900 <MX_GPIO_Init+0x114>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a32      	ldr	r2, [pc, #200]	; (8000900 <MX_GPIO_Init+0x114>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <MX_GPIO_Init+0x114>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_GPIO_Init+0x114>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a2c      	ldr	r2, [pc, #176]	; (8000900 <MX_GPIO_Init+0x114>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_GPIO_Init+0x114>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <MX_GPIO_Init+0x114>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a26      	ldr	r2, [pc, #152]	; (8000900 <MX_GPIO_Init+0x114>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <MX_GPIO_Init+0x114>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f001 f95b 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2104      	movs	r1, #4
 800088a:	481e      	ldr	r0, [pc, #120]	; (8000904 <MX_GPIO_Init+0x118>)
 800088c:	f001 f956 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4818      	ldr	r0, [pc, #96]	; (8000908 <MX_GPIO_Init+0x11c>)
 80008a8:	f000 ffae 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ac:	2320      	movs	r3, #32
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f000 ff9f 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ca:	2304      	movs	r3, #4
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4808      	ldr	r0, [pc, #32]	; (8000904 <MX_GPIO_Init+0x118>)
 80008e2:	f000 ff91 	bl	8001808 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2028      	movs	r0, #40	; 0x28
 80008ec:	f000 fd29 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f0:	2028      	movs	r0, #40	; 0x28
 80008f2:	f000 fd40 	bl	8001376 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000
 8000904:	48000c00 	.word	0x48000c00
 8000908:	48000800 	.word	0x48000800

0800090c <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */
void EEPROMWriteExample() {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <EEPROMWriteExample+0x3c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d012      	beq.n	8000940 <EEPROMWriteExample+0x34>
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <EEPROMWriteExample+0x40>)
 800091c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b20      	cmp	r3, #32
 8000924:	d10c      	bne.n	8000940 <EEPROMWriteExample+0x34>
		static uint8_t data[4] = { 0x50, 0x4F, 0x4E, 0x31 };
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 4);
 8000926:	2304      	movs	r3, #4
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <EEPROMWriteExample+0x44>)
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	2302      	movs	r3, #2
 8000930:	222c      	movs	r2, #44	; 0x2c
 8000932:	21a0      	movs	r1, #160	; 0xa0
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <EEPROMWriteExample+0x40>)
 8000936:	f001 f9d7 	bl	8001ce8 <HAL_I2C_Mem_Write_IT>
		eepromExampleWriteFlag = 0;
 800093a:	4b03      	ldr	r3, [pc, #12]	; (8000948 <EEPROMWriteExample+0x3c>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
	}
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000238 	.word	0x20000238
 800094c:	2000002c 	.word	0x2000002c
 8000950:	20000000 	.word	0x20000000

08000954 <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af02      	add	r7, sp, #8
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <EEPROMReadExample+0x44>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d012      	beq.n	800098e <EEPROMReadExample+0x3a>
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <EEPROMReadExample+0x48>)
 800096a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b20      	cmp	r3, #32
 8000972:	d10c      	bne.n	800098e <EEPROMReadExample+0x3a>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000974:	887b      	ldrh	r3, [r7, #2]
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2302      	movs	r3, #2
 800097e:	222c      	movs	r2, #44	; 0x2c
 8000980:	21a0      	movs	r1, #160	; 0xa0
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <EEPROMReadExample+0x48>)
 8000984:	f001 fa3a 	bl	8001dfc <HAL_I2C_Mem_Read_IT>
		eepromExampleReadFlag = 0;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <EEPROMReadExample+0x44>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
	}
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000239 	.word	0x20000239
 800099c:	2000002c 	.word	0x2000002c

080009a0 <SPITxRx_Setup>:

void SPITxRx_Setup() {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
//CS pulse
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80009a4:	2200      	movs	r2, #0
 80009a6:	2104      	movs	r1, #4
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <SPITxRx_Setup+0x28>)
 80009aa:	f001 f8c7 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f000 fbca 	bl	8001148 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 80009b4:	2201      	movs	r2, #1
 80009b6:	2104      	movs	r1, #4
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <SPITxRx_Setup+0x28>)
 80009ba:	f001 f8bf 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fbc2 	bl	8001148 <HAL_Delay>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	48000c00 	.word	0x48000c00

080009cc <SPITxRx_readIO>:
void SPITxRx_readIO() {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) {
 80009d0:	2104      	movs	r1, #4
 80009d2:	480e      	ldr	r0, [pc, #56]	; (8000a0c <SPITxRx_readIO+0x40>)
 80009d4:	f001 f89a 	bl	8001b0c <HAL_GPIO_ReadPin>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d013      	beq.n	8000a06 <SPITxRx_readIO+0x3a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80009de:	2200      	movs	r2, #0
 80009e0:	2104      	movs	r1, #4
 80009e2:	480a      	ldr	r0, [pc, #40]	; (8000a0c <SPITxRx_readIO+0x40>)
 80009e4:	f001 f8aa 	bl	8001b3c <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001; //what to do receive or transmit (1 == receive)
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <SPITxRx_readIO+0x44>)
 80009ea:	2241      	movs	r2, #65	; 0x41
 80009ec:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12; //address
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <SPITxRx_readIO+0x44>)
 80009f0:	2212      	movs	r2, #18
 80009f2:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <SPITxRx_readIO+0x44>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 80009fa:	2304      	movs	r3, #4
 80009fc:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <SPITxRx_readIO+0x48>)
 80009fe:	4904      	ldr	r1, [pc, #16]	; (8000a10 <SPITxRx_readIO+0x44>)
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <SPITxRx_readIO+0x4c>)
 8000a02:	f003 ffe5 	bl	80049d0 <HAL_SPI_TransmitReceive_IT>
	}
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	48000c00 	.word	0x48000c00
 8000a10:	2000024c 	.word	0x2000024c
 8000a14:	20000240 	.word	0x20000240
 8000a18:	200001d4 	.word	0x200001d4

08000a1c <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000a24:	2201      	movs	r2, #1
 8000a26:	2104      	movs	r1, #4
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000a2a:	f001 f887 	bl	8001b3c <HAL_GPIO_WritePin>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	48000c00 	.word	0x48000c00

08000a3c <Switch>:

}


void Switch()
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	if (SPIRx[2]== 1 ) // ปุ่ม 1 ถูกกด (0000 0001)
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <Switch+0x4c>)
 8000a42:	789b      	ldrb	r3, [r3, #2]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d107      	bne.n	8000a58 <Switch+0x1c>
		{
			ScorePlayer1 += random_number; // random the number
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <Switch+0x50>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <Switch+0x54>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Switch+0x50>)
 8000a54:	6013      	str	r3, [r2, #0]
	}
	else if (SPIRx[2] == 1000) // ปุ่ม 4 ถูกกด (0000 1000)
			{
			P2Finish = 1;
	}
}
 8000a56:	e012      	b.n	8000a7e <Switch+0x42>
	else if (SPIRx[2] == 10) // ปุ่ม 2 ถูกกด (0000 0010)
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <Switch+0x4c>)
 8000a5a:	789b      	ldrb	r3, [r3, #2]
 8000a5c:	2b0a      	cmp	r3, #10
 8000a5e:	d103      	bne.n	8000a68 <Switch+0x2c>
			P1Finish = 1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <Switch+0x58>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	e00a      	b.n	8000a7e <Switch+0x42>
	else if (SPIRx[2] == 100) // ปุ่ม 3 ถูกกด (0000 0100)
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <Switch+0x4c>)
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	2b64      	cmp	r3, #100	; 0x64
 8000a6e:	d106      	bne.n	8000a7e <Switch+0x42>
		ScorePlayer2 += random_number; // random the number
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <Switch+0x5c>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <Switch+0x54>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <Switch+0x5c>)
 8000a7c:	6013      	str	r3, [r2, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	20000240 	.word	0x20000240
 8000a8c:	20000264 	.word	0x20000264
 8000a90:	20000274 	.word	0x20000274
 8000a94:	2000026c 	.word	0x2000026c
 8000a98:	20000268 	.word	0x20000268

08000a9c <StateGame>:

void StateGame(){
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	if (P1Finish == 1 && P2Finish == 1){
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <StateGame+0x94>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d13d      	bne.n	8000b24 <StateGame+0x88>
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <StateGame+0x98>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d139      	bne.n	8000b24 <StateGame+0x88>
		TotalScorePlayer1 = ScorePlayer1 ;
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <StateGame+0x9c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <StateGame+0xa0>)
 8000ab6:	6013      	str	r3, [r2, #0]
		TotalScorePlayer2 = ScorePlayer2 ;
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <StateGame+0xa4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <StateGame+0xa8>)
 8000abe:	6013      	str	r3, [r2, #0]
		if (TotalScorePlayer1 == TotalScorePlayer2) {
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <StateGame+0xa0>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <StateGame+0xa8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d103      	bne.n	8000ad4 <StateGame+0x38>
	       State = 3; //Tie
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <StateGame+0xac>)
 8000ace:	2203      	movs	r2, #3
 8000ad0:	601a      	str	r2, [r3, #0]
		}
		else if (TotalScorePlayer2 > TotalScorePlayer1 && TotalScorePlayer2 <= 21) {
	       State = 2; //Player2Win
		}
	}
}
 8000ad2:	e027      	b.n	8000b24 <StateGame+0x88>
		else if (TotalScorePlayer1 > 21 && TotalScorePlayer2 > 21) {
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <StateGame+0xa0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b15      	cmp	r3, #21
 8000ada:	dd07      	ble.n	8000aec <StateGame+0x50>
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <StateGame+0xa8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b15      	cmp	r3, #21
 8000ae2:	dd03      	ble.n	8000aec <StateGame+0x50>
	       State = 3; //Tie
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <StateGame+0xac>)
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	e01b      	b.n	8000b24 <StateGame+0x88>
		else if (TotalScorePlayer1 > TotalScorePlayer2 && TotalScorePlayer1 <= 21) {
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <StateGame+0xa0>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <StateGame+0xa8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dd07      	ble.n	8000b08 <StateGame+0x6c>
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <StateGame+0xa0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b15      	cmp	r3, #21
 8000afe:	dc03      	bgt.n	8000b08 <StateGame+0x6c>
	       State = 1; //Player1Win
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <StateGame+0xac>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	e00d      	b.n	8000b24 <StateGame+0x88>
		else if (TotalScorePlayer2 > TotalScorePlayer1 && TotalScorePlayer2 <= 21) {
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <StateGame+0xa8>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <StateGame+0xa0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dd07      	ble.n	8000b24 <StateGame+0x88>
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <StateGame+0xa8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b15      	cmp	r3, #21
 8000b1a:	dc03      	bgt.n	8000b24 <StateGame+0x88>
	       State = 2; //Player2Win
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <StateGame+0xac>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	601a      	str	r2, [r3, #0]
}
 8000b22:	e7ff      	b.n	8000b24 <StateGame+0x88>
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	2000026c 	.word	0x2000026c
 8000b34:	20000270 	.word	0x20000270
 8000b38:	20000264 	.word	0x20000264
 8000b3c:	2000025c 	.word	0x2000025c
 8000b40:	20000268 	.word	0x20000268
 8000b44:	20000260 	.word	0x20000260
 8000b48:	20000258 	.word	0x20000258

08000b4c <LED>:


void LED() {
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
		switch (State) {
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <LED+0x74>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d006      	beq.n	8000b66 <LED+0x1a>
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	dc22      	bgt.n	8000ba2 <LED+0x56>
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d00c      	beq.n	8000b7a <LED+0x2e>
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d014      	beq.n	8000b8e <LED+0x42>
 8000b64:	e01d      	b.n	8000ba2 <LED+0x56>
		case 3:
			SPITx[0] = 0b01000000; // write
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <LED+0x78>)
 8000b68:	2240      	movs	r2, #64	; 0x40
 8000b6a:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15; // OLATB
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <LED+0x78>)
 8000b6e:	2215      	movs	r2, #21
 8000b70:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0b10000000; // LED ON
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <LED+0x78>)
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	709a      	strb	r2, [r3, #2]
			break;
 8000b78:	e01d      	b.n	8000bb6 <LED+0x6a>
		case 1:
			SPITx[0] = 0b01000000; // write
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <LED+0x78>)
 8000b7c:	2240      	movs	r2, #64	; 0x40
 8000b7e:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15; // OLATB
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <LED+0x78>)
 8000b82:	2215      	movs	r2, #21
 8000b84:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0b01000000; // LED ON
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <LED+0x78>)
 8000b88:	2240      	movs	r2, #64	; 0x40
 8000b8a:	709a      	strb	r2, [r3, #2]
			break;
 8000b8c:	e013      	b.n	8000bb6 <LED+0x6a>
		case 2:
			SPITx[0] = 0b01000000; // write
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <LED+0x78>)
 8000b90:	2240      	movs	r2, #64	; 0x40
 8000b92:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15; // OLATB
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <LED+0x78>)
 8000b96:	2215      	movs	r2, #21
 8000b98:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0b00100000; // LED ON
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <LED+0x78>)
 8000b9c:	2220      	movs	r2, #32
 8000b9e:	709a      	strb	r2, [r3, #2]
			break;
 8000ba0:	e009      	b.n	8000bb6 <LED+0x6a>
		default: // Playing
			SPITx[0] = 0b01000000; // write
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <LED+0x78>)
 8000ba4:	2240      	movs	r2, #64	; 0x40
 8000ba6:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15; // OLATB
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <LED+0x78>)
 8000baa:	2215      	movs	r2, #21
 8000bac:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0b00010000; // LED ON
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <LED+0x78>)
 8000bb0:	2210      	movs	r2, #16
 8000bb2:	709a      	strb	r2, [r3, #2]
			break;
 8000bb4:	bf00      	nop
		}
	}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	20000258 	.word	0x20000258
 8000bc4:	2000024c 	.word	0x2000024c

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x44>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_MspInit+0x44>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6613      	str	r3, [r2, #96]	; 0x60
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c0a:	f002 fea9 	bl	8003960 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0a0      	sub	sp, #128	; 0x80
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	2254      	movs	r2, #84	; 0x54
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f005 f9b1 	bl	8005fa4 <memset>
  if(hi2c->Instance==I2C1)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a5f      	ldr	r2, [pc, #380]	; (8000dc4 <HAL_I2C_MspInit+0x1a8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	f040 80b6 	bne.w	8000dba <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c4e:	2340      	movs	r3, #64	; 0x40
 8000c50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 fbbe 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c66:	f7ff ffaf 	bl	8000bc8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b57      	ldr	r3, [pc, #348]	; (8000dc8 <HAL_I2C_MspInit+0x1ac>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a56      	ldr	r2, [pc, #344]	; (8000dc8 <HAL_I2C_MspInit+0x1ac>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <HAL_I2C_MspInit+0x1ac>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b51      	ldr	r3, [pc, #324]	; (8000dc8 <HAL_I2C_MspInit+0x1ac>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a50      	ldr	r2, [pc, #320]	; (8000dc8 <HAL_I2C_MspInit+0x1ac>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b4e      	ldr	r3, [pc, #312]	; (8000dc8 <HAL_I2C_MspInit+0x1ac>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca0:	2312      	movs	r3, #18
 8000ca2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cac:	2304      	movs	r3, #4
 8000cae:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f000 fda5 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc2:	2312      	movs	r3, #18
 8000cc4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	483c      	ldr	r0, [pc, #240]	; (8000dcc <HAL_I2C_MspInit+0x1b0>)
 8000cda:	f000 fd95 	bl	8001808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cde:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <HAL_I2C_MspInit+0x1ac>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	4a39      	ldr	r2, [pc, #228]	; (8000dc8 <HAL_I2C_MspInit+0x1ac>)
 8000ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <HAL_I2C_MspInit+0x1ac>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000cf6:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <HAL_I2C_MspInit+0x1b4>)
 8000cf8:	4a36      	ldr	r2, [pc, #216]	; (8000dd4 <HAL_I2C_MspInit+0x1b8>)
 8000cfa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000cfc:	4b34      	ldr	r3, [pc, #208]	; (8000dd0 <HAL_I2C_MspInit+0x1b4>)
 8000cfe:	2210      	movs	r2, #16
 8000d00:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d02:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <HAL_I2C_MspInit+0x1b4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d08:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <HAL_I2C_MspInit+0x1b4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <HAL_I2C_MspInit+0x1b4>)
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d14:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <HAL_I2C_MspInit+0x1b4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d1a:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <HAL_I2C_MspInit+0x1b4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000d20:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <HAL_I2C_MspInit+0x1b4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d26:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <HAL_I2C_MspInit+0x1b4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000d2c:	4828      	ldr	r0, [pc, #160]	; (8000dd0 <HAL_I2C_MspInit+0x1b4>)
 8000d2e:	f000 fb3d 	bl	80013ac <HAL_DMA_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8000d38:	f7ff ff46 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <HAL_I2C_MspInit+0x1b4>)
 8000d40:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d42:	4a23      	ldr	r2, [pc, #140]	; (8000dd0 <HAL_I2C_MspInit+0x1b4>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <HAL_I2C_MspInit+0x1bc>)
 8000d4a:	4a24      	ldr	r2, [pc, #144]	; (8000ddc <HAL_I2C_MspInit+0x1c0>)
 8000d4c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <HAL_I2C_MspInit+0x1bc>)
 8000d50:	2211      	movs	r2, #17
 8000d52:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <HAL_I2C_MspInit+0x1bc>)
 8000d56:	2210      	movs	r2, #16
 8000d58:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <HAL_I2C_MspInit+0x1bc>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <HAL_I2C_MspInit+0x1bc>)
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_I2C_MspInit+0x1bc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_I2C_MspInit+0x1bc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_I2C_MspInit+0x1bc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_I2C_MspInit+0x1bc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d7e:	4816      	ldr	r0, [pc, #88]	; (8000dd8 <HAL_I2C_MspInit+0x1bc>)
 8000d80:	f000 fb14 	bl	80013ac <HAL_DMA_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8000d8a:	f7ff ff1d 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <HAL_I2C_MspInit+0x1bc>)
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
 8000d94:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <HAL_I2C_MspInit+0x1bc>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	201f      	movs	r0, #31
 8000da0:	f000 facf 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000da4:	201f      	movs	r0, #31
 8000da6:	f000 fae6 	bl	8001376 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2020      	movs	r0, #32
 8000db0:	f000 fac7 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000db4:	2020      	movs	r0, #32
 8000db6:	f000 fade 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3780      	adds	r7, #128	; 0x80
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	20000080 	.word	0x20000080
 8000dd4:	40020008 	.word	0x40020008
 8000dd8:	200000e0 	.word	0x200000e0
 8000ddc:	4002001c 	.word	0x4002001c

08000de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b09e      	sub	sp, #120	; 0x78
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	2254      	movs	r2, #84	; 0x54
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f005 f8cf 	bl	8005fa4 <memset>
  if(huart->Instance==LPUART1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_UART_MspInit+0xa8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d136      	bne.n	8000e7e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e10:	2320      	movs	r3, #32
 8000e12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 fadd 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e28:	f7ff fece 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_UART_MspInit+0xac>)
 8000e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e30:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <HAL_UART_MspInit+0xac>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_UART_MspInit+0xac>)
 8000e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_UART_MspInit+0xac>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e48:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_UART_MspInit+0xac>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_UART_MspInit+0xac>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e74:	4619      	mov	r1, r3
 8000e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7a:	f000 fcc5 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3778      	adds	r7, #120	; 0x78
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40008000 	.word	0x40008000
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <HAL_SPI_MspInit+0x8c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d130      	bne.n	8000f14 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <HAL_SPI_MspInit+0x90>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <HAL_SPI_MspInit+0x90>)
 8000eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_SPI_MspInit+0x90>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_SPI_MspInit+0x90>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <HAL_SPI_MspInit+0x90>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_SPI_MspInit+0x90>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ee2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ef4:	2306      	movs	r3, #6
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4809      	ldr	r0, [pc, #36]	; (8000f24 <HAL_SPI_MspInit+0x94>)
 8000f00:	f000 fc82 	bl	8001808 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2033      	movs	r0, #51	; 0x33
 8000f0a:	f000 fa1a 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000f0e:	2033      	movs	r0, #51	; 0x33
 8000f10:	f000 fa31 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	; 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40003c00 	.word	0x40003c00
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000800 	.word	0x48000800

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f8ca 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <DMA1_Channel1_IRQHandler+0x10>)
 8000f82:	f000 fb22 	bl	80015ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000080 	.word	0x20000080

08000f90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <DMA1_Channel2_IRQHandler+0x10>)
 8000f96:	f000 fb18 	bl	80015ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000e0 	.word	0x200000e0

08000fa4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <I2C1_EV_IRQHandler+0x10>)
 8000faa:	f000 ffad 	bl	8001f08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000002c 	.word	0x2000002c

08000fb8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <I2C1_ER_IRQHandler+0x10>)
 8000fbe:	f000 ffbd 	bl	8001f3c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000002c 	.word	0x2000002c

08000fcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fd4:	f000 fdca 	bl	8001b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <SPI3_IRQHandler+0x10>)
 8000fe2:	f003 fda3 	bl	8004b2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001d4 	.word	0x200001d4

08000ff0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <LoopForever+0x2>)
 8001016:	4685      	mov	sp, r0
 8001018:	f7ff ffea 	bl	8000ff0 <SystemInit>
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <LoopForever+0x6>)
 800101e:	490d      	ldr	r1, [pc, #52]	; (8001054 <LoopForever+0xa>)
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <LoopForever+0xe>)
 8001022:	2300      	movs	r3, #0
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:
 8001026:	58d4      	ldr	r4, [r2, r3]
 8001028:	50c4      	str	r4, [r0, r3]
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:
 800102c:	18c4      	adds	r4, r0, r3
 800102e:	428c      	cmp	r4, r1
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <LoopForever+0x12>)
 8001034:	4c0a      	ldr	r4, [pc, #40]	; (8001060 <LoopForever+0x16>)
 8001036:	2300      	movs	r3, #0
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:
 800103e:	42a2      	cmp	r2, r4
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>
 8001042:	f004 ffb7 	bl	8005fb4 <__libc_init_array>
 8001046:	f7ff fa65 	bl	8000514 <main>

0800104a <LoopForever>:
 800104a:	e7fe      	b.n	800104a <LoopForever>
 800104c:	20020000 	.word	0x20020000
 8001050:	20000000 	.word	0x20000000
 8001054:	20000010 	.word	0x20000010
 8001058:	08006064 	.word	0x08006064
 800105c:	20000010 	.word	0x20000010
 8001060:	2000027c 	.word	0x2000027c

08001064 <ADC1_2_IRQHandler>:
 8001064:	e7fe      	b.n	8001064 <ADC1_2_IRQHandler>

08001066 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f95b 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001076:	2000      	movs	r0, #0
 8001078:	f000 f80e 	bl	8001098 <HAL_InitTick>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	e001      	b.n	800108c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001088:	f7ff fda4 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800108c:	79fb      	ldrb	r3, [r7, #7]

}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_InitTick+0x68>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d022      	beq.n	80010f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_InitTick+0x6c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_InitTick+0x68>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f966 	bl	8001392 <HAL_SYSTICK_Config>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10f      	bne.n	80010ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	d809      	bhi.n	80010e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d2:	2200      	movs	r2, #0
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	f04f 30ff 	mov.w	r0, #4294967295
 80010da:	f000 f932 	bl	8001342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_InitTick+0x70>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e007      	b.n	80010f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e004      	b.n	80010f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e001      	b.n	80010f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000000c 	.word	0x2000000c
 8001104:	20000004 	.word	0x20000004
 8001108:	20000008 	.word	0x20000008

0800110c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x1c>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_IncTick+0x20>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4413      	add	r3, r2
 800111a:	4a03      	ldr	r2, [pc, #12]	; (8001128 <HAL_IncTick+0x1c>)
 800111c:	6013      	str	r3, [r2, #0]
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	20000278 	.word	0x20000278
 800112c:	2000000c 	.word	0x2000000c

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000278 	.word	0x20000278

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d004      	beq.n	800116c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_Delay+0x40>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4413      	add	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116c:	bf00      	nop
 800116e:	f7ff ffdf 	bl	8001130 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	429a      	cmp	r2, r3
 800117c:	d8f7      	bhi.n	800116e <HAL_Delay+0x26>
  {
  }
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000000c 	.word	0x2000000c

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	; (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff29 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff40 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff33 	bl	80011f0 <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa4 	bl	80012e8 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e08d      	b.n	80014da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_DMA_Init+0x138>)
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d80f      	bhi.n	80013ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <HAL_DMA_Init+0x13c>)
 80013d2:	4413      	add	r3, r2
 80013d4:	4a45      	ldr	r2, [pc, #276]	; (80014ec <HAL_DMA_Init+0x140>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	009a      	lsls	r2, r3, #2
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a42      	ldr	r2, [pc, #264]	; (80014f0 <HAL_DMA_Init+0x144>)
 80013e6:	641a      	str	r2, [r3, #64]	; 0x40
 80013e8:	e00e      	b.n	8001408 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <HAL_DMA_Init+0x148>)
 80013f2:	4413      	add	r3, r2
 80013f4:	4a3d      	ldr	r2, [pc, #244]	; (80014ec <HAL_DMA_Init+0x140>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	009a      	lsls	r2, r3, #2
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a3c      	ldr	r2, [pc, #240]	; (80014f8 <HAL_DMA_Init+0x14c>)
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2202      	movs	r2, #2
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800141e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001422:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800142c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f972 	bl	8001744 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001468:	d102      	bne.n	8001470 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001484:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d010      	beq.n	80014b0 <HAL_DMA_Init+0x104>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b04      	cmp	r3, #4
 8001494:	d80c      	bhi.n	80014b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f992 	bl	80017c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	e008      	b.n	80014c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40020407 	.word	0x40020407
 80014e8:	bffdfff8 	.word	0xbffdfff8
 80014ec:	cccccccd 	.word	0xcccccccd
 80014f0:	40020000 	.word	0x40020000
 80014f4:	bffdfbf8 	.word	0xbffdfbf8
 80014f8:	40020400 	.word	0x40020400

080014fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d00d      	beq.n	8001530 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2204      	movs	r2, #4
 8001518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e047      	b.n	80015c0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 020e 	bic.w	r2, r2, #14
 800153e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800155e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	2101      	movs	r1, #1
 800156e:	fa01 f202 	lsl.w	r2, r1, r2
 8001572:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800157c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00c      	beq.n	80015a0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001594:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800159e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	4798      	blx	r3
    }
  }
  return status;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	2204      	movs	r2, #4
 80015ec:	409a      	lsls	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d026      	beq.n	8001644 <HAL_DMA_IRQHandler+0x7a>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d021      	beq.n	8001644 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b00      	cmp	r3, #0
 800160c:	d107      	bne.n	800161e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0204 	bic.w	r2, r2, #4
 800161c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f003 021f 	and.w	r2, r3, #31
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	2104      	movs	r1, #4
 800162c:	fa01 f202 	lsl.w	r2, r1, r2
 8001630:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	2b00      	cmp	r3, #0
 8001638:	d071      	beq.n	800171e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001642:	e06c      	b.n	800171e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	f003 031f 	and.w	r3, r3, #31
 800164c:	2202      	movs	r2, #2
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d02e      	beq.n	80016b6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d029      	beq.n	80016b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10b      	bne.n	8001688 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 020a 	bic.w	r2, r2, #10
 800167e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168c:	f003 021f 	and.w	r2, r3, #31
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	2102      	movs	r1, #2
 8001696:	fa01 f202 	lsl.w	r2, r1, r2
 800169a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d038      	beq.n	800171e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016b4:	e033      	b.n	800171e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	2208      	movs	r2, #8
 80016c0:	409a      	lsls	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d02a      	beq.n	8001720 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d025      	beq.n	8001720 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 020e 	bic.w	r2, r2, #14
 80016e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2101      	movs	r1, #1
 80016f2:	fa01 f202 	lsl.w	r2, r1, r2
 80016f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001712:	2b00      	cmp	r3, #0
 8001714:	d004      	beq.n	8001720 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800171e:	bf00      	nop
 8001720:	bf00      	nop
}
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001754:	429a      	cmp	r2, r3
 8001756:	d802      	bhi.n	800175e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e001      	b.n	8001762 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001760:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	3b08      	subs	r3, #8
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	009a      	lsls	r2, r3, #2
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4413      	add	r3, r2
 8001784:	461a      	mov	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800178e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	2201      	movs	r2, #1
 8001798:	409a      	lsls	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800179e:	bf00      	nop
 80017a0:	371c      	adds	r7, #28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40020407 	.word	0x40020407
 80017b0:	40020800 	.word	0x40020800
 80017b4:	40020820 	.word	0x40020820
 80017b8:	cccccccd 	.word	0xcccccccd
 80017bc:	40020880 	.word	0x40020880

080017c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	461a      	mov	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a08      	ldr	r2, [pc, #32]	; (8001804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017e2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	2201      	movs	r2, #1
 80017ee:	409a      	lsls	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	1000823f 	.word	0x1000823f
 8001804:	40020940 	.word	0x40020940

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001816:	e15a      	b.n	8001ace <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2101      	movs	r1, #1
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 814c 	beq.w	8001ac8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d005      	beq.n	8001848 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001844:	2b02      	cmp	r3, #2
 8001846:	d130      	bne.n	80018aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800187e:	2201      	movs	r2, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	f003 0201 	and.w	r2, r3, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d017      	beq.n	80018e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d123      	bne.n	800193a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	08da      	lsrs	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3208      	adds	r2, #8
 80018fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	08da      	lsrs	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3208      	adds	r2, #8
 8001934:	6939      	ldr	r1, [r7, #16]
 8001936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0203 	and.w	r2, r3, #3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80a6 	beq.w	8001ac8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197c:	4b5b      	ldr	r3, [pc, #364]	; (8001aec <HAL_GPIO_Init+0x2e4>)
 800197e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001980:	4a5a      	ldr	r2, [pc, #360]	; (8001aec <HAL_GPIO_Init+0x2e4>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6613      	str	r3, [r2, #96]	; 0x60
 8001988:	4b58      	ldr	r3, [pc, #352]	; (8001aec <HAL_GPIO_Init+0x2e4>)
 800198a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001994:	4a56      	ldr	r2, [pc, #344]	; (8001af0 <HAL_GPIO_Init+0x2e8>)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019be:	d01f      	beq.n	8001a00 <HAL_GPIO_Init+0x1f8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a4c      	ldr	r2, [pc, #304]	; (8001af4 <HAL_GPIO_Init+0x2ec>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d019      	beq.n	80019fc <HAL_GPIO_Init+0x1f4>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a4b      	ldr	r2, [pc, #300]	; (8001af8 <HAL_GPIO_Init+0x2f0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d013      	beq.n	80019f8 <HAL_GPIO_Init+0x1f0>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a4a      	ldr	r2, [pc, #296]	; (8001afc <HAL_GPIO_Init+0x2f4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d00d      	beq.n	80019f4 <HAL_GPIO_Init+0x1ec>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a49      	ldr	r2, [pc, #292]	; (8001b00 <HAL_GPIO_Init+0x2f8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d007      	beq.n	80019f0 <HAL_GPIO_Init+0x1e8>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a48      	ldr	r2, [pc, #288]	; (8001b04 <HAL_GPIO_Init+0x2fc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_GPIO_Init+0x1e4>
 80019e8:	2305      	movs	r3, #5
 80019ea:	e00a      	b.n	8001a02 <HAL_GPIO_Init+0x1fa>
 80019ec:	2306      	movs	r3, #6
 80019ee:	e008      	b.n	8001a02 <HAL_GPIO_Init+0x1fa>
 80019f0:	2304      	movs	r3, #4
 80019f2:	e006      	b.n	8001a02 <HAL_GPIO_Init+0x1fa>
 80019f4:	2303      	movs	r3, #3
 80019f6:	e004      	b.n	8001a02 <HAL_GPIO_Init+0x1fa>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e002      	b.n	8001a02 <HAL_GPIO_Init+0x1fa>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_GPIO_Init+0x1fa>
 8001a00:	2300      	movs	r3, #0
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	f002 0203 	and.w	r2, r2, #3
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	4093      	lsls	r3, r2
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a12:	4937      	ldr	r1, [pc, #220]	; (8001af0 <HAL_GPIO_Init+0x2e8>)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a20:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a44:	4a30      	ldr	r2, [pc, #192]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a6e:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a98:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ac2:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f47f ae9d 	bne.w	8001818 <HAL_GPIO_Init+0x10>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010000 	.word	0x40010000
 8001af4:	48000400 	.word	0x48000400
 8001af8:	48000800 	.word	0x48000800
 8001afc:	48000c00 	.word	0x48000c00
 8001b00:	48001000 	.word	0x48001000
 8001b04:	48001400 	.word	0x48001400
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e001      	b.n	8001b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f806 	bl	8001b9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e08d      	b.n	8001ce0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d106      	bne.n	8001bde <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff f81f 	bl	8000c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2224      	movs	r2, #36	; 0x24
 8001be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d107      	bne.n	8001c2c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	e006      	b.n	8001c3a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c38:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d108      	bne.n	8001c54 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	e007      	b.n	8001c64 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c62:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c76:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c86:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69d9      	ldr	r1, [r3, #28]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1a      	ldr	r2, [r3, #32]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	817b      	strh	r3, [r7, #10]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	813b      	strh	r3, [r7, #8]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	d16a      	bne.n	8001de4 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <HAL_I2C_Mem_Write_IT+0x32>
 8001d14:	8bbb      	ldrh	r3, [r7, #28]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d20:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e05f      	b.n	8001de6 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d34:	d101      	bne.n	8001d3a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8001d36:	2302      	movs	r3, #2
 8001d38:	e055      	b.n	8001de6 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_I2C_Mem_Write_IT+0x60>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e04e      	b.n	8001de6 <HAL_I2C_Mem_Write_IT+0xfe>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2221      	movs	r2, #33	; 0x21
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2240      	movs	r2, #64	; 0x40
 8001d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8bba      	ldrh	r2, [r7, #28]
 8001d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <HAL_I2C_Mem_Write_IT+0x108>)
 8001d7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <HAL_I2C_Mem_Write_IT+0x10c>)
 8001d82:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8001d84:	897a      	ldrh	r2, [r7, #10]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d109      	bne.n	8001da4 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d90:	893b      	ldrh	r3, [r7, #8]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	651a      	str	r2, [r3, #80]	; 0x50
 8001da2:	e00b      	b.n	8001dbc <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001da4:	893b      	ldrh	r3, [r7, #8]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001db2:	893b      	ldrh	r3, [r7, #8]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	8979      	ldrh	r1, [r7, #10]
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_I2C_Mem_Write_IT+0x110>)
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f001 fb78 	bl	80034c0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001dd8:	2101      	movs	r1, #1
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f001 fba2 	bl	8003524 <I2C_Enable_IRQ>

    return HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	e000      	b.n	8001de6 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001de4:	2302      	movs	r3, #2
  }
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	ffff0000 	.word	0xffff0000
 8001df4:	080020c5 	.word	0x080020c5
 8001df8:	80002000 	.word	0x80002000

08001dfc <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	4608      	mov	r0, r1
 8001e06:	4611      	mov	r1, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	817b      	strh	r3, [r7, #10]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	813b      	strh	r3, [r7, #8]
 8001e12:	4613      	mov	r3, r2
 8001e14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d166      	bne.n	8001ef0 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_I2C_Mem_Read_IT+0x32>
 8001e28:	8bbb      	ldrh	r3, [r7, #28]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d105      	bne.n	8001e3a <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e05b      	b.n	8001ef2 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e48:	d101      	bne.n	8001e4e <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e051      	b.n	8001ef2 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_I2C_Mem_Read_IT+0x60>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e04a      	b.n	8001ef2 <HAL_I2C_Mem_Read_IT+0xf6>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2222      	movs	r2, #34	; 0x22
 8001e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2240      	movs	r2, #64	; 0x40
 8001e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8bba      	ldrh	r2, [r7, #28]
 8001e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_I2C_Mem_Read_IT+0x100>)
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_I2C_Mem_Read_IT+0x104>)
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8001e92:	897a      	ldrh	r2, [r7, #10]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d109      	bne.n	8001eb2 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e9e:	893b      	ldrh	r3, [r7, #8]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8001eae:	651a      	str	r2, [r3, #80]	; 0x50
 8001eb0:	e00b      	b.n	8001eca <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eb2:	893b      	ldrh	r3, [r7, #8]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001ec0:	893b      	ldrh	r3, [r7, #8]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	8979      	ldrh	r1, [r7, #10]
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_I2C_Mem_Read_IT+0x108>)
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f001 faf2 	bl	80034c0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f001 fb1c 	bl	8003524 <I2C_Enable_IRQ>

    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e000      	b.n	8001ef2 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	ffff0000 	.word	0xffff0000
 8001f00:	080020c5 	.word	0x080020c5
 8001f04:	80002000 	.word	0x80002000

08001f08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	68f9      	ldr	r1, [r7, #12]
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
  }
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00f      	beq.n	8001f7e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f7c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00f      	beq.n	8001fa8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f043 0208 	orr.w	r2, r3, #8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00f      	beq.n	8001fd2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00a      	beq.n	8001fd2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	f043 0202 	orr.w	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 030b 	and.w	r3, r3, #11
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001fe2:	68f9      	ldr	r1, [r7, #12]
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f001 f911 	bl	800320c <I2C_ITError>
  }
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	70fb      	strb	r3, [r7, #3]
 800204e:	4613      	mov	r3, r2
 8002050:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80020d0:	4b8d      	ldr	r3, [pc, #564]	; (8002308 <I2C_Mem_ISR_IT+0x244>)
 80020d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <I2C_Mem_ISR_IT+0x22>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e10c      	b.n	8002300 <I2C_Mem_ISR_IT+0x23c>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d012      	beq.n	800211e <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00d      	beq.n	800211e <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2210      	movs	r2, #16
 8002108:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f043 0204 	orr.w	r2, r3, #4
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f001 f98f 	bl	800343a <I2C_Flush_TXDR>
 800211c:	e0dd      	b.n	80022da <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d022      	beq.n	800216e <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01d      	beq.n	800216e <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002162:	b29b      	uxth	r3, r3
 8002164:	3b01      	subs	r3, #1
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800216c:	e0b5      	b.n	80022da <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d02c      	beq.n	80021d2 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800217e:	2b00      	cmp	r3, #0
 8002180:	d027      	beq.n	80021d2 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d118      	bne.n	80021be <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80021bc:	e08d      	b.n	80022da <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f04f 32ff 	mov.w	r2, #4294967295
 80021ce:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80021d0:	e083      	b.n	80022da <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d03c      	beq.n	8002256 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d037      	beq.n	8002256 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d02c      	beq.n	800224a <I2C_Mem_ISR_IT+0x186>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d128      	bne.n	800224a <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2bff      	cmp	r3, #255	; 0xff
 8002200:	d910      	bls.n	8002224 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	22ff      	movs	r2, #255	; 0xff
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220c:	b299      	uxth	r1, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002212:	b2da      	uxtb	r2, r3
 8002214:	2300      	movs	r3, #0
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f001 f94f 	bl	80034c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002222:	e017      	b.n	8002254 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	b299      	uxth	r1, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002238:	b2da      	uxtb	r2, r3
 800223a:	2300      	movs	r3, #0
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f001 f93c 	bl	80034c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002248:	e004      	b.n	8002254 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800224a:	2140      	movs	r1, #64	; 0x40
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 ffdd 	bl	800320c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002252:	e042      	b.n	80022da <I2C_Mem_ISR_IT+0x216>
 8002254:	e041      	b.n	80022da <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225c:	2b00      	cmp	r3, #0
 800225e:	d03c      	beq.n	80022da <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002266:	2b00      	cmp	r3, #0
 8002268:	d037      	beq.n	80022da <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800226a:	2101      	movs	r1, #1
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f001 f9dd 	bl	800362c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002272:	2102      	movs	r1, #2
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f001 f955 	bl	8003524 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b22      	cmp	r3, #34	; 0x22
 8002284:	d101      	bne.n	800228a <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002286:	4b21      	ldr	r3, [pc, #132]	; (800230c <I2C_Mem_ISR_IT+0x248>)
 8002288:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228e:	b29b      	uxth	r3, r3
 8002290:	2bff      	cmp	r3, #255	; 0xff
 8002292:	d910      	bls.n	80022b6 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	22ff      	movs	r2, #255	; 0xff
 8002298:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	b299      	uxth	r1, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f001 f906 	bl	80034c0 <I2C_TransferConfig>
 80022b4:	e011      	b.n	80022da <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c4:	b299      	uxth	r1, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f001 f8f3 	bl	80034c0 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80022ee:	6939      	ldr	r1, [r7, #16]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fd0b 	bl	8002d0c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	80002000 	.word	0x80002000
 800230c:	80002400 	.word	0x80002400

08002310 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <I2C_Slave_ISR_IT+0x24>
 8002330:	2302      	movs	r3, #2
 8002332:	e0e2      	b.n	80024fa <I2C_Slave_ISR_IT+0x1ea>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002350:	6939      	ldr	r1, [r7, #16]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fda2 	bl	8002e9c <I2C_ITSlaveCplt>
 8002358:	e0ca      	b.n	80024f0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b00      	cmp	r3, #0
 8002362:	d04b      	beq.n	80023fc <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800236a:	2b00      	cmp	r3, #0
 800236c:	d046      	beq.n	80023fc <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d128      	bne.n	80023ca <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b28      	cmp	r3, #40	; 0x28
 8002382:	d108      	bne.n	8002396 <I2C_Slave_ISR_IT+0x86>
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800238a:	d104      	bne.n	8002396 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800238c:	6939      	ldr	r1, [r7, #16]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fee8 	bl	8003164 <I2C_ITListenCplt>
 8002394:	e031      	b.n	80023fa <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b29      	cmp	r3, #41	; 0x29
 80023a0:	d10e      	bne.n	80023c0 <I2C_Slave_ISR_IT+0xb0>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023a8:	d00a      	beq.n	80023c0 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2210      	movs	r2, #16
 80023b0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f001 f841 	bl	800343a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fc4b 	bl	8002c54 <I2C_ITSlaveSeqCplt>
 80023be:	e01c      	b.n	80023fa <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2210      	movs	r2, #16
 80023c6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80023c8:	e08f      	b.n	80024ea <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2210      	movs	r2, #16
 80023d0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f043 0204 	orr.w	r2, r3, #4
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <I2C_Slave_ISR_IT+0xdc>
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ea:	d17e      	bne.n	80024ea <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	4619      	mov	r1, r3
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 ff0a 	bl	800320c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80023f8:	e077      	b.n	80024ea <I2C_Slave_ISR_IT+0x1da>
 80023fa:	e076      	b.n	80024ea <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	d02f      	beq.n	8002466 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800240c:	2b00      	cmp	r3, #0
 800240e:	d02a      	beq.n	8002466 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d018      	beq.n	800244c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d14b      	bne.n	80024ee <I2C_Slave_ISR_IT+0x1de>
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800245c:	d047      	beq.n	80024ee <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fbf8 	bl	8002c54 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002464:	e043      	b.n	80024ee <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d009      	beq.n	8002484 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800247a:	6939      	ldr	r1, [r7, #16]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fb28 	bl	8002ad2 <I2C_ITAddrCplt>
 8002482:	e035      	b.n	80024f0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d030      	beq.n	80024f0 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02b      	beq.n	80024f0 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d018      	beq.n	80024d4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	; 0x28
 80024d2:	e00d      	b.n	80024f0 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024da:	d002      	beq.n	80024e2 <I2C_Slave_ISR_IT+0x1d2>
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fbb6 	bl	8002c54 <I2C_ITSlaveSeqCplt>
 80024e8:	e002      	b.n	80024f0 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80024ea:	bf00      	nop
 80024ec:	e000      	b.n	80024f0 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80024ee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b088      	sub	sp, #32
 8002506:	af02      	add	r7, sp, #8
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <I2C_Master_ISR_DMA+0x1a>
 8002518:	2302      	movs	r3, #2
 800251a:	e0d9      	b.n	80026d0 <I2C_Master_ISR_DMA+0x1ce>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d016      	beq.n	800255c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002534:	2b00      	cmp	r3, #0
 8002536:	d011      	beq.n	800255c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2210      	movs	r2, #16
 800253e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f043 0204 	orr.w	r2, r3, #4
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800254c:	2120      	movs	r1, #32
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 ffe8 	bl	8003524 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 ff70 	bl	800343a <I2C_Flush_TXDR>
 800255a:	e0b4      	b.n	80026c6 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	2b00      	cmp	r3, #0
 8002564:	d071      	beq.n	800264a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800256c:	2b00      	cmp	r3, #0
 800256e:	d06c      	beq.n	800264a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800257e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d04e      	beq.n	8002628 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	b29b      	uxth	r3, r3
 8002592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002596:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	2bff      	cmp	r3, #255	; 0xff
 80025a0:	d906      	bls.n	80025b0 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	22ff      	movs	r2, #255	; 0xff
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80025a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e010      	b.n	80025d2 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025c2:	d003      	beq.n	80025cc <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e002      	b.n	80025d2 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80025cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	8a79      	ldrh	r1, [r7, #18]
 80025da:	2300      	movs	r3, #0
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 ff6d 	bl	80034c0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b22      	cmp	r3, #34	; 0x22
 8002602:	d108      	bne.n	8002616 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002612:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002614:	e057      	b.n	80026c6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002624:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002626:	e04e      	b.n	80026c6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002636:	d003      	beq.n	8002640 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 face 	bl	8002bda <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800263e:	e042      	b.n	80026c6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002640:	2140      	movs	r1, #64	; 0x40
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fde2 	bl	800320c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002648:	e03d      	b.n	80026c6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d028      	beq.n	80026a6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800265a:	2b00      	cmp	r3, #0
 800265c:	d023      	beq.n	80026a6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d119      	bne.n	800269c <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002676:	d025      	beq.n	80026c4 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002680:	d108      	bne.n	8002694 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002690:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002692:	e017      	b.n	80026c4 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 faa0 	bl	8002bda <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800269a:	e013      	b.n	80026c4 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800269c:	2140      	movs	r1, #64	; 0x40
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fdb4 	bl	800320c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80026a4:	e00e      	b.n	80026c4 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fb25 	bl	8002d0c <I2C_ITMasterCplt>
 80026c2:	e000      	b.n	80026c6 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80026c4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80026e4:	4b8d      	ldr	r3, [pc, #564]	; (800291c <I2C_Mem_ISR_DMA+0x244>)
 80026e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <I2C_Mem_ISR_DMA+0x1e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e10e      	b.n	8002914 <I2C_Mem_ISR_DMA+0x23c>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	d016      	beq.n	8002736 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800270e:	2b00      	cmp	r3, #0
 8002710:	d011      	beq.n	8002736 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2210      	movs	r2, #16
 8002718:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f043 0204 	orr.w	r2, r3, #4
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002726:	2120      	movs	r1, #32
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fefb 	bl	8003524 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fe83 	bl	800343a <I2C_Flush_TXDR>
 8002734:	e0e9      	b.n	800290a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00e      	beq.n	800275e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002752:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f04f 32ff 	mov.w	r2, #4294967295
 800275a:	651a      	str	r2, [r3, #80]	; 0x50
 800275c:	e0d5      	b.n	800290a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05f      	beq.n	8002828 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800276e:	2b00      	cmp	r3, #0
 8002770:	d05a      	beq.n	8002828 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002772:	2101      	movs	r1, #1
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 ff59 	bl	800362c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800277a:	2110      	movs	r1, #16
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fed1 	bl	8003524 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d048      	beq.n	800281e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	2bff      	cmp	r3, #255	; 0xff
 8002794:	d910      	bls.n	80027b8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	22ff      	movs	r2, #255	; 0xff
 800279a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a0:	b299      	uxth	r1, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	2300      	movs	r3, #0
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fe85 	bl	80034c0 <I2C_TransferConfig>
 80027b6:	e011      	b.n	80027dc <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	b299      	uxth	r1, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	2300      	movs	r3, #0
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fe72 	bl	80034c0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b22      	cmp	r3, #34	; 0x22
 80027f8:	d108      	bne.n	800280c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002808:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800280a:	e07e      	b.n	800290a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800281a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800281c:	e075      	b.n	800290a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800281e:	2140      	movs	r1, #64	; 0x40
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fcf3 	bl	800320c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002826:	e070      	b.n	800290a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d05d      	beq.n	80028ee <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002838:	2b00      	cmp	r3, #0
 800283a:	d058      	beq.n	80028ee <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800283c:	2101      	movs	r1, #1
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fef4 	bl	800362c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002844:	2110      	movs	r1, #16
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fe6c 	bl	8003524 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b22      	cmp	r3, #34	; 0x22
 8002856:	d101      	bne.n	800285c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002858:	4b31      	ldr	r3, [pc, #196]	; (8002920 <I2C_Mem_ISR_DMA+0x248>)
 800285a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	2bff      	cmp	r3, #255	; 0xff
 8002864:	d910      	bls.n	8002888 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	22ff      	movs	r2, #255	; 0xff
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002870:	b299      	uxth	r1, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	b2da      	uxtb	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fe1d 	bl	80034c0 <I2C_TransferConfig>
 8002886:	e011      	b.n	80028ac <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	b299      	uxth	r1, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	b2da      	uxtb	r2, r3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fe0a 	bl	80034c0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b22      	cmp	r3, #34	; 0x22
 80028c8:	d108      	bne.n	80028dc <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028d8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028da:	e016      	b.n	800290a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ea:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028ec:	e00d      	b.n	800290a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fa01 	bl	8002d0c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	80002000 	.word	0x80002000
 8002920:	80002400 	.word	0x80002400

08002924 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <I2C_Slave_ISR_DMA+0x24>
 8002944:	2302      	movs	r3, #2
 8002946:	e0c0      	b.n	8002aca <I2C_Slave_ISR_DMA+0x1a6>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fa98 	bl	8002e9c <I2C_ITSlaveCplt>
 800296c:	e0a8      	b.n	8002ac0 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8095 	beq.w	8002aa4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 808f 	beq.w	8002aa4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d104      	bne.n	800299a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002996:	2b00      	cmp	r3, #0
 8002998:	d07d      	beq.n	8002a96 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00c      	beq.n	80029bc <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80029b8:	2301      	movs	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00c      	beq.n	80029de <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d007      	beq.n	80029de <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80029da:	2301      	movs	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d128      	bne.n	8002a36 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b28      	cmp	r3, #40	; 0x28
 80029ee:	d108      	bne.n	8002a02 <I2C_Slave_ISR_DMA+0xde>
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029f6:	d104      	bne.n	8002a02 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fbb2 	bl	8003164 <I2C_ITListenCplt>
 8002a00:	e048      	b.n	8002a94 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b29      	cmp	r3, #41	; 0x29
 8002a0c:	d10e      	bne.n	8002a2c <I2C_Slave_ISR_DMA+0x108>
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a14:	d00a      	beq.n	8002a2c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2210      	movs	r2, #16
 8002a1c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fd0b 	bl	800343a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f915 	bl	8002c54 <I2C_ITSlaveSeqCplt>
 8002a2a:	e033      	b.n	8002a94 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2210      	movs	r2, #16
 8002a32:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002a34:	e034      	b.n	8002aa0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f043 0204 	orr.w	r2, r3, #4
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a50:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <I2C_Slave_ISR_DMA+0x13c>
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a5e:	d11f      	bne.n	8002aa0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	2b21      	cmp	r3, #33	; 0x21
 8002a64:	d002      	beq.n	8002a6c <I2C_Slave_ISR_DMA+0x148>
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	2b29      	cmp	r3, #41	; 0x29
 8002a6a:	d103      	bne.n	8002a74 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2221      	movs	r2, #33	; 0x21
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30
 8002a72:	e008      	b.n	8002a86 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	2b22      	cmp	r3, #34	; 0x22
 8002a78:	d002      	beq.n	8002a80 <I2C_Slave_ISR_DMA+0x15c>
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a7e:	d102      	bne.n	8002a86 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2222      	movs	r2, #34	; 0x22
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fbbd 	bl	800320c <I2C_ITError>
      if (treatdmanack == 1U)
 8002a92:	e005      	b.n	8002aa0 <I2C_Slave_ISR_DMA+0x17c>
 8002a94:	e004      	b.n	8002aa0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a9e:	e00f      	b.n	8002ac0 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002aa0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002aa2:	e00d      	b.n	8002ac0 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f809 	bl	8002ad2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ae8:	2b28      	cmp	r3, #40	; 0x28
 8002aea:	d16a      	bne.n	8002bc2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	0c1b      	lsrs	r3, r3, #16
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	0c1b      	lsrs	r3, r3, #16
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b0a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b18:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b26:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d138      	bne.n	8002ba2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002b30:	897b      	ldrh	r3, [r7, #10]
 8002b32:	09db      	lsrs	r3, r3, #7
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	89bb      	ldrh	r3, [r7, #12]
 8002b38:	4053      	eors	r3, r2
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	f003 0306 	and.w	r3, r3, #6
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11c      	bne.n	8002b7e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002b44:	897b      	ldrh	r3, [r7, #10]
 8002b46:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d13b      	bne.n	8002bd2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2208      	movs	r2, #8
 8002b66:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b70:	89ba      	ldrh	r2, [r7, #12]
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff fa63 	bl	8002042 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002b7c:	e029      	b.n	8002bd2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002b7e:	893b      	ldrh	r3, [r7, #8]
 8002b80:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fd50 	bl	800362c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b94:	89ba      	ldrh	r2, [r7, #12]
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fa51 	bl	8002042 <HAL_I2C_AddrCallback>
}
 8002ba0:	e017      	b.n	8002bd2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ba2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fd40 	bl	800362c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002bb4:	89ba      	ldrh	r2, [r7, #12]
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff fa41 	bl	8002042 <HAL_I2C_AddrCallback>
}
 8002bc0:	e007      	b.n	8002bd2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b21      	cmp	r3, #33	; 0x21
 8002bf4:	d115      	bne.n	8002c22 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2211      	movs	r2, #17
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fd0d 	bl	800362c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff f9e9 	bl	8001ff2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c20:	e014      	b.n	8002c4c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2212      	movs	r2, #18
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c36:	2102      	movs	r1, #2
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fcf7 	bl	800362c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff f9dd 	bl	8002006 <HAL_I2C_MasterRxCpltCallback>
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e00c      	b.n	8002ca2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ca0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b29      	cmp	r3, #41	; 0x29
 8002cac:	d112      	bne.n	8002cd4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2228      	movs	r2, #40	; 0x28
 8002cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2221      	movs	r2, #33	; 0x21
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fcb4 	bl	800362c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff f9a4 	bl	800201a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002cd2:	e017      	b.n	8002d04 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8002cde:	d111      	bne.n	8002d04 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2228      	movs	r2, #40	; 0x28
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2222      	movs	r2, #34	; 0x22
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002cee:	2102      	movs	r1, #2
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fc9b 	bl	800362c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff f995 	bl	800202e <HAL_I2C_SlaveRxCpltCallback>
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b21      	cmp	r3, #33	; 0x21
 8002d2c:	d107      	bne.n	8002d3e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d2e:	2101      	movs	r1, #1
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fc7b 	bl	800362c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2211      	movs	r2, #17
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d3c:	e00c      	b.n	8002d58 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b22      	cmp	r3, #34	; 0x22
 8002d48:	d106      	bne.n	8002d58 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fc6d 	bl	800362c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2212      	movs	r2, #18
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4b4c      	ldr	r3, [pc, #304]	; (8002e94 <I2C_ITMasterCplt+0x188>)
 8002d64:	400b      	ands	r3, r1
 8002d66:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a49      	ldr	r2, [pc, #292]	; (8002e98 <I2C_ITMasterCplt+0x18c>)
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2210      	movs	r2, #16
 8002d84:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f043 0204 	orr.w	r2, r3, #4
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b60      	cmp	r3, #96	; 0x60
 8002d9c:	d10a      	bne.n	8002db4 <I2C_ITMasterCplt+0xa8>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002db2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fb40 	bl	800343a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b60      	cmp	r3, #96	; 0x60
 8002dca:	d002      	beq.n	8002dd2 <I2C_ITMasterCplt+0xc6>
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fa17 	bl	800320c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002dde:	e054      	b.n	8002e8a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b21      	cmp	r3, #33	; 0x21
 8002dea:	d124      	bne.n	8002e36 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d10b      	bne.n	8002e1e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff f92b 	bl	8002072 <HAL_I2C_MemTxCpltCallback>
}
 8002e1c:	e035      	b.n	8002e8a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff f8df 	bl	8001ff2 <HAL_I2C_MasterTxCpltCallback>
}
 8002e34:	e029      	b.n	8002e8a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b22      	cmp	r3, #34	; 0x22
 8002e40:	d123      	bne.n	8002e8a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d10b      	bne.n	8002e74 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff f90a 	bl	8002086 <HAL_I2C_MemRxCpltCallback>
}
 8002e72:	e00a      	b.n	8002e8a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff f8be 	bl	8002006 <HAL_I2C_MasterRxCpltCallback>
}
 8002e8a:	bf00      	nop
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	fe00e800 	.word	0xfe00e800
 8002e98:	ffff0000 	.word	0xffff0000

08002e9c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebe:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	2b21      	cmp	r3, #33	; 0x21
 8002ecc:	d002      	beq.n	8002ed4 <I2C_ITSlaveCplt+0x38>
 8002ece:	7afb      	ldrb	r3, [r7, #11]
 8002ed0:	2b29      	cmp	r3, #41	; 0x29
 8002ed2:	d108      	bne.n	8002ee6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002ed4:	f248 0101 	movw	r1, #32769	; 0x8001
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fba7 	bl	800362c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2221      	movs	r2, #33	; 0x21
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee4:	e019      	b.n	8002f1a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ee6:	7afb      	ldrb	r3, [r7, #11]
 8002ee8:	2b22      	cmp	r3, #34	; 0x22
 8002eea:	d002      	beq.n	8002ef2 <I2C_ITSlaveCplt+0x56>
 8002eec:	7afb      	ldrb	r3, [r7, #11]
 8002eee:	2b2a      	cmp	r3, #42	; 0x2a
 8002ef0:	d108      	bne.n	8002f04 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ef2:	f248 0102 	movw	r1, #32770	; 0x8002
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fb98 	bl	800362c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2222      	movs	r2, #34	; 0x22
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
 8002f02:	e00a      	b.n	8002f1a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002f04:	7afb      	ldrb	r3, [r7, #11]
 8002f06:	2b28      	cmp	r3, #40	; 0x28
 8002f08:	d107      	bne.n	8002f1a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002f0a:	f248 0103 	movw	r1, #32771	; 0x8003
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fb8c 	bl	800362c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f28:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b89      	ldr	r3, [pc, #548]	; (800315c <I2C_ITSlaveCplt+0x2c0>)
 8002f36:	400b      	ands	r3, r1
 8002f38:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa7d 	bl	800343a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d013      	beq.n	8002f72 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f58:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01f      	beq.n	8002fa2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f70:	e017      	b.n	8002fa2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d012      	beq.n	8002fa2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f8a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d006      	beq.n	8002fa2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f023 0304 	bic.w	r3, r3, #4
 8002fb2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00c      	beq.n	8002fee <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	f043 0204 	orr.w	r2, r3, #4
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b00      	cmp	r3, #0
 800300c:	d049      	beq.n	80030a2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003014:	2b00      	cmp	r3, #0
 8003016:	d044      	beq.n	80030a2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d128      	bne.n	8003074 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b28      	cmp	r3, #40	; 0x28
 800302c:	d108      	bne.n	8003040 <I2C_ITSlaveCplt+0x1a4>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003034:	d104      	bne.n	8003040 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003036:	6979      	ldr	r1, [r7, #20]
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f893 	bl	8003164 <I2C_ITListenCplt>
 800303e:	e030      	b.n	80030a2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b29      	cmp	r3, #41	; 0x29
 800304a:	d10e      	bne.n	800306a <I2C_ITSlaveCplt+0x1ce>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003052:	d00a      	beq.n	800306a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2210      	movs	r2, #16
 800305a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f9ec 	bl	800343a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff fdf6 	bl	8002c54 <I2C_ITSlaveSeqCplt>
 8003068:	e01b      	b.n	80030a2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2210      	movs	r2, #16
 8003070:	61da      	str	r2, [r3, #28]
 8003072:	e016      	b.n	80030a2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2210      	movs	r2, #16
 800307a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	f043 0204 	orr.w	r2, r3, #4
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <I2C_ITSlaveCplt+0x1fa>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003094:	d105      	bne.n	80030a2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f8b5 	bl	800320c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d010      	beq.n	80030da <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8a4 	bl	800320c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b28      	cmp	r3, #40	; 0x28
 80030ce:	d141      	bne.n	8003154 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80030d0:	6979      	ldr	r1, [r7, #20]
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f846 	bl	8003164 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030d8:	e03c      	b.n	8003154 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030e2:	d014      	beq.n	800310e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff fdb5 	bl	8002c54 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <I2C_ITSlaveCplt+0x2c4>)
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe ffa9 	bl	800205e <HAL_I2C_ListenCpltCallback>
}
 800310c:	e022      	b.n	8003154 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b22      	cmp	r3, #34	; 0x22
 8003118:	d10e      	bne.n	8003138 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7fe ff7c 	bl	800202e <HAL_I2C_SlaveRxCpltCallback>
}
 8003136:	e00d      	b.n	8003154 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fe ff63 	bl	800201a <HAL_I2C_SlaveTxCpltCallback>
}
 8003154:	bf00      	nop
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	fe00e800 	.word	0xfe00e800
 8003160:	ffff0000 	.word	0xffff0000

08003164 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a25      	ldr	r2, [pc, #148]	; (8003208 <I2C_ITListenCplt+0xa4>)
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d022      	beq.n	80031e0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d012      	beq.n	80031e0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f043 0204 	orr.w	r2, r3, #4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031e0:	f248 0103 	movw	r1, #32771	; 0x8003
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fa21 	bl	800362c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2210      	movs	r2, #16
 80031f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fe ff2f 	bl	800205e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	ffff0000 	.word	0xffff0000

0800320c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a6d      	ldr	r2, [pc, #436]	; (80033e0 <I2C_ITError+0x1d4>)
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b28      	cmp	r3, #40	; 0x28
 8003242:	d005      	beq.n	8003250 <I2C_ITError+0x44>
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b29      	cmp	r3, #41	; 0x29
 8003248:	d002      	beq.n	8003250 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	2b2a      	cmp	r3, #42	; 0x2a
 800324e:	d10b      	bne.n	8003268 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003250:	2103      	movs	r1, #3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f9ea 	bl	800362c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2228      	movs	r2, #40	; 0x28
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a60      	ldr	r2, [pc, #384]	; (80033e4 <I2C_ITError+0x1d8>)
 8003264:	635a      	str	r2, [r3, #52]	; 0x34
 8003266:	e030      	b.n	80032ca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003268:	f248 0103 	movw	r1, #32771	; 0x8003
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f9dd 	bl	800362c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8e1 	bl	800343a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b60      	cmp	r3, #96	; 0x60
 8003282:	d01f      	beq.n	80032c4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b20      	cmp	r3, #32
 8003298:	d114      	bne.n	80032c4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d109      	bne.n	80032bc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2210      	movs	r2, #16
 80032ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	f043 0204 	orr.w	r2, r3, #4
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2220      	movs	r2, #32
 80032c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d039      	beq.n	800334c <I2C_ITError+0x140>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b11      	cmp	r3, #17
 80032dc:	d002      	beq.n	80032e4 <I2C_ITError+0xd8>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b21      	cmp	r3, #33	; 0x21
 80032e2:	d133      	bne.n	800334c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f2:	d107      	bne.n	8003304 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003302:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe fa0d 	bl	8001728 <HAL_DMA_GetState>
 800330e:	4603      	mov	r3, r0
 8003310:	2b01      	cmp	r3, #1
 8003312:	d017      	beq.n	8003344 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <I2C_ITError+0x1dc>)
 800331a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe f8e7 	bl	80014fc <HAL_DMA_Abort_IT>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d04d      	beq.n	80033d0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800333e:	4610      	mov	r0, r2
 8003340:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003342:	e045      	b.n	80033d0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f851 	bl	80033ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800334a:	e041      	b.n	80033d0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d039      	beq.n	80033c8 <I2C_ITError+0x1bc>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b12      	cmp	r3, #18
 8003358:	d002      	beq.n	8003360 <I2C_ITError+0x154>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b22      	cmp	r3, #34	; 0x22
 800335e:	d133      	bne.n	80033c8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800336a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336e:	d107      	bne.n	8003380 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800337e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe f9cf 	bl	8001728 <HAL_DMA_GetState>
 800338a:	4603      	mov	r3, r0
 800338c:	2b01      	cmp	r3, #1
 800338e:	d017      	beq.n	80033c0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003394:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <I2C_ITError+0x1dc>)
 8003396:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe f8a9 	bl	80014fc <HAL_DMA_Abort_IT>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d011      	beq.n	80033d4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033ba:	4610      	mov	r0, r2
 80033bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033be:	e009      	b.n	80033d4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f813 	bl	80033ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033c6:	e005      	b.n	80033d4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f80f 	bl	80033ec <I2C_TreatErrorCallback>
  }
}
 80033ce:	e002      	b.n	80033d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033d0:	bf00      	nop
 80033d2:	e000      	b.n	80033d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033d4:	bf00      	nop
}
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	ffff0000 	.word	0xffff0000
 80033e4:	08002311 	.word	0x08002311
 80033e8:	08003483 	.word	0x08003483

080033ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b60      	cmp	r3, #96	; 0x60
 80033fe:	d10e      	bne.n	800341e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe fe49 	bl	80020ae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800341c:	e009      	b.n	8003432 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7fe fe34 	bl	800209a <HAL_I2C_ErrorCallback>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b02      	cmp	r3, #2
 800344e:	d103      	bne.n	8003458 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2200      	movs	r2, #0
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d007      	beq.n	8003476 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699a      	ldr	r2, [r3, #24]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	619a      	str	r2, [r3, #24]
  }
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	2200      	movs	r2, #0
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	2200      	movs	r2, #0
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff ff9b 	bl	80033ec <I2C_TreatErrorCallback>
}
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	817b      	strh	r3, [r7, #10]
 80034ce:	4613      	mov	r3, r2
 80034d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034d2:	897b      	ldrh	r3, [r7, #10]
 80034d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034d8:	7a7b      	ldrb	r3, [r7, #9]
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	0d5b      	lsrs	r3, r3, #21
 80034fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <I2C_TransferConfig+0x60>)
 8003500:	430b      	orrs	r3, r1
 8003502:	43db      	mvns	r3, r3
 8003504:	ea02 0103 	and.w	r1, r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	03ff63ff 	.word	0x03ff63ff

08003524 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	4a39      	ldr	r2, [pc, #228]	; (8003620 <I2C_Enable_IRQ+0xfc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d032      	beq.n	80035a4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003542:	4a38      	ldr	r2, [pc, #224]	; (8003624 <I2C_Enable_IRQ+0x100>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d02d      	beq.n	80035a4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800354c:	4a36      	ldr	r2, [pc, #216]	; (8003628 <I2C_Enable_IRQ+0x104>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d028      	beq.n	80035a4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003552:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003556:	2b00      	cmp	r3, #0
 8003558:	da03      	bge.n	8003562 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003560:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003562:	887b      	ldrh	r3, [r7, #2]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003572:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003574:	887b      	ldrh	r3, [r7, #2]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003584:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003586:	887b      	ldrh	r3, [r7, #2]
 8003588:	2b10      	cmp	r3, #16
 800358a:	d103      	bne.n	8003594 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003592:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003594:	887b      	ldrh	r3, [r7, #2]
 8003596:	2b20      	cmp	r3, #32
 8003598:	d133      	bne.n	8003602 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f043 0320 	orr.w	r3, r3, #32
 80035a0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80035a2:	e02e      	b.n	8003602 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80035a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da03      	bge.n	80035b4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80035b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80035b4:	887b      	ldrh	r3, [r7, #2]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80035c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80035c6:	887b      	ldrh	r3, [r7, #2]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80035d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80035d8:	887b      	ldrh	r3, [r7, #2]
 80035da:	2b10      	cmp	r3, #16
 80035dc:	d103      	bne.n	80035e6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80035e4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d103      	bne.n	80035f4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035f2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80035f4:	887b      	ldrh	r3, [r7, #2]
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d103      	bne.n	8003602 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003600:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6819      	ldr	r1, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	430a      	orrs	r2, r1
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	08002503 	.word	0x08002503
 8003624:	08002925 	.word	0x08002925
 8003628:	080026d9 	.word	0x080026d9

0800362c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800363c:	887b      	ldrh	r3, [r7, #2]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00f      	beq.n	8003666 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800364c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800365a:	2b28      	cmp	r3, #40	; 0x28
 800365c:	d003      	beq.n	8003666 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003664:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00f      	beq.n	8003690 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003676:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003684:	2b28      	cmp	r3, #40	; 0x28
 8003686:	d003      	beq.n	8003690 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800368e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003690:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003694:	2b00      	cmp	r3, #0
 8003696:	da03      	bge.n	80036a0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800369e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d103      	bne.n	80036ae <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d103      	bne.n	80036bc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f043 0320 	orr.w	r3, r3, #32
 80036ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	2b40      	cmp	r3, #64	; 0x40
 80036c0:	d103      	bne.n	80036ca <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036c8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	43da      	mvns	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	400a      	ands	r2, r1
 80036da:	601a      	str	r2, [r3, #0]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d138      	bne.n	8003770 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003708:	2302      	movs	r3, #2
 800370a:	e032      	b.n	8003772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	; 0x24
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800373a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6819      	ldr	r1, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b20      	cmp	r3, #32
 8003792:	d139      	bne.n	8003808 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800379e:	2302      	movs	r3, #2
 80037a0:	e033      	b.n	800380a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2224      	movs	r2, #36	; 0x24
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0201 	bic.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d141      	bne.n	80038aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003826:	4b4b      	ldr	r3, [pc, #300]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003832:	d131      	bne.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003834:	4b47      	ldr	r3, [pc, #284]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800383a:	4a46      	ldr	r2, [pc, #280]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003840:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800384c:	4a41      	ldr	r2, [pc, #260]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003852:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003854:	4b40      	ldr	r3, [pc, #256]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2232      	movs	r2, #50	; 0x32
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	4a3f      	ldr	r2, [pc, #252]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	0c9b      	lsrs	r3, r3, #18
 8003866:	3301      	adds	r3, #1
 8003868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800386a:	e002      	b.n	8003872 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3b01      	subs	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003872:	4b38      	ldr	r3, [pc, #224]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387e:	d102      	bne.n	8003886 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f2      	bne.n	800386c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003886:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003892:	d158      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e057      	b.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003898:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800389e:	4a2d      	ldr	r2, [pc, #180]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038a8:	e04d      	b.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b0:	d141      	bne.n	8003936 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038be:	d131      	bne.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038c0:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038c6:	4a23      	ldr	r2, [pc, #140]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038d0:	4b20      	ldr	r3, [pc, #128]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d8:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2232      	movs	r2, #50	; 0x32
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	4a1c      	ldr	r2, [pc, #112]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	0c9b      	lsrs	r3, r3, #18
 80038f2:	3301      	adds	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f6:	e002      	b.n	80038fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390a:	d102      	bne.n	8003912 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f2      	bne.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	d112      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e011      	b.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003934:	e007      	b.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003944:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40007000 	.word	0x40007000
 8003958:	20000004 	.word	0x20000004
 800395c:	431bde83 	.word	0x431bde83

08003960 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a04      	ldr	r2, [pc, #16]	; (800397c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800396a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800396e:	6093      	str	r3, [r2, #8]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40007000 	.word	0x40007000

08003980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e2fe      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d075      	beq.n	8003a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399e:	4b97      	ldr	r3, [pc, #604]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a8:	4b94      	ldr	r3, [pc, #592]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b0c      	cmp	r3, #12
 80039b6:	d102      	bne.n	80039be <HAL_RCC_OscConfig+0x3e>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d002      	beq.n	80039c4 <HAL_RCC_OscConfig+0x44>
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d10b      	bne.n	80039dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	4b8d      	ldr	r3, [pc, #564]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05b      	beq.n	8003a88 <HAL_RCC_OscConfig+0x108>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d157      	bne.n	8003a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e2d9      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e4:	d106      	bne.n	80039f4 <HAL_RCC_OscConfig+0x74>
 80039e6:	4b85      	ldr	r3, [pc, #532]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a84      	ldr	r2, [pc, #528]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e01d      	b.n	8003a30 <HAL_RCC_OscConfig+0xb0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x98>
 80039fe:	4b7f      	ldr	r3, [pc, #508]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a7e      	ldr	r2, [pc, #504]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b7c      	ldr	r3, [pc, #496]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a7b      	ldr	r2, [pc, #492]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0xb0>
 8003a18:	4b78      	ldr	r3, [pc, #480]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a77      	ldr	r2, [pc, #476]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b75      	ldr	r3, [pc, #468]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a74      	ldr	r2, [pc, #464]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fd fb7a 	bl	8001130 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fd fb76 	bl	8001130 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e29e      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a52:	4b6a      	ldr	r3, [pc, #424]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0xc0>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fd fb66 	bl	8001130 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fd fb62 	bl	8001130 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e28a      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a7a:	4b60      	ldr	r3, [pc, #384]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0xe8>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d075      	beq.n	8003b82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a96:	4b59      	ldr	r3, [pc, #356]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa0:	4b56      	ldr	r3, [pc, #344]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x136>
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d002      	beq.n	8003abc <HAL_RCC_OscConfig+0x13c>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d11f      	bne.n	8003afc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003abc:	4b4f      	ldr	r3, [pc, #316]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x154>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e25d      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad4:	4b49      	ldr	r3, [pc, #292]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	4946      	ldr	r1, [pc, #280]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ae8:	4b45      	ldr	r3, [pc, #276]	; (8003c00 <HAL_RCC_OscConfig+0x280>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fd fad3 	bl	8001098 <HAL_InitTick>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d043      	beq.n	8003b80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e249      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d023      	beq.n	8003b4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b04:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a3c      	ldr	r2, [pc, #240]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd fb0e 	bl	8001130 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b18:	f7fd fb0a 	bl	8001130 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e232      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b2a:	4b34      	ldr	r3, [pc, #208]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b36:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	061b      	lsls	r3, r3, #24
 8003b44:	492d      	ldr	r1, [pc, #180]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]
 8003b4a:	e01a      	b.n	8003b82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4c:	4b2b      	ldr	r3, [pc, #172]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd faea 	bl	8001130 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd fae6 	bl	8001130 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e20e      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b72:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1e0>
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d041      	beq.n	8003c12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b96:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9c:	4a17      	ldr	r2, [pc, #92]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fd fac3 	bl	8001130 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bae:	f7fd fabf 	bl	8001130 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e1e7      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0ef      	beq.n	8003bae <HAL_RCC_OscConfig+0x22e>
 8003bce:	e020      	b.n	8003c12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd6:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fd faa6 	bl	8001130 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be6:	e00d      	b.n	8003c04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be8:	f7fd faa2 	bl	8001130 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d906      	bls.n	8003c04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e1ca      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c04:	4b8c      	ldr	r3, [pc, #560]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1ea      	bne.n	8003be8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80a6 	beq.w	8003d6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c20:	2300      	movs	r3, #0
 8003c22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c24:	4b84      	ldr	r3, [pc, #528]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2b4>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_RCC_OscConfig+0x2b6>
 8003c34:	2300      	movs	r3, #0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	4b7f      	ldr	r3, [pc, #508]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3e:	4a7e      	ldr	r2, [pc, #504]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c44:	6593      	str	r3, [r2, #88]	; 0x58
 8003c46:	4b7c      	ldr	r3, [pc, #496]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c52:	2301      	movs	r3, #1
 8003c54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c56:	4b79      	ldr	r3, [pc, #484]	; (8003e3c <HAL_RCC_OscConfig+0x4bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d118      	bne.n	8003c94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c62:	4b76      	ldr	r3, [pc, #472]	; (8003e3c <HAL_RCC_OscConfig+0x4bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a75      	ldr	r2, [pc, #468]	; (8003e3c <HAL_RCC_OscConfig+0x4bc>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6e:	f7fd fa5f 	bl	8001130 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c76:	f7fd fa5b 	bl	8001130 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e183      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c88:	4b6c      	ldr	r3, [pc, #432]	; (8003e3c <HAL_RCC_OscConfig+0x4bc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d108      	bne.n	8003cae <HAL_RCC_OscConfig+0x32e>
 8003c9c:	4b66      	ldr	r3, [pc, #408]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	4a65      	ldr	r2, [pc, #404]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cac:	e024      	b.n	8003cf8 <HAL_RCC_OscConfig+0x378>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b05      	cmp	r3, #5
 8003cb4:	d110      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x358>
 8003cb6:	4b60      	ldr	r3, [pc, #384]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	4a5e      	ldr	r2, [pc, #376]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cbe:	f043 0304 	orr.w	r3, r3, #4
 8003cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc6:	4b5c      	ldr	r3, [pc, #368]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	4a5a      	ldr	r2, [pc, #360]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd6:	e00f      	b.n	8003cf8 <HAL_RCC_OscConfig+0x378>
 8003cd8:	4b57      	ldr	r3, [pc, #348]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	4a56      	ldr	r2, [pc, #344]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce8:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cf0:	f023 0304 	bic.w	r3, r3, #4
 8003cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d016      	beq.n	8003d2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fd fa16 	bl	8001130 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fd fa12 	bl	8001130 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e138      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d1e:	4b46      	ldr	r3, [pc, #280]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ed      	beq.n	8003d08 <HAL_RCC_OscConfig+0x388>
 8003d2c:	e015      	b.n	8003d5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fd f9ff 	bl	8001130 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7fd f9fb 	bl	8001130 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e121      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d4c:	4b3a      	ldr	r3, [pc, #232]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1ed      	bne.n	8003d36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d5a:	7ffb      	ldrb	r3, [r7, #31]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d105      	bne.n	8003d6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d60:	4b35      	ldr	r3, [pc, #212]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d64:	4a34      	ldr	r2, [pc, #208]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d03c      	beq.n	8003df2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01c      	beq.n	8003dba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d80:	4b2d      	ldr	r3, [pc, #180]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d86:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fd f9ce 	bl	8001130 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d98:	f7fd f9ca 	bl	8001130 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e0f2      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003daa:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ef      	beq.n	8003d98 <HAL_RCC_OscConfig+0x418>
 8003db8:	e01b      	b.n	8003df2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dba:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dc0:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fd f9b1 	bl	8001130 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dd2:	f7fd f9ad 	bl	8001130 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0d5      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003de4:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003de6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ef      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80c9 	beq.w	8003f8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 030c 	and.w	r3, r3, #12
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	f000 8083 	beq.w	8003f10 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d15e      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003e18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fd f987 	bl	8001130 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e24:	e00c      	b.n	8003e40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fd f983 	bl	8001130 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d905      	bls.n	8003e40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0ab      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e40:	4b55      	ldr	r3, [pc, #340]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ec      	bne.n	8003e26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4c:	4b52      	ldr	r3, [pc, #328]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	4b52      	ldr	r3, [pc, #328]	; (8003f9c <HAL_RCC_OscConfig+0x61c>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6a11      	ldr	r1, [r2, #32]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e5c:	3a01      	subs	r2, #1
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e66:	0212      	lsls	r2, r2, #8
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e6e:	0852      	lsrs	r2, r2, #1
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0552      	lsls	r2, r2, #21
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e7a:	0852      	lsrs	r2, r2, #1
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	0652      	lsls	r2, r2, #25
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e86:	06d2      	lsls	r2, r2, #27
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	4943      	ldr	r1, [pc, #268]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e90:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a40      	ldr	r2, [pc, #256]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e9c:	4b3e      	ldr	r3, [pc, #248]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a3d      	ldr	r2, [pc, #244]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fd f942 	bl	8001130 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fd f93e 	bl	8001130 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e066      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec2:	4b35      	ldr	r3, [pc, #212]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x530>
 8003ece:	e05e      	b.n	8003f8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a30      	ldr	r2, [pc, #192]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd f928 	bl	8001130 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fd f924 	bl	8001130 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e04c      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef6:	4b28      	ldr	r3, [pc, #160]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f02:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	4924      	ldr	r1, [pc, #144]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_RCC_OscConfig+0x620>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	60cb      	str	r3, [r1, #12]
 8003f0e:	e03e      	b.n	8003f8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e039      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0203 	and.w	r2, r3, #3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d12c      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d123      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d11b      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d113      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d109      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	3b01      	subs	r3, #1
 8003f84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d001      	beq.n	8003f8e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	019f800c 	.word	0x019f800c
 8003fa0:	feeefffc 	.word	0xfeeefffc

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e11e      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b91      	ldr	r3, [pc, #580]	; (8004204 <HAL_RCC_ClockConfig+0x260>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d910      	bls.n	8003fec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b8e      	ldr	r3, [pc, #568]	; (8004204 <HAL_RCC_ClockConfig+0x260>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 020f 	bic.w	r2, r3, #15
 8003fd2:	498c      	ldr	r1, [pc, #560]	; (8004204 <HAL_RCC_ClockConfig+0x260>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b8a      	ldr	r3, [pc, #552]	; (8004204 <HAL_RCC_ClockConfig+0x260>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e106      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d073      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d129      	bne.n	8004054 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004000:	4b81      	ldr	r3, [pc, #516]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0f4      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004010:	f000 f99e 	bl	8004350 <RCC_GetSysClockFreqFromPLLSource>
 8004014:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4a7c      	ldr	r2, [pc, #496]	; (800420c <HAL_RCC_ClockConfig+0x268>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d93f      	bls.n	800409e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800401e:	4b7a      	ldr	r3, [pc, #488]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004032:	2b00      	cmp	r3, #0
 8004034:	d033      	beq.n	800409e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800403a:	2b00      	cmp	r3, #0
 800403c:	d12f      	bne.n	800409e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800403e:	4b72      	ldr	r3, [pc, #456]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004046:	4a70      	ldr	r2, [pc, #448]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e024      	b.n	800409e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d107      	bne.n	800406c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800405c:	4b6a      	ldr	r3, [pc, #424]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0c6      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800406c:	4b66      	ldr	r3, [pc, #408]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0be      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800407c:	f000 f8ce 	bl	800421c <HAL_RCC_GetSysClockFreq>
 8004080:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4a61      	ldr	r2, [pc, #388]	; (800420c <HAL_RCC_ClockConfig+0x268>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d909      	bls.n	800409e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800408a:	4b5f      	ldr	r3, [pc, #380]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004092:	4a5d      	ldr	r2, [pc, #372]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004098:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800409e:	4b5a      	ldr	r3, [pc, #360]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f023 0203 	bic.w	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4957      	ldr	r1, [pc, #348]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b0:	f7fd f83e 	bl	8001130 <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b8:	f7fd f83a 	bl	8001130 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e095      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	4b4e      	ldr	r3, [pc, #312]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 020c 	and.w	r2, r3, #12
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1eb      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d023      	beq.n	8004134 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f8:	4b43      	ldr	r3, [pc, #268]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a42      	ldr	r2, [pc, #264]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004102:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004110:	4b3d      	ldr	r3, [pc, #244]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004118:	4a3b      	ldr	r2, [pc, #236]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 800411a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800411e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004120:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	4936      	ldr	r1, [pc, #216]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
 8004132:	e008      	b.n	8004146 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b80      	cmp	r3, #128	; 0x80
 8004138:	d105      	bne.n	8004146 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800413a:	4b33      	ldr	r3, [pc, #204]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4a32      	ldr	r2, [pc, #200]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004144:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004146:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <HAL_RCC_ClockConfig+0x260>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d21d      	bcs.n	8004190 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004154:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <HAL_RCC_ClockConfig+0x260>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f023 020f 	bic.w	r2, r3, #15
 800415c:	4929      	ldr	r1, [pc, #164]	; (8004204 <HAL_RCC_ClockConfig+0x260>)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	4313      	orrs	r3, r2
 8004162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004164:	f7fc ffe4 	bl	8001130 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fc ffe0 	bl	8001130 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e03b      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_RCC_ClockConfig+0x260>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d1ed      	bne.n	800416c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800419c:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4917      	ldr	r1, [pc, #92]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ba:	4b13      	ldr	r3, [pc, #76]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	490f      	ldr	r1, [pc, #60]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041ce:	f000 f825 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80041d2:	4602      	mov	r2, r0
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCC_ClockConfig+0x264>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	091b      	lsrs	r3, r3, #4
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	490c      	ldr	r1, [pc, #48]	; (8004210 <HAL_RCC_ClockConfig+0x26c>)
 80041e0:	5ccb      	ldrb	r3, [r1, r3]
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <HAL_RCC_ClockConfig+0x270>)
 80041ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_RCC_ClockConfig+0x274>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fc ff50 	bl	8001098 <HAL_InitTick>
 80041f8:	4603      	mov	r3, r0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40022000 	.word	0x40022000
 8004208:	40021000 	.word	0x40021000
 800420c:	04c4b400 	.word	0x04c4b400
 8004210:	08006014 	.word	0x08006014
 8004214:	20000004 	.word	0x20000004
 8004218:	20000008 	.word	0x20000008

0800421c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004222:	4b2c      	ldr	r3, [pc, #176]	; (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b04      	cmp	r3, #4
 800422c:	d102      	bne.n	8004234 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800422e:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	e047      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004234:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b08      	cmp	r3, #8
 800423e:	d102      	bne.n	8004246 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004240:	4b26      	ldr	r3, [pc, #152]	; (80042dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	e03e      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004246:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b0c      	cmp	r3, #12
 8004250:	d136      	bne.n	80042c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004252:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	3301      	adds	r3, #1
 8004268:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d10c      	bne.n	800428a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004270:	4a1a      	ldr	r2, [pc, #104]	; (80042dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	4a16      	ldr	r2, [pc, #88]	; (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800427a:	68d2      	ldr	r2, [r2, #12]
 800427c:	0a12      	lsrs	r2, r2, #8
 800427e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004282:	fb02 f303 	mul.w	r3, r2, r3
 8004286:	617b      	str	r3, [r7, #20]
      break;
 8004288:	e00c      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800428a:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004292:	4a10      	ldr	r2, [pc, #64]	; (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004294:	68d2      	ldr	r2, [r2, #12]
 8004296:	0a12      	lsrs	r2, r2, #8
 8004298:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800429c:	fb02 f303 	mul.w	r3, r2, r3
 80042a0:	617b      	str	r3, [r7, #20]
      break;
 80042a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	0e5b      	lsrs	r3, r3, #25
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	3301      	adds	r3, #1
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	e001      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042c4:	693b      	ldr	r3, [r7, #16]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	00f42400 	.word	0x00f42400
 80042dc:	016e3600 	.word	0x016e3600

080042e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000004 	.word	0x20000004

080042f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042fc:	f7ff fff0 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4904      	ldr	r1, [pc, #16]	; (8004320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40021000 	.word	0x40021000
 8004320:	08006024 	.word	0x08006024

08004324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004328:	f7ff ffda 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0adb      	lsrs	r3, r3, #11
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4904      	ldr	r1, [pc, #16]	; (800434c <HAL_RCC_GetPCLK2Freq+0x28>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	08006024 	.word	0x08006024

08004350 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004356:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004360:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b03      	cmp	r3, #3
 8004372:	d10c      	bne.n	800438e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004374:	4a17      	ldr	r2, [pc, #92]	; (80043d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	4a14      	ldr	r2, [pc, #80]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800437e:	68d2      	ldr	r2, [r2, #12]
 8004380:	0a12      	lsrs	r2, r2, #8
 8004382:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	617b      	str	r3, [r7, #20]
    break;
 800438c:	e00c      	b.n	80043a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800438e:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004398:	68d2      	ldr	r2, [r2, #12]
 800439a:	0a12      	lsrs	r2, r2, #8
 800439c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043a0:	fb02 f303 	mul.w	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]
    break;
 80043a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043a8:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	0e5b      	lsrs	r3, r3, #25
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	3301      	adds	r3, #1
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80043c2:	687b      	ldr	r3, [r7, #4]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40021000 	.word	0x40021000
 80043d4:	016e3600 	.word	0x016e3600
 80043d8:	00f42400 	.word	0x00f42400

080043dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e4:	2300      	movs	r3, #0
 80043e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e8:	2300      	movs	r3, #0
 80043ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8098 	beq.w	800452a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fe:	4b43      	ldr	r3, [pc, #268]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	4b40      	ldr	r3, [pc, #256]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	4a3f      	ldr	r2, [pc, #252]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004414:	6593      	str	r3, [r2, #88]	; 0x58
 8004416:	4b3d      	ldr	r3, [pc, #244]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004422:	2301      	movs	r3, #1
 8004424:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004426:	4b3a      	ldr	r3, [pc, #232]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a39      	ldr	r2, [pc, #228]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004430:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004432:	f7fc fe7d 	bl	8001130 <HAL_GetTick>
 8004436:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004438:	e009      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443a:	f7fc fe79 	bl	8001130 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d902      	bls.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	74fb      	strb	r3, [r7, #19]
        break;
 800444c:	e005      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800444e:	4b30      	ldr	r3, [pc, #192]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0ef      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d159      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004460:	4b2a      	ldr	r3, [pc, #168]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d01e      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	429a      	cmp	r2, r3
 800447a:	d019      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800447c:	4b23      	ldr	r3, [pc, #140]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004486:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004488:	4b20      	ldr	r3, [pc, #128]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	4a1f      	ldr	r2, [pc, #124]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004498:	4b1c      	ldr	r3, [pc, #112]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	4a1b      	ldr	r2, [pc, #108]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044a8:	4a18      	ldr	r2, [pc, #96]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d016      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fc fe39 	bl	8001130 <HAL_GetTick>
 80044be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c0:	e00b      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c2:	f7fc fe35 	bl	8001130 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d902      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	74fb      	strb	r3, [r7, #19]
            break;
 80044d8:	e006      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044da:	4b0c      	ldr	r3, [pc, #48]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ec      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10b      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ee:	4b07      	ldr	r3, [pc, #28]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	4903      	ldr	r1, [pc, #12]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004504:	e008      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004506:	7cfb      	ldrb	r3, [r7, #19]
 8004508:	74bb      	strb	r3, [r7, #18]
 800450a:	e005      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800450c:	40021000 	.word	0x40021000
 8004510:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004514:	7cfb      	ldrb	r3, [r7, #19]
 8004516:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004518:	7c7b      	ldrb	r3, [r7, #17]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d105      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451e:	4ba7      	ldr	r3, [pc, #668]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	4aa6      	ldr	r2, [pc, #664]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004536:	4ba1      	ldr	r3, [pc, #644]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	f023 0203 	bic.w	r2, r3, #3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	499d      	ldr	r1, [pc, #628]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004558:	4b98      	ldr	r3, [pc, #608]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f023 020c 	bic.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	4995      	ldr	r1, [pc, #596]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800457a:	4b90      	ldr	r3, [pc, #576]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	498c      	ldr	r1, [pc, #560]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800459c:	4b87      	ldr	r3, [pc, #540]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	4984      	ldr	r1, [pc, #528]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045be:	4b7f      	ldr	r3, [pc, #508]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	497b      	ldr	r1, [pc, #492]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045e0:	4b76      	ldr	r3, [pc, #472]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	4973      	ldr	r1, [pc, #460]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004602:	4b6e      	ldr	r3, [pc, #440]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	496a      	ldr	r1, [pc, #424]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004624:	4b65      	ldr	r3, [pc, #404]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	4962      	ldr	r1, [pc, #392]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004646:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	4959      	ldr	r1, [pc, #356]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004668:	4b54      	ldr	r3, [pc, #336]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800466e:	f023 0203 	bic.w	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	4951      	ldr	r1, [pc, #324]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468a:	4b4c      	ldr	r3, [pc, #304]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	4948      	ldr	r1, [pc, #288]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d015      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046ac:	4b43      	ldr	r3, [pc, #268]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	4940      	ldr	r1, [pc, #256]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ca:	d105      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046cc:	4b3b      	ldr	r3, [pc, #236]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a3a      	ldr	r2, [pc, #232]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d015      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046e4:	4b35      	ldr	r3, [pc, #212]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f2:	4932      	ldr	r1, [pc, #200]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004702:	d105      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004704:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4a2c      	ldr	r2, [pc, #176]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800471c:	4b27      	ldr	r3, [pc, #156]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	4924      	ldr	r1, [pc, #144]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800473a:	d105      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473c:	4b1f      	ldr	r3, [pc, #124]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004746:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d015      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004754:	4b19      	ldr	r3, [pc, #100]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	4916      	ldr	r1, [pc, #88]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004772:	d105      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a10      	ldr	r2, [pc, #64]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d019      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	4908      	ldr	r1, [pc, #32]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047aa:	d109      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a02      	ldr	r2, [pc, #8]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b6:	60d3      	str	r3, [r2, #12]
 80047b8:	e002      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d015      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047cc:	4b29      	ldr	r3, [pc, #164]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	4926      	ldr	r1, [pc, #152]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ea:	d105      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047ec:	4b21      	ldr	r3, [pc, #132]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a20      	ldr	r2, [pc, #128]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d015      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004804:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004812:	4918      	ldr	r1, [pc, #96]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d105      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004824:	4b13      	ldr	r3, [pc, #76]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4a12      	ldr	r2, [pc, #72]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800482a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d015      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800483c:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800483e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484a:	490a      	ldr	r1, [pc, #40]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800485a:	d105      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a04      	ldr	r2, [pc, #16]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004866:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004868:	7cbb      	ldrb	r3, [r7, #18]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000

08004878 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e09d      	b.n	80049c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	d108      	bne.n	80048a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489a:	d009      	beq.n	80048b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	61da      	str	r2, [r3, #28]
 80048a2:	e005      	b.n	80048b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fc fae0 	bl	8000e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048f0:	d902      	bls.n	80048f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e002      	b.n	80048fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004906:	d007      	beq.n	8004918 <HAL_SPI_Init+0xa0>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004910:	d002      	beq.n	8004918 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495a:	ea42 0103 	orr.w	r1, r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	0c1b      	lsrs	r3, r3, #16
 8004974:	f003 0204 	and.w	r2, r3, #4
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004994:	ea42 0103 	orr.w	r1, r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049e8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049f0:	7dbb      	ldrb	r3, [r7, #22]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d00d      	beq.n	8004a12 <HAL_SPI_TransmitReceive_IT+0x42>
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fc:	d106      	bne.n	8004a0c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <HAL_SPI_TransmitReceive_IT+0x3c>
 8004a06:	7dbb      	ldrb	r3, [r7, #22]
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d002      	beq.n	8004a12 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a10:	e07d      	b.n	8004b0e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_SPI_TransmitReceive_IT+0x54>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <HAL_SPI_TransmitReceive_IT+0x54>
 8004a1e:	887b      	ldrh	r3, [r7, #2]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d102      	bne.n	8004a2a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a28:	e071      	b.n	8004b0e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_SPI_TransmitReceive_IT+0x68>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e06b      	b.n	8004b10 <HAL_SPI_TransmitReceive_IT+0x140>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d003      	beq.n	8004a54 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2205      	movs	r2, #5
 8004a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	887a      	ldrh	r2, [r7, #2]
 8004a64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	887a      	ldrh	r2, [r7, #2]
 8004a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	887a      	ldrh	r2, [r7, #2]
 8004a76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	887a      	ldrh	r2, [r7, #2]
 8004a7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a8a:	d906      	bls.n	8004a9a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4a23      	ldr	r2, [pc, #140]	; (8004b1c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8004a90:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a22      	ldr	r2, [pc, #136]	; (8004b20 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004a96:	651a      	str	r2, [r3, #80]	; 0x50
 8004a98:	e005      	b.n	8004aa6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <HAL_SPI_TransmitReceive_IT+0x154>)
 8004a9e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a21      	ldr	r2, [pc, #132]	; (8004b28 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004aa4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aae:	d802      	bhi.n	8004ab6 <HAL_SPI_TransmitReceive_IT+0xe6>
 8004ab0:	887b      	ldrh	r3, [r7, #2]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d908      	bls.n	8004ac8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	e007      	b.n	8004ad8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ad6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d007      	beq.n	8004af6 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004b0c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	08004eb7 	.word	0x08004eb7
 8004b20:	08004f1d 	.word	0x08004f1d
 8004b24:	08004d67 	.word	0x08004d67
 8004b28:	08004e25 	.word	0x08004e25

08004b2c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10e      	bne.n	8004b6c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d009      	beq.n	8004b6c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
    return;
 8004b6a:	e0ce      	b.n	8004d0a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_SPI_IRQHandler+0x5e>
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
    return;
 8004b88:	e0bf      	b.n	8004d0a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <HAL_SPI_IRQHandler+0x7e>
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d105      	bne.n	8004baa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80b0 	beq.w	8004d0a <HAL_SPI_IRQHandler+0x1de>
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80aa 	beq.w	8004d0a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d023      	beq.n	8004c08 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d011      	beq.n	8004bf0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd0:	f043 0204 	orr.w	r2, r3, #4
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	e00b      	b.n	8004c08 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	693b      	ldr	r3, [r7, #16]
        return;
 8004c06:	e080      	b.n	8004d0a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d014      	beq.n	8004c3c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c16:	f043 0201 	orr.w	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4a:	f043 0208 	orr.w	r2, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d04f      	beq.n	8004d08 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c76:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <HAL_SPI_IRQHandler+0x168>
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d034      	beq.n	8004cfe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0203 	bic.w	r2, r2, #3
 8004ca2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d011      	beq.n	8004cd0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <HAL_SPI_IRQHandler+0x1e4>)
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fc fc1f 	bl	80014fc <HAL_DMA_Abort_IT>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d016      	beq.n	8004d06 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cdc:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <HAL_SPI_IRQHandler+0x1e4>)
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fc fc09 	bl	80014fc <HAL_DMA_Abort_IT>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004cfc:	e003      	b.n	8004d06 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f812 	bl	8004d28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d04:	e000      	b.n	8004d08 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004d06:	bf00      	nop
    return;
 8004d08:	bf00      	nop
  }
}
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	08004d3d 	.word	0x08004d3d

08004d14 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f7ff ffe5 	bl	8004d28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d923      	bls.n	8004dc2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	b292      	uxth	r2, r2
 8004d86:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b02      	subs	r3, #2
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d11f      	bne.n	8004df0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dbe:	605a      	str	r2, [r3, #4]
 8004dc0:	e016      	b.n	8004df0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f103 020c 	add.w	r2, r3, #12
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	7812      	ldrb	r2, [r2, #0]
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10f      	bne.n	8004e1c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e0a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fa14 	bl	8005244 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d912      	bls.n	8004e5c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	881a      	ldrh	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	1c9a      	adds	r2, r3, #2
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b02      	subs	r3, #2
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e5a:	e012      	b.n	8004e82 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	330c      	adds	r3, #12
 8004e66:	7812      	ldrb	r2, [r2, #0]
 8004e68:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d110      	bne.n	8004eae <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e9a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f9cb 	bl	8005244 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	b292      	uxth	r2, r2
 8004eca:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	1c9a      	adds	r2, r3, #2
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10f      	bne.n	8004f14 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f02:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f998 	bl	8005244 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	881a      	ldrh	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	1c9a      	adds	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d110      	bne.n	8004f74 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f60:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d102      	bne.n	8004f74 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f968 	bl	8005244 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f8c:	f7fc f8d0 	bl	8001130 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	4413      	add	r3, r2
 8004f9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f9c:	f7fc f8c8 	bl	8001130 <HAL_GetTick>
 8004fa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fa2:	4b39      	ldr	r3, [pc, #228]	; (8005088 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	015b      	lsls	r3, r3, #5
 8004fa8:	0d1b      	lsrs	r3, r3, #20
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	fb02 f303 	mul.w	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fb2:	e054      	b.n	800505e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d050      	beq.n	800505e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fbc:	f7fc f8b8 	bl	8001130 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d902      	bls.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d13d      	bne.n	800504e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fe0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fea:	d111      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff4:	d004      	beq.n	8005000 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffe:	d107      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800500e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005018:	d10f      	bne.n	800503a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005038:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e017      	b.n	800507e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	3b01      	subs	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4013      	ands	r3, r2
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	bf0c      	ite	eq
 800506e:	2301      	moveq	r3, #1
 8005070:	2300      	movne	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	429a      	cmp	r2, r3
 800507a:	d19b      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000004 	.word	0x20000004

0800508c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	; 0x28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800509e:	f7fc f847 	bl	8001130 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	4413      	add	r3, r2
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80050ae:	f7fc f83f 	bl	8001130 <HAL_GetTick>
 80050b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050bc:	4b3d      	ldr	r3, [pc, #244]	; (80051b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	00da      	lsls	r2, r3, #3
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	0d1b      	lsrs	r3, r3, #20
 80050cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80050d4:	e060      	b.n	8005198 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80050dc:	d107      	bne.n	80050ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d050      	beq.n	8005198 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050f6:	f7fc f81b 	bl	8001130 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005102:	429a      	cmp	r2, r3
 8005104:	d902      	bls.n	800510c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	2b00      	cmp	r3, #0
 800510a:	d13d      	bne.n	8005188 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800511a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005124:	d111      	bne.n	800514a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800512e:	d004      	beq.n	800513a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005138:	d107      	bne.n	800514a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005148:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005152:	d10f      	bne.n	8005174 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005172:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e010      	b.n	80051aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	3b01      	subs	r3, #1
 8005196:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	4013      	ands	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d196      	bne.n	80050d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3728      	adds	r7, #40	; 0x28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000004 	.word	0x20000004

080051b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7ff ff5b 	bl	800508c <SPI_WaitFifoStateUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e0:	f043 0220 	orr.w	r2, r3, #32
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e027      	b.n	800523c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2200      	movs	r2, #0
 80051f4:	2180      	movs	r1, #128	; 0x80
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7ff fec0 	bl	8004f7c <SPI_WaitFlagStateUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e014      	b.n	800523c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2200      	movs	r2, #0
 800521a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff ff34 	bl	800508c <SPI_WaitFifoStateUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e000      	b.n	800523c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800524c:	f7fb ff70 	bl	8001130 <HAL_GetTick>
 8005250:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0220 	bic.w	r2, r2, #32
 8005260:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	2164      	movs	r1, #100	; 0x64
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff ffa6 	bl	80051b8 <SPI_EndRxTxTransaction>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005276:	f043 0220 	orr.w	r2, r3, #32
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005282:	2b00      	cmp	r3, #0
 8005284:	d115      	bne.n	80052b2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b04      	cmp	r3, #4
 8005290:	d107      	bne.n	80052a2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff fd3a 	bl	8004d14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80052a0:	e00e      	b.n	80052c0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fb fbb6 	bl	8000a1c <HAL_SPI_TxRxCpltCallback>
}
 80052b0:	e006      	b.n	80052c0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fd34 	bl	8004d28 <HAL_SPI_ErrorCallback>
}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e042      	b.n	8005360 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fb fd77 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2224      	movs	r2, #36	; 0x24
 80052f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fb24 	bl	8005960 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f825 	bl	8005368 <UART_SetConfig>
 800531e:	4603      	mov	r3, r0
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e01b      	b.n	8005360 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fba3 	bl	8005aa4 <UART_CheckIdleState>
 800535e:	4603      	mov	r3, r0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800536c:	b08c      	sub	sp, #48	; 0x30
 800536e:	af00      	add	r7, sp, #0
 8005370:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	431a      	orrs	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	431a      	orrs	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	4313      	orrs	r3, r2
 800538e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4baa      	ldr	r3, [pc, #680]	; (8005640 <UART_SetConfig+0x2d8>)
 8005398:	4013      	ands	r3, r2
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a0:	430b      	orrs	r3, r1
 80053a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a9f      	ldr	r2, [pc, #636]	; (8005644 <UART_SetConfig+0x2dc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053d0:	4313      	orrs	r3, r2
 80053d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80053de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	f023 010f 	bic.w	r1, r3, #15
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a90      	ldr	r2, [pc, #576]	; (8005648 <UART_SetConfig+0x2e0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d125      	bne.n	8005458 <UART_SetConfig+0xf0>
 800540c:	4b8f      	ldr	r3, [pc, #572]	; (800564c <UART_SetConfig+0x2e4>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	2b03      	cmp	r3, #3
 8005418:	d81a      	bhi.n	8005450 <UART_SetConfig+0xe8>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0xb8>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005431 	.word	0x08005431
 8005424:	08005441 	.word	0x08005441
 8005428:	08005439 	.word	0x08005439
 800542c:	08005449 	.word	0x08005449
 8005430:	2301      	movs	r3, #1
 8005432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005436:	e116      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005438:	2302      	movs	r3, #2
 800543a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800543e:	e112      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005440:	2304      	movs	r3, #4
 8005442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005446:	e10e      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005448:	2308      	movs	r3, #8
 800544a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800544e:	e10a      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005450:	2310      	movs	r3, #16
 8005452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005456:	e106      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a7c      	ldr	r2, [pc, #496]	; (8005650 <UART_SetConfig+0x2e8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d138      	bne.n	80054d4 <UART_SetConfig+0x16c>
 8005462:	4b7a      	ldr	r3, [pc, #488]	; (800564c <UART_SetConfig+0x2e4>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	f003 030c 	and.w	r3, r3, #12
 800546c:	2b0c      	cmp	r3, #12
 800546e:	d82d      	bhi.n	80054cc <UART_SetConfig+0x164>
 8005470:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <UART_SetConfig+0x110>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054cd 	.word	0x080054cd
 8005480:	080054cd 	.word	0x080054cd
 8005484:	080054cd 	.word	0x080054cd
 8005488:	080054bd 	.word	0x080054bd
 800548c:	080054cd 	.word	0x080054cd
 8005490:	080054cd 	.word	0x080054cd
 8005494:	080054cd 	.word	0x080054cd
 8005498:	080054b5 	.word	0x080054b5
 800549c:	080054cd 	.word	0x080054cd
 80054a0:	080054cd 	.word	0x080054cd
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054c5 	.word	0x080054c5
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b2:	e0d8      	b.n	8005666 <UART_SetConfig+0x2fe>
 80054b4:	2302      	movs	r3, #2
 80054b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ba:	e0d4      	b.n	8005666 <UART_SetConfig+0x2fe>
 80054bc:	2304      	movs	r3, #4
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054c2:	e0d0      	b.n	8005666 <UART_SetConfig+0x2fe>
 80054c4:	2308      	movs	r3, #8
 80054c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ca:	e0cc      	b.n	8005666 <UART_SetConfig+0x2fe>
 80054cc:	2310      	movs	r3, #16
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054d2:	e0c8      	b.n	8005666 <UART_SetConfig+0x2fe>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a5e      	ldr	r2, [pc, #376]	; (8005654 <UART_SetConfig+0x2ec>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d125      	bne.n	800552a <UART_SetConfig+0x1c2>
 80054de:	4b5b      	ldr	r3, [pc, #364]	; (800564c <UART_SetConfig+0x2e4>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054e8:	2b30      	cmp	r3, #48	; 0x30
 80054ea:	d016      	beq.n	800551a <UART_SetConfig+0x1b2>
 80054ec:	2b30      	cmp	r3, #48	; 0x30
 80054ee:	d818      	bhi.n	8005522 <UART_SetConfig+0x1ba>
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d00a      	beq.n	800550a <UART_SetConfig+0x1a2>
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d814      	bhi.n	8005522 <UART_SetConfig+0x1ba>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <UART_SetConfig+0x19a>
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d008      	beq.n	8005512 <UART_SetConfig+0x1aa>
 8005500:	e00f      	b.n	8005522 <UART_SetConfig+0x1ba>
 8005502:	2300      	movs	r3, #0
 8005504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005508:	e0ad      	b.n	8005666 <UART_SetConfig+0x2fe>
 800550a:	2302      	movs	r3, #2
 800550c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005510:	e0a9      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005512:	2304      	movs	r3, #4
 8005514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005518:	e0a5      	b.n	8005666 <UART_SetConfig+0x2fe>
 800551a:	2308      	movs	r3, #8
 800551c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005520:	e0a1      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005522:	2310      	movs	r3, #16
 8005524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005528:	e09d      	b.n	8005666 <UART_SetConfig+0x2fe>
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a4a      	ldr	r2, [pc, #296]	; (8005658 <UART_SetConfig+0x2f0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d125      	bne.n	8005580 <UART_SetConfig+0x218>
 8005534:	4b45      	ldr	r3, [pc, #276]	; (800564c <UART_SetConfig+0x2e4>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800553e:	2bc0      	cmp	r3, #192	; 0xc0
 8005540:	d016      	beq.n	8005570 <UART_SetConfig+0x208>
 8005542:	2bc0      	cmp	r3, #192	; 0xc0
 8005544:	d818      	bhi.n	8005578 <UART_SetConfig+0x210>
 8005546:	2b80      	cmp	r3, #128	; 0x80
 8005548:	d00a      	beq.n	8005560 <UART_SetConfig+0x1f8>
 800554a:	2b80      	cmp	r3, #128	; 0x80
 800554c:	d814      	bhi.n	8005578 <UART_SetConfig+0x210>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <UART_SetConfig+0x1f0>
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d008      	beq.n	8005568 <UART_SetConfig+0x200>
 8005556:	e00f      	b.n	8005578 <UART_SetConfig+0x210>
 8005558:	2300      	movs	r3, #0
 800555a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800555e:	e082      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005560:	2302      	movs	r3, #2
 8005562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005566:	e07e      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005568:	2304      	movs	r3, #4
 800556a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800556e:	e07a      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005570:	2308      	movs	r3, #8
 8005572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005576:	e076      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005578:	2310      	movs	r3, #16
 800557a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800557e:	e072      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a35      	ldr	r2, [pc, #212]	; (800565c <UART_SetConfig+0x2f4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d12a      	bne.n	80055e0 <UART_SetConfig+0x278>
 800558a:	4b30      	ldr	r3, [pc, #192]	; (800564c <UART_SetConfig+0x2e4>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005598:	d01a      	beq.n	80055d0 <UART_SetConfig+0x268>
 800559a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800559e:	d81b      	bhi.n	80055d8 <UART_SetConfig+0x270>
 80055a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a4:	d00c      	beq.n	80055c0 <UART_SetConfig+0x258>
 80055a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055aa:	d815      	bhi.n	80055d8 <UART_SetConfig+0x270>
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <UART_SetConfig+0x250>
 80055b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b4:	d008      	beq.n	80055c8 <UART_SetConfig+0x260>
 80055b6:	e00f      	b.n	80055d8 <UART_SetConfig+0x270>
 80055b8:	2300      	movs	r3, #0
 80055ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055be:	e052      	b.n	8005666 <UART_SetConfig+0x2fe>
 80055c0:	2302      	movs	r3, #2
 80055c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055c6:	e04e      	b.n	8005666 <UART_SetConfig+0x2fe>
 80055c8:	2304      	movs	r3, #4
 80055ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ce:	e04a      	b.n	8005666 <UART_SetConfig+0x2fe>
 80055d0:	2308      	movs	r3, #8
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d6:	e046      	b.n	8005666 <UART_SetConfig+0x2fe>
 80055d8:	2310      	movs	r3, #16
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055de:	e042      	b.n	8005666 <UART_SetConfig+0x2fe>
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a17      	ldr	r2, [pc, #92]	; (8005644 <UART_SetConfig+0x2dc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d13a      	bne.n	8005660 <UART_SetConfig+0x2f8>
 80055ea:	4b18      	ldr	r3, [pc, #96]	; (800564c <UART_SetConfig+0x2e4>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f8:	d01a      	beq.n	8005630 <UART_SetConfig+0x2c8>
 80055fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055fe:	d81b      	bhi.n	8005638 <UART_SetConfig+0x2d0>
 8005600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005604:	d00c      	beq.n	8005620 <UART_SetConfig+0x2b8>
 8005606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800560a:	d815      	bhi.n	8005638 <UART_SetConfig+0x2d0>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <UART_SetConfig+0x2b0>
 8005610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005614:	d008      	beq.n	8005628 <UART_SetConfig+0x2c0>
 8005616:	e00f      	b.n	8005638 <UART_SetConfig+0x2d0>
 8005618:	2300      	movs	r3, #0
 800561a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800561e:	e022      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005620:	2302      	movs	r3, #2
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005626:	e01e      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005628:	2304      	movs	r3, #4
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562e:	e01a      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005630:	2308      	movs	r3, #8
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005636:	e016      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005638:	2310      	movs	r3, #16
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563e:	e012      	b.n	8005666 <UART_SetConfig+0x2fe>
 8005640:	cfff69f3 	.word	0xcfff69f3
 8005644:	40008000 	.word	0x40008000
 8005648:	40013800 	.word	0x40013800
 800564c:	40021000 	.word	0x40021000
 8005650:	40004400 	.word	0x40004400
 8005654:	40004800 	.word	0x40004800
 8005658:	40004c00 	.word	0x40004c00
 800565c:	40005000 	.word	0x40005000
 8005660:	2310      	movs	r3, #16
 8005662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4aae      	ldr	r2, [pc, #696]	; (8005924 <UART_SetConfig+0x5bc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	f040 8097 	bne.w	80057a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005676:	2b08      	cmp	r3, #8
 8005678:	d823      	bhi.n	80056c2 <UART_SetConfig+0x35a>
 800567a:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <UART_SetConfig+0x318>)
 800567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005680:	080056a5 	.word	0x080056a5
 8005684:	080056c3 	.word	0x080056c3
 8005688:	080056ad 	.word	0x080056ad
 800568c:	080056c3 	.word	0x080056c3
 8005690:	080056b3 	.word	0x080056b3
 8005694:	080056c3 	.word	0x080056c3
 8005698:	080056c3 	.word	0x080056c3
 800569c:	080056c3 	.word	0x080056c3
 80056a0:	080056bb 	.word	0x080056bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a4:	f7fe fe28 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 80056a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056aa:	e010      	b.n	80056ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056ac:	4b9e      	ldr	r3, [pc, #632]	; (8005928 <UART_SetConfig+0x5c0>)
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056b0:	e00d      	b.n	80056ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b2:	f7fe fdb3 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80056b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056b8:	e009      	b.n	80056ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056c0:	e005      	b.n	80056ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80056cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8130 	beq.w	8005936 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	4a94      	ldr	r2, [pc, #592]	; (800592c <UART_SetConfig+0x5c4>)
 80056dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056e0:	461a      	mov	r2, r3
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	4413      	add	r3, r2
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d305      	bcc.n	8005706 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	429a      	cmp	r2, r3
 8005704:	d903      	bls.n	800570e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800570c:	e113      	b.n	8005936 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	2200      	movs	r2, #0
 8005712:	60bb      	str	r3, [r7, #8]
 8005714:	60fa      	str	r2, [r7, #12]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	4a84      	ldr	r2, [pc, #528]	; (800592c <UART_SetConfig+0x5c4>)
 800571c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005720:	b29b      	uxth	r3, r3
 8005722:	2200      	movs	r2, #0
 8005724:	603b      	str	r3, [r7, #0]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800572c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005730:	f7fa fd72 	bl	8000218 <__aeabi_uldivmod>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4610      	mov	r0, r2
 800573a:	4619      	mov	r1, r3
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	020b      	lsls	r3, r1, #8
 8005746:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800574a:	0202      	lsls	r2, r0, #8
 800574c:	6979      	ldr	r1, [r7, #20]
 800574e:	6849      	ldr	r1, [r1, #4]
 8005750:	0849      	lsrs	r1, r1, #1
 8005752:	2000      	movs	r0, #0
 8005754:	460c      	mov	r4, r1
 8005756:	4605      	mov	r5, r0
 8005758:	eb12 0804 	adds.w	r8, r2, r4
 800575c:	eb43 0905 	adc.w	r9, r3, r5
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	469a      	mov	sl, r3
 8005768:	4693      	mov	fp, r2
 800576a:	4652      	mov	r2, sl
 800576c:	465b      	mov	r3, fp
 800576e:	4640      	mov	r0, r8
 8005770:	4649      	mov	r1, r9
 8005772:	f7fa fd51 	bl	8000218 <__aeabi_uldivmod>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4613      	mov	r3, r2
 800577c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005784:	d308      	bcc.n	8005798 <UART_SetConfig+0x430>
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800578c:	d204      	bcs.n	8005798 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6a3a      	ldr	r2, [r7, #32]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	e0ce      	b.n	8005936 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800579e:	e0ca      	b.n	8005936 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a8:	d166      	bne.n	8005878 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80057aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d827      	bhi.n	8005802 <UART_SetConfig+0x49a>
 80057b2:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <UART_SetConfig+0x450>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	080057dd 	.word	0x080057dd
 80057bc:	080057e5 	.word	0x080057e5
 80057c0:	080057ed 	.word	0x080057ed
 80057c4:	08005803 	.word	0x08005803
 80057c8:	080057f3 	.word	0x080057f3
 80057cc:	08005803 	.word	0x08005803
 80057d0:	08005803 	.word	0x08005803
 80057d4:	08005803 	.word	0x08005803
 80057d8:	080057fb 	.word	0x080057fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057dc:	f7fe fd8c 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 80057e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057e2:	e014      	b.n	800580e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e4:	f7fe fd9e 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 80057e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057ea:	e010      	b.n	800580e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057ec:	4b4e      	ldr	r3, [pc, #312]	; (8005928 <UART_SetConfig+0x5c0>)
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057f0:	e00d      	b.n	800580e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057f2:	f7fe fd13 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80057f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057f8:	e009      	b.n	800580e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005800:	e005      	b.n	800580e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800580c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8090 	beq.w	8005936 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	4a44      	ldr	r2, [pc, #272]	; (800592c <UART_SetConfig+0x5c4>)
 800581c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005820:	461a      	mov	r2, r3
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	fbb3 f3f2 	udiv	r3, r3, r2
 8005828:	005a      	lsls	r2, r3, #1
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	441a      	add	r2, r3
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	fbb2 f3f3 	udiv	r3, r2, r3
 800583a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	2b0f      	cmp	r3, #15
 8005840:	d916      	bls.n	8005870 <UART_SetConfig+0x508>
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005848:	d212      	bcs.n	8005870 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	b29b      	uxth	r3, r3
 800584e:	f023 030f 	bic.w	r3, r3, #15
 8005852:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	b29b      	uxth	r3, r3
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	b29a      	uxth	r2, r3
 8005860:	8bfb      	ldrh	r3, [r7, #30]
 8005862:	4313      	orrs	r3, r2
 8005864:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	8bfa      	ldrh	r2, [r7, #30]
 800586c:	60da      	str	r2, [r3, #12]
 800586e:	e062      	b.n	8005936 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005876:	e05e      	b.n	8005936 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005878:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800587c:	2b08      	cmp	r3, #8
 800587e:	d828      	bhi.n	80058d2 <UART_SetConfig+0x56a>
 8005880:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <UART_SetConfig+0x520>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058ad 	.word	0x080058ad
 800588c:	080058b5 	.word	0x080058b5
 8005890:	080058bd 	.word	0x080058bd
 8005894:	080058d3 	.word	0x080058d3
 8005898:	080058c3 	.word	0x080058c3
 800589c:	080058d3 	.word	0x080058d3
 80058a0:	080058d3 	.word	0x080058d3
 80058a4:	080058d3 	.word	0x080058d3
 80058a8:	080058cb 	.word	0x080058cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ac:	f7fe fd24 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 80058b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058b2:	e014      	b.n	80058de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058b4:	f7fe fd36 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 80058b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058ba:	e010      	b.n	80058de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058bc:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <UART_SetConfig+0x5c0>)
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058c0:	e00d      	b.n	80058de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058c2:	f7fe fcab 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80058c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058c8:	e009      	b.n	80058de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058d0:	e005      	b.n	80058de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058dc:	bf00      	nop
    }

    if (pclk != 0U)
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d028      	beq.n	8005936 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	4a10      	ldr	r2, [pc, #64]	; (800592c <UART_SetConfig+0x5c4>)
 80058ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	441a      	add	r2, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	fbb2 f3f3 	udiv	r3, r2, r3
 8005906:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	2b0f      	cmp	r3, #15
 800590c:	d910      	bls.n	8005930 <UART_SetConfig+0x5c8>
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005914:	d20c      	bcs.n	8005930 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	b29a      	uxth	r2, r3
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	e009      	b.n	8005936 <UART_SetConfig+0x5ce>
 8005922:	bf00      	nop
 8005924:	40008000 	.word	0x40008000
 8005928:	00f42400 	.word	0x00f42400
 800592c:	0800602c 	.word	0x0800602c
      }
      else
      {
        ret = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2201      	movs	r2, #1
 800593a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2201      	movs	r2, #1
 8005942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2200      	movs	r2, #0
 800594a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2200      	movs	r2, #0
 8005950:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005952:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005956:	4618      	mov	r0, r3
 8005958:	3730      	adds	r7, #48	; 0x30
 800595a:	46bd      	mov	sp, r7
 800595c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01a      	beq.n	8005a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5e:	d10a      	bne.n	8005a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	605a      	str	r2, [r3, #4]
  }
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b098      	sub	sp, #96	; 0x60
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ab4:	f7fb fb3c 	bl	8001130 <HAL_GetTick>
 8005ab8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d12f      	bne.n	8005b28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f88e 	bl	8005bf8 <UART_WaitOnFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d022      	beq.n	8005b28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af6:	653b      	str	r3, [r7, #80]	; 0x50
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b00:	647b      	str	r3, [r7, #68]	; 0x44
 8005b02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e6      	bne.n	8005ae2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e063      	b.n	8005bf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d149      	bne.n	8005bca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f857 	bl	8005bf8 <UART_WaitOnFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d03c      	beq.n	8005bca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e6      	bne.n	8005b50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ba2:	61fa      	str	r2, [r7, #28]
 8005ba4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	69b9      	ldr	r1, [r7, #24]
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	617b      	str	r3, [r7, #20]
   return(result);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e5      	bne.n	8005b82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e012      	b.n	8005bf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3758      	adds	r7, #88	; 0x58
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	4613      	mov	r3, r2
 8005c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c08:	e04f      	b.n	8005caa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d04b      	beq.n	8005caa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c12:	f7fb fa8d 	bl	8001130 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e04e      	b.n	8005cca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d037      	beq.n	8005caa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b80      	cmp	r3, #128	; 0x80
 8005c3e:	d034      	beq.n	8005caa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	d031      	beq.n	8005caa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d110      	bne.n	8005c76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2208      	movs	r2, #8
 8005c5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f838 	bl	8005cd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2208      	movs	r2, #8
 8005c66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e029      	b.n	8005cca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c84:	d111      	bne.n	8005caa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f81e 	bl	8005cd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e00f      	b.n	8005cca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	bf0c      	ite	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	2300      	movne	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d0a0      	beq.n	8005c0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b095      	sub	sp, #84	; 0x54
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8005cfa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e6      	bne.n	8005cda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3308      	adds	r3, #8
 8005d12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3308      	adds	r3, #8
 8005d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e3      	bne.n	8005d0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d118      	bne.n	8005d7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f023 0310 	bic.w	r3, r3, #16
 8005d60:	647b      	str	r3, [r7, #68]	; 0x44
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	6979      	ldr	r1, [r7, #20]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	613b      	str	r3, [r7, #16]
   return(result);
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e6      	bne.n	8005d4c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005d92:	bf00      	nop
 8005d94:	3754      	adds	r7, #84	; 0x54
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e027      	b.n	8005e04 <HAL_UARTEx_DisableFifoMode+0x66>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2224      	movs	r2, #36	; 0x24
 8005dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005de2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e02d      	b.n	8005e84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2224      	movs	r2, #36	; 0x24
 8005e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0201 	bic.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f84f 	bl	8005f08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e02d      	b.n	8005f00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2224      	movs	r2, #36	; 0x24
 8005eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0201 	bic.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f811 	bl	8005f08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d108      	bne.n	8005f2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f28:	e031      	b.n	8005f8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f2a:	2308      	movs	r3, #8
 8005f2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f2e:	2308      	movs	r3, #8
 8005f30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	0e5b      	lsrs	r3, r3, #25
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	0f5b      	lsrs	r3, r3, #29
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f52:	7bbb      	ldrb	r3, [r7, #14]
 8005f54:	7b3a      	ldrb	r2, [r7, #12]
 8005f56:	4911      	ldr	r1, [pc, #68]	; (8005f9c <UARTEx_SetNbDataToProcess+0x94>)
 8005f58:	5c8a      	ldrb	r2, [r1, r2]
 8005f5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f5e:	7b3a      	ldrb	r2, [r7, #12]
 8005f60:	490f      	ldr	r1, [pc, #60]	; (8005fa0 <UARTEx_SetNbDataToProcess+0x98>)
 8005f62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f64:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	7b7a      	ldrb	r2, [r7, #13]
 8005f74:	4909      	ldr	r1, [pc, #36]	; (8005f9c <UARTEx_SetNbDataToProcess+0x94>)
 8005f76:	5c8a      	ldrb	r2, [r1, r2]
 8005f78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f7c:	7b7a      	ldrb	r2, [r7, #13]
 8005f7e:	4908      	ldr	r1, [pc, #32]	; (8005fa0 <UARTEx_SetNbDataToProcess+0x98>)
 8005f80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f82:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	08006044 	.word	0x08006044
 8005fa0:	0800604c 	.word	0x0800604c

08005fa4 <memset>:
 8005fa4:	4402      	add	r2, r0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d100      	bne.n	8005fae <memset+0xa>
 8005fac:	4770      	bx	lr
 8005fae:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb2:	e7f9      	b.n	8005fa8 <memset+0x4>

08005fb4 <__libc_init_array>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	4d0d      	ldr	r5, [pc, #52]	; (8005fec <__libc_init_array+0x38>)
 8005fb8:	4c0d      	ldr	r4, [pc, #52]	; (8005ff0 <__libc_init_array+0x3c>)
 8005fba:	1b64      	subs	r4, r4, r5
 8005fbc:	10a4      	asrs	r4, r4, #2
 8005fbe:	2600      	movs	r6, #0
 8005fc0:	42a6      	cmp	r6, r4
 8005fc2:	d109      	bne.n	8005fd8 <__libc_init_array+0x24>
 8005fc4:	4d0b      	ldr	r5, [pc, #44]	; (8005ff4 <__libc_init_array+0x40>)
 8005fc6:	4c0c      	ldr	r4, [pc, #48]	; (8005ff8 <__libc_init_array+0x44>)
 8005fc8:	f000 f818 	bl	8005ffc <_init>
 8005fcc:	1b64      	subs	r4, r4, r5
 8005fce:	10a4      	asrs	r4, r4, #2
 8005fd0:	2600      	movs	r6, #0
 8005fd2:	42a6      	cmp	r6, r4
 8005fd4:	d105      	bne.n	8005fe2 <__libc_init_array+0x2e>
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
 8005fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fdc:	4798      	blx	r3
 8005fde:	3601      	adds	r6, #1
 8005fe0:	e7ee      	b.n	8005fc0 <__libc_init_array+0xc>
 8005fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe6:	4798      	blx	r3
 8005fe8:	3601      	adds	r6, #1
 8005fea:	e7f2      	b.n	8005fd2 <__libc_init_array+0x1e>
 8005fec:	0800605c 	.word	0x0800605c
 8005ff0:	0800605c 	.word	0x0800605c
 8005ff4:	0800605c 	.word	0x0800605c
 8005ff8:	08006060 	.word	0x08006060

08005ffc <_init>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	bf00      	nop
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr

08006008 <_fini>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	bf00      	nop
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr
